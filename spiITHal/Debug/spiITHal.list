
spiITHal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e240  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800e408  0800e408  0001e408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e468  0800e468  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800e468  0800e468  0001e468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e470  0800e470  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e470  0800e470  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e474  0800e474  0001e474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800e478  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec4  20000174  0800e5ec  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002038  0800e5ec  00022038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dbd6  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ff  00000000  00000000  0003ddbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  000422c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001450  00000000  00000000  00043d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa3c  00000000  00000000  00045170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000222b4  00000000  00000000  0006fbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9b4d  00000000  00000000  00091e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073c0  00000000  00000000  0018b9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00192d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000174 	.word	0x20000174
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800e3f0 	.word	0x0800e3f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000178 	.word	0x20000178
 8000204:	0800e3f0 	.word	0x0800e3f0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b970 	b.w	8000d7c <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9e08      	ldr	r6, [sp, #32]
 8000aba:	460d      	mov	r5, r1
 8000abc:	4604      	mov	r4, r0
 8000abe:	460f      	mov	r7, r1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d14a      	bne.n	8000b5a <__udivmoddi4+0xa6>
 8000ac4:	428a      	cmp	r2, r1
 8000ac6:	4694      	mov	ip, r2
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0xe2>
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	b143      	cbz	r3, 8000ae2 <__udivmoddi4+0x2e>
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	f1c3 0220 	rsb	r2, r3, #32
 8000ad8:	409f      	lsls	r7, r3
 8000ada:	fa20 f202 	lsr.w	r2, r0, r2
 8000ade:	4317      	orrs	r7, r2
 8000ae0:	409c      	lsls	r4, r3
 8000ae2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ae6:	fa1f f58c 	uxth.w	r5, ip
 8000aea:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aee:	0c22      	lsrs	r2, r4, #16
 8000af0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000af4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af8:	fb01 f005 	mul.w	r0, r1, r5
 8000afc:	4290      	cmp	r0, r2
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x62>
 8000b00:	eb1c 0202 	adds.w	r2, ip, r2
 8000b04:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b08:	f080 811c 	bcs.w	8000d44 <__udivmoddi4+0x290>
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	f240 8119 	bls.w	8000d44 <__udivmoddi4+0x290>
 8000b12:	3902      	subs	r1, #2
 8000b14:	4462      	add	r2, ip
 8000b16:	1a12      	subs	r2, r2, r0
 8000b18:	b2a4      	uxth	r4, r4
 8000b1a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b1e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b22:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b26:	fb00 f505 	mul.w	r5, r0, r5
 8000b2a:	42a5      	cmp	r5, r4
 8000b2c:	d90a      	bls.n	8000b44 <__udivmoddi4+0x90>
 8000b2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b32:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b36:	f080 8107 	bcs.w	8000d48 <__udivmoddi4+0x294>
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	f240 8104 	bls.w	8000d48 <__udivmoddi4+0x294>
 8000b40:	4464      	add	r4, ip
 8000b42:	3802      	subs	r0, #2
 8000b44:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b48:	1b64      	subs	r4, r4, r5
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	b11e      	cbz	r6, 8000b56 <__udivmoddi4+0xa2>
 8000b4e:	40dc      	lsrs	r4, r3
 8000b50:	2300      	movs	r3, #0
 8000b52:	e9c6 4300 	strd	r4, r3, [r6]
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0xbc>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	f000 80ed 	beq.w	8000d3e <__udivmoddi4+0x28a>
 8000b64:	2100      	movs	r1, #0
 8000b66:	e9c6 0500 	strd	r0, r5, [r6]
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b70:	fab3 f183 	clz	r1, r3
 8000b74:	2900      	cmp	r1, #0
 8000b76:	d149      	bne.n	8000c0c <__udivmoddi4+0x158>
 8000b78:	42ab      	cmp	r3, r5
 8000b7a:	d302      	bcc.n	8000b82 <__udivmoddi4+0xce>
 8000b7c:	4282      	cmp	r2, r0
 8000b7e:	f200 80f8 	bhi.w	8000d72 <__udivmoddi4+0x2be>
 8000b82:	1a84      	subs	r4, r0, r2
 8000b84:	eb65 0203 	sbc.w	r2, r5, r3
 8000b88:	2001      	movs	r0, #1
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d0e2      	beq.n	8000b56 <__udivmoddi4+0xa2>
 8000b90:	e9c6 4700 	strd	r4, r7, [r6]
 8000b94:	e7df      	b.n	8000b56 <__udivmoddi4+0xa2>
 8000b96:	b902      	cbnz	r2, 8000b9a <__udivmoddi4+0xe6>
 8000b98:	deff      	udf	#255	; 0xff
 8000b9a:	fab2 f382 	clz	r3, r2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8090 	bne.w	8000cc4 <__udivmoddi4+0x210>
 8000ba4:	1a8a      	subs	r2, r1, r2
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bb4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb8:	0c22      	lsrs	r2, r4, #16
 8000bba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bbe:	fb0e f005 	mul.w	r0, lr, r5
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x124>
 8000bc6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bca:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x122>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2b8>
 8000bd6:	4645      	mov	r5, r8
 8000bd8:	1a12      	subs	r2, r2, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be0:	fb07 2210 	mls	r2, r7, r0, r2
 8000be4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x14e>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x14c>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2c2>
 8000c00:	4610      	mov	r0, r2
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c0a:	e79f      	b.n	8000b4c <__udivmoddi4+0x98>
 8000c0c:	f1c1 0720 	rsb	r7, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c22:	40fd      	lsrs	r5, r7
 8000c24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c28:	4323      	orrs	r3, r4
 8000c2a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c2e:	fa1f fe8c 	uxth.w	lr, ip
 8000c32:	fb09 5518 	mls	r5, r9, r8, r5
 8000c36:	0c1c      	lsrs	r4, r3, #16
 8000c38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c3c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	fa02 f201 	lsl.w	r2, r2, r1
 8000c46:	fa00 f001 	lsl.w	r0, r0, r1
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b0>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2b4>
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2b4>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4464      	add	r4, ip
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	b29d      	uxth	r5, r3
 8000c68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c70:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c74:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c78:	45a6      	cmp	lr, r4
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1da>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2ac>
 8000c86:	45a6      	cmp	lr, r4
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2ac>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	4464      	add	r4, ip
 8000c8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c92:	fba3 9502 	umull	r9, r5, r3, r2
 8000c96:	eba4 040e 	sub.w	r4, r4, lr
 8000c9a:	42ac      	cmp	r4, r5
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46ae      	mov	lr, r5
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x29c>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x298>
 8000ca4:	b156      	cbz	r6, 8000cbc <__udivmoddi4+0x208>
 8000ca6:	ebb0 0208 	subs.w	r2, r0, r8
 8000caa:	eb64 040e 	sbc.w	r4, r4, lr
 8000cae:	fa04 f707 	lsl.w	r7, r4, r7
 8000cb2:	40ca      	lsrs	r2, r1
 8000cb4:	40cc      	lsrs	r4, r1
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	f1c3 0120 	rsb	r1, r3, #32
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cd4:	409d      	lsls	r5, r3
 8000cd6:	432a      	orrs	r2, r5
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce8:	0c11      	lsrs	r1, r2, #16
 8000cea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cee:	fb00 f50e 	mul.w	r5, r0, lr
 8000cf2:	428d      	cmp	r5, r1
 8000cf4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x258>
 8000cfa:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b0>
 8000d04:	428d      	cmp	r5, r1
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b0>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	1b49      	subs	r1, r1, r5
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d14:	fb07 1115 	mls	r1, r7, r5, r1
 8000d18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d1c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d20:	4291      	cmp	r1, r2
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x282>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2a8>
 8000d2e:	4291      	cmp	r1, r2
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2a8>
 8000d32:	3d02      	subs	r5, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a52      	subs	r2, r2, r1
 8000d38:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0xfc>
 8000d3e:	4631      	mov	r1, r6
 8000d40:	4630      	mov	r0, r6
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xa2>
 8000d44:	4639      	mov	r1, r7
 8000d46:	e6e6      	b.n	8000b16 <__udivmoddi4+0x62>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	e6fb      	b.n	8000b44 <__udivmoddi4+0x90>
 8000d4c:	4548      	cmp	r0, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d5c:	4645      	mov	r5, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x282>
 8000d60:	462b      	mov	r3, r5
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1da>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x258>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b0>
 8000d6c:	3d02      	subs	r5, #2
 8000d6e:	4462      	add	r2, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x124>
 8000d72:	4608      	mov	r0, r1
 8000d74:	e70a      	b.n	8000b8c <__udivmoddi4+0xd8>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x14e>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4835      	ldr	r0, [pc, #212]	; (8000e60 <main+0xe0>)
 8000d8c:	f002 fd12 	bl	80037b4 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f001 fb25 	bl	80023de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f880 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fb9a 	bl	80014d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9c:	f000 fb5e 	bl	800145c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000da0:	f00c fbcc 	bl	800d53c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000da4:	f000 fa98 	bl	80012d8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000da8:	f000 f8e4 	bl	8000f74 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000dac:	f000 f9dc 	bl	8001168 <MX_TIM1_Init>
  MX_SPI3_Init();
 8000db0:	f000 f99c 	bl	80010ec <MX_SPI3_Init>
  MX_DAC_Init();
 8000db4:	f000 f930 	bl	8001018 <MX_DAC_Init>
  MX_I2C2_Init();
 8000db8:	f000 f958 	bl	800106c <MX_I2C2_Init>
  MX_TIM4_Init();
 8000dbc:	f000 fada 	bl	8001374 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4826      	ldr	r0, [pc, #152]	; (8000e60 <main+0xe0>)
 8000dc6:	f002 fcf5 	bl	80037b4 <HAL_GPIO_WritePin>
//  HAL_SPI_TransmitReceive_IT(&hspi3, (uint8_t*)&tDataSpi, (uint8_t*)&rDataSpi, 1);
  HAL_SPI_TransmitReceive_DMA(AS5047D_SPI, (uint8_t*)&tDataSpi, (uint8_t*)&rDataSpi, 1);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <main+0xe4>)
 8000dce:	4926      	ldr	r1, [pc, #152]	; (8000e68 <main+0xe8>)
 8000dd0:	4826      	ldr	r0, [pc, #152]	; (8000e6c <main+0xec>)
 8000dd2:	f006 ffd5 	bl	8007d80 <HAL_SPI_TransmitReceive_DMA>

  HAL_GPIO_WritePin(R_EN_Pin_GPIO_Port, R_EN_Pin_Pin, SET);//MOTOR SURUCU ENA Pinleri
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4824      	ldr	r0, [pc, #144]	; (8000e70 <main+0xf0>)
 8000dde:	f002 fce9 	bl	80037b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_EN_Pin_GPIO_Port, L_EN_Pin_Pin, SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <main+0xf0>)
 8000dea:	f002 fce3 	bl	80037b4 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(BTS7960_PWMTIM, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <main+0xf4>)
 8000df2:	f007 fde9 	bl	80089c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(BTS7960_PWMTIM, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	481e      	ldr	r0, [pc, #120]	; (8000e74 <main+0xf4>)
 8000dfa:	f007 fde5 	bl	80089c8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(USB_1KHZTIM);
 8000dfe:	481e      	ldr	r0, [pc, #120]	; (8000e78 <main+0xf8>)
 8000e00:	f007 fca8 	bl	8008754 <HAL_TIM_Base_Start_IT>
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

//  isI2Con = HAL_I2C_IsDeviceReady(&hi2c2, INA219_ADDRESS << 1, 10, 50);
  HAL_I2C_Mem_Write(INA219_I2C, (INA219_ADDRESS << 1), 0x00, 1, INA219_CONFIG, 2, 1000);
 8000e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <main+0xfc>)
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	2200      	movs	r2, #0
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <main+0x100>)
 8000e1a:	f002 fd75 	bl	8003908 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(INA219_I2C, (INA219_ADDRESS << 1), 0x05, 1, INA219_CALIB, 2, 1000);
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2302      	movs	r3, #2
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <main+0x104>)
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2205      	movs	r2, #5
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4813      	ldr	r0, [pc, #76]	; (8000e80 <main+0x100>)
 8000e34:	f002 fd68 	bl	8003908 <HAL_I2C_Mem_Write>
//  HAL_I2C_Mem_Read_DMA(&hi2c2, INA219_ADDRESS << 1, 0x04, 1, Current, 2);
  HAL_I2C_Mem_Read_IT(INA219_I2C, INA219_ADDRESS << 1, 0x04, 1, Current, 2);
 8000e38:	2302      	movs	r3, #2
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <main+0x108>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2204      	movs	r2, #4
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	480e      	ldr	r0, [pc, #56]	; (8000e80 <main+0x100>)
 8000e48:	f002 fe72 	bl	8003b30 <HAL_I2C_Mem_Read_IT>

  FirstOrderIIR_Init(&hpassfilt, IIR_Filter_Alpha);
 8000e4c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000e8c <main+0x10c>
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <main+0x110>)
 8000e52:	f000 fedf 	bl	8001c14 <FirstOrderIIR_Init>
  HAL_TIM_Base_Start_IT(filterTimer);
 8000e56:	480f      	ldr	r0, [pc, #60]	; (8000e94 <main+0x114>)
 8000e58:	f007 fc7c 	bl	8008754 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <main+0xdc>
 8000e5e:	bf00      	nop
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	200004cc 	.word	0x200004cc
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	200002a0 	.word	0x200002a0
 8000e70:	40021400 	.word	0x40021400
 8000e74:	200003c4 	.word	0x200003c4
 8000e78:	20000410 	.word	0x20000410
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	2000024c 	.word	0x2000024c
 8000e84:	20000014 	.word	0x20000014
 8000e88:	200004e4 	.word	0x200004e4
 8000e8c:	3f7cf41f 	.word	0x3f7cf41f
 8000e90:	200004bc 	.word	0x200004bc
 8000e94:	2000045c 	.word	0x2000045c

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2230      	movs	r2, #48	; 0x30
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00d fa12 	bl	800e2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ebc:	f005 fdc2 	bl	8006a44 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <SystemClock_Config+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f08:	23d8      	movs	r3, #216	; 0xd8
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f10:	2309      	movs	r3, #9
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 fdf3 	bl	8006b04 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f24:	f000 fefe 	bl	8001d24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f28:	f005 fd9c 	bl	8006a64 <HAL_PWREx_EnableOverDrive>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f32:	f000 fef7 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2107      	movs	r1, #7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 f879 	bl	800704c <HAL_RCC_ClockConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f60:	f000 fee0 	bl	8001d24 <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3750      	adds	r7, #80	; 0x50
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <MX_ADC1_Init+0x98>)
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_ADC1_Init+0x98>)
 8000f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_ADC1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_ADC1_Init+0x98>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_ADC1_Init+0x98>)
 8000fb6:	4a17      	ldr	r2, [pc, #92]	; (8001014 <MX_ADC1_Init+0xa0>)
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_ADC1_Init+0x98>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC1_Init+0x98>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_ADC1_Init+0x98>)
 8000fd6:	f001 fa83 	bl	80024e0 <HAL_ADC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fe0:	f000 fea0 	bl	8001d24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_ADC1_Init+0x98>)
 8000ff6:	f001 fab7 	bl	8002568 <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001000:	f000 fe90 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000190 	.word	0x20000190
 8001010:	40012000 	.word	0x40012000
 8001014:	0f000001 	.word	0x0f000001

08001018 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_DAC_Init+0x4c>)
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <MX_DAC_Init+0x50>)
 800102a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_DAC_Init+0x4c>)
 800102e:	f001 fdfc 	bl	8002c2a <HAL_DAC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001038:	f000 fe74 	bl	8001d24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_DAC_Init+0x4c>)
 800104c:	f001 fe0f 	bl	8002c6e <HAL_DAC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001056:	f000 fe65 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000238 	.word	0x20000238
 8001068:	40007400 	.word	0x40007400

0800106c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_I2C2_Init+0x74>)
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <MX_I2C2_Init+0x78>)
 8001074:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_I2C2_Init+0x74>)
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <MX_I2C2_Init+0x7c>)
 800107a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_I2C2_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_I2C2_Init+0x74>)
 8001084:	2201      	movs	r2, #1
 8001086:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_I2C2_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_I2C2_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C2_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_I2C2_Init+0x74>)
 80010a8:	f002 fb9e 	bl	80037e8 <HAL_I2C_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010b2:	f000 fe37 	bl	8001d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <MX_I2C2_Init+0x74>)
 80010ba:	f004 f973 	bl	80053a4 <HAL_I2CEx_ConfigAnalogFilter>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010c4:	f000 fe2e 	bl	8001d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_I2C2_Init+0x74>)
 80010cc:	f004 f9b5 	bl	800543a <HAL_I2CEx_ConfigDigitalFilter>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f000 fe25 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000024c 	.word	0x2000024c
 80010e4:	40005800 	.word	0x40005800
 80010e8:	20404768 	.word	0x20404768

080010ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_SPI3_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <MX_SPI3_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_SPI3_Init+0x74>)
 80010f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_SPI3_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_SPI3_Init+0x74>)
 8001106:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800110a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SPI3_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_SPI3_Init+0x74>)
 8001114:	2201      	movs	r2, #1
 8001116:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI3_Init+0x74>)
 800111a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SPI3_Init+0x74>)
 8001122:	2220      	movs	r2, #32
 8001124:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI3_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI3_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_SPI3_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI3_Init+0x74>)
 800113a:	2207      	movs	r2, #7
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_SPI3_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI3_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_SPI3_Init+0x74>)
 800114c:	f006 fd6c 	bl	8007c28 <HAL_SPI_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fde5 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002a0 	.word	0x200002a0
 8001164:	40003c00 	.word	0x40003c00

08001168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b09a      	sub	sp, #104	; 0x68
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001188:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	222c      	movs	r2, #44	; 0x2c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00d f894 	bl	800e2d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011aa:	4a4a      	ldr	r2, [pc, #296]	; (80012d4 <MX_TIM1_Init+0x16c>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8640-1;
 80011ba:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011bc:	f242 12bf 	movw	r2, #8639	; 0x21bf
 80011c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d4:	483e      	ldr	r0, [pc, #248]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011d6:	f007 fa65 	bl	80086a4 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011e0:	f000 fda0 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ee:	4619      	mov	r1, r3
 80011f0:	4837      	ldr	r0, [pc, #220]	; (80012d0 <MX_TIM1_Init+0x168>)
 80011f2:	f007 ff91 	bl	8009118 <HAL_TIM_ConfigClockSource>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011fc:	f000 fd92 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001200:	4833      	ldr	r0, [pc, #204]	; (80012d0 <MX_TIM1_Init+0x168>)
 8001202:	f007 fb80 	bl	8008906 <HAL_TIM_PWM_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800120c:	f000 fd8a 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001220:	4619      	mov	r1, r3
 8001222:	482b      	ldr	r0, [pc, #172]	; (80012d0 <MX_TIM1_Init+0x168>)
 8001224:	f008 fc28 	bl	8009a78 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800122e:	f000 fd79 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001232:	2360      	movs	r3, #96	; 0x60
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <MX_TIM1_Init+0x168>)
 8001258:	f007 fe4a 	bl	8008ef0 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001262:	f000 fd5f 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800126a:	2204      	movs	r2, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <MX_TIM1_Init+0x168>)
 8001270:	f007 fe3e 	bl	8008ef0 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800127a:	f000 fd53 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM1_Init+0x168>)
 80012b4:	f008 fc6e 	bl	8009b94 <HAL_TIMEx_ConfigBreakDeadTime>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012be:	f000 fd31 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM1_Init+0x168>)
 80012c4:	f000 ff72 	bl	80021ac <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3768      	adds	r7, #104	; 0x68
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200003c4 	.word	0x200003c4
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM3_Init+0x94>)
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <MX_TIM3_Init+0x98>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM3_Init+0x94>)
 80012fe:	226b      	movs	r2, #107	; 0x6b
 8001300:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM3_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM3_Init+0x94>)
 800130a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM3_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM3_Init+0x94>)
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM3_Init+0x94>)
 800131e:	f007 f9c1 	bl	80086a4 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001328:	f000 fcfc 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM3_Init+0x94>)
 800133a:	f007 feed 	bl	8009118 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 fcee 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM3_Init+0x94>)
 8001356:	f008 fb8f 	bl	8009a78 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 fce0 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000410 	.word	0x20000410
 8001370:	40000400 	.word	0x40000400

08001374 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <MX_TIM4_Init+0xe4>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013ae:	2213      	movs	r2, #19
 80013b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013cc:	4821      	ldr	r0, [pc, #132]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013ce:	f007 f969 	bl	80086a4 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013d8:	f000 fca4 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e6:	4619      	mov	r1, r3
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013ea:	f007 fe95 	bl	8009118 <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013f4:	f000 fc96 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80013f8:	4816      	ldr	r0, [pc, #88]	; (8001454 <MX_TIM4_Init+0xe0>)
 80013fa:	f007 fa23 	bl	8008844 <HAL_TIM_OC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001404:	f000 fc8e 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <MX_TIM4_Init+0xe0>)
 8001418:	f008 fb2e 	bl	8009a78 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001422:	f000 fc7f 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM4_Init+0xe0>)
 800143e:	f007 fcdd 	bl	8008dfc <HAL_TIM_OC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001448:	f000 fc6c 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3738      	adds	r7, #56	; 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000045c 	.word	0x2000045c
 8001458:	40000800 	.word	0x40000800

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_DMA_Init+0x70>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <MX_DMA_Init+0x70>)
 8001468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_DMA_Init+0x70>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_DMA_Init+0x70>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_DMA_Init+0x70>)
 8001480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_DMA_Init+0x70>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	200b      	movs	r0, #11
 8001498:	f001 fb91 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800149c:	200b      	movs	r0, #11
 800149e:	f001 fbaa 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2010      	movs	r0, #16
 80014a8:	f001 fb89 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014ac:	2010      	movs	r0, #16
 80014ae:	f001 fba2 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2038      	movs	r0, #56	; 0x38
 80014b8:	f001 fb81 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014bc:	2038      	movs	r0, #56	; 0x38
 80014be:	f001 fb9a 	bl	8002bf6 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b99      	ldr	r3, [pc, #612]	; (800174c <MX_GPIO_Init+0x27c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a98      	ldr	r2, [pc, #608]	; (800174c <MX_GPIO_Init+0x27c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b96      	ldr	r3, [pc, #600]	; (800174c <MX_GPIO_Init+0x27c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4b93      	ldr	r3, [pc, #588]	; (800174c <MX_GPIO_Init+0x27c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a92      	ldr	r2, [pc, #584]	; (800174c <MX_GPIO_Init+0x27c>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <MX_GPIO_Init+0x27c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	4b8d      	ldr	r3, [pc, #564]	; (800174c <MX_GPIO_Init+0x27c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a8c      	ldr	r2, [pc, #560]	; (800174c <MX_GPIO_Init+0x27c>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b8a      	ldr	r3, [pc, #552]	; (800174c <MX_GPIO_Init+0x27c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b87      	ldr	r3, [pc, #540]	; (800174c <MX_GPIO_Init+0x27c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a86      	ldr	r2, [pc, #536]	; (800174c <MX_GPIO_Init+0x27c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b84      	ldr	r3, [pc, #528]	; (800174c <MX_GPIO_Init+0x27c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b81      	ldr	r3, [pc, #516]	; (800174c <MX_GPIO_Init+0x27c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a80      	ldr	r2, [pc, #512]	; (800174c <MX_GPIO_Init+0x27c>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b7e      	ldr	r3, [pc, #504]	; (800174c <MX_GPIO_Init+0x27c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4b7b      	ldr	r3, [pc, #492]	; (800174c <MX_GPIO_Init+0x27c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a7a      	ldr	r2, [pc, #488]	; (800174c <MX_GPIO_Init+0x27c>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b78      	ldr	r3, [pc, #480]	; (800174c <MX_GPIO_Init+0x27c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <MX_GPIO_Init+0x27c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a74      	ldr	r2, [pc, #464]	; (800174c <MX_GPIO_Init+0x27c>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b72      	ldr	r3, [pc, #456]	; (800174c <MX_GPIO_Init+0x27c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800158e:	4b6f      	ldr	r3, [pc, #444]	; (800174c <MX_GPIO_Init+0x27c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a6e      	ldr	r2, [pc, #440]	; (800174c <MX_GPIO_Init+0x27c>)
 8001594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b6c      	ldr	r3, [pc, #432]	; (800174c <MX_GPIO_Init+0x27c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80015ac:	4868      	ldr	r0, [pc, #416]	; (8001750 <MX_GPIO_Init+0x280>)
 80015ae:	f002 f901 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R_EN_Pin_Pin|L_EN_Pin_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80015b8:	4866      	ldr	r0, [pc, #408]	; (8001754 <MX_GPIO_Init+0x284>)
 80015ba:	f002 f8fb 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	4865      	ldr	r0, [pc, #404]	; (8001758 <MX_GPIO_Init+0x288>)
 80015c4:	f002 f8f6 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2104      	movs	r1, #4
 80015cc:	4863      	ldr	r0, [pc, #396]	; (800175c <MX_GPIO_Init+0x28c>)
 80015ce:	f002 f8f1 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	485d      	ldr	r0, [pc, #372]	; (8001760 <MX_GPIO_Init+0x290>)
 80015ea:	f001 ff37 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015ee:	2332      	movs	r3, #50	; 0x32
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fe:	230b      	movs	r3, #11
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4855      	ldr	r0, [pc, #340]	; (8001760 <MX_GPIO_Init+0x290>)
 800160a:	f001 ff27 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800160e:	2386      	movs	r3, #134	; 0x86
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161e:	230b      	movs	r3, #11
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	484e      	ldr	r0, [pc, #312]	; (8001764 <MX_GPIO_Init+0x294>)
 800162a:	f001 ff17 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800162e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	4842      	ldr	r0, [pc, #264]	; (8001750 <MX_GPIO_Init+0x280>)
 8001648:	f001 ff08 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_EN_Pin_Pin L_EN_Pin_Pin */
  GPIO_InitStruct.Pin = R_EN_Pin_Pin|L_EN_Pin_Pin;
 800164c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	483b      	ldr	r0, [pc, #236]	; (8001754 <MX_GPIO_Init+0x284>)
 8001666:	f001 fef9 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167c:	230b      	movs	r3, #11
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4832      	ldr	r0, [pc, #200]	; (8001750 <MX_GPIO_Init+0x280>)
 8001688:	f001 fee8 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800168c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001696:	2301      	movs	r3, #1
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800169e:	2307      	movs	r3, #7
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	482c      	ldr	r0, [pc, #176]	; (800175c <MX_GPIO_Init+0x28c>)
 80016aa:	f001 fed7 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4824      	ldr	r0, [pc, #144]	; (8001758 <MX_GPIO_Init+0x288>)
 80016c6:	f001 fec9 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_GPIO_Init+0x288>)
 80016de:	f001 febd 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS3_Pin */
  GPIO_InitStruct.Pin = CS3_Pin;
 80016e2:	2304      	movs	r3, #4
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4818      	ldr	r0, [pc, #96]	; (800175c <MX_GPIO_Init+0x28c>)
 80016fa:	f001 feaf 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001710:	230b      	movs	r3, #11
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	480f      	ldr	r0, [pc, #60]	; (8001758 <MX_GPIO_Init+0x288>)
 800171c:	f001 fe9e 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001732:	2304      	movs	r3, #4
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_GPIO_Init+0x280>)
 800173e:	f001 fe8d 	bl	800345c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001742:	bf00      	nop
 8001744:	3738      	adds	r7, #56	; 0x38
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400
 8001754:	40021400 	.word	0x40021400
 8001758:	40021800 	.word	0x40021800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40020800 	.word	0x40020800
 8001764:	40020000 	.word	0x40020000

08001768 <motor_control>:

/* USER CODE BEGIN 4 */


void motor_control(float voltage)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(voltage>0)
 8001772:	edd7 7a01 	vldr	s15, [r7, #4]
 8001776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dd1e      	ble.n	80017be <motor_control+0x56>
	{
		motor_pwm1 = 0;
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <motor_control+0xe0>)
 8001782:	2200      	movs	r2, #0
 8001784:	801a      	strh	r2, [r3, #0]
		motor_pwm2 = (((double)voltage*8640.0)/Vbus);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe fea2 	bl	80004d0 <__aeabi_f2d>
 800178c:	a32a      	add	r3, pc, #168	; (adr r3, 8001838 <motor_control+0xd0>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe fef5 	bl	8000580 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <motor_control+0xe4>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7ff f816 	bl	80007d4 <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f8f8 	bl	80009a4 <__aeabi_d2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <motor_control+0xe8>)
 80017ba:	801a      	strh	r2, [r3, #0]
 80017bc:	e02b      	b.n	8001816 <motor_control+0xae>
	}
	else if(voltage<0)
 80017be:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d51e      	bpl.n	800180a <motor_control+0xa2>
	{
		motor_pwm2 = 0;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <motor_control+0xe8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
		motor_pwm1 = (((double)voltage*(-8640))/Vbus);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fe7c 	bl	80004d0 <__aeabi_f2d>
 80017d8:	a319      	add	r3, pc, #100	; (adr r3, 8001840 <motor_control+0xd8>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe fecf 	bl	8000580 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <motor_control+0xe4>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe fff0 	bl	80007d4 <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f8d2 	bl	80009a4 <__aeabi_d2uiz>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <motor_control+0xe0>)
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	e005      	b.n	8001816 <motor_control+0xae>
	}
	else
	{
		motor_pwm1 = 0;
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <motor_control+0xe0>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
		motor_pwm2 = 0;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <motor_control+0xe8>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(BTS7960_PWMTIM,TIM_CHANNEL_1,motor_pwm1);
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <motor_control+0xe0>)
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <motor_control+0xec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(BTS7960_PWMTIM,TIM_CHANNEL_2,motor_pwm2);
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <motor_control+0xe8>)
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <motor_control+0xec>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	639a      	str	r2, [r3, #56]	; 0x38
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	00000000 	.word	0x00000000
 800183c:	40c0e000 	.word	0x40c0e000
 8001840:	00000000 	.word	0x00000000
 8001844:	c0c0e000 	.word	0xc0c0e000
 8001848:	200004dc 	.word	0x200004dc
 800184c:	20000008 	.word	0x20000008
 8001850:	200004de 	.word	0x200004de
 8001854:	200003c4 	.word	0x200003c4

08001858 <bit14ToRad>:

float bit14ToRad(uint16_t bit14)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	return (((float)bit14)*2*3.14159)/(16383.0);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001870:	ee17 0a90 	vmov	r0, s15
 8001874:	f7fe fe2c 	bl	80004d0 <__aeabi_f2d>
 8001878:	a30d      	add	r3, pc, #52	; (adr r3, 80018b0 <bit14ToRad+0x58>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fe7f 	bl	8000580 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	a30b      	add	r3, pc, #44	; (adr r3, 80018b8 <bit14ToRad+0x60>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe ffa0 	bl	80007d4 <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f8a2 	bl	80009e4 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	ee07 3a90 	vmov	s15, r3
}
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	f01b866e 	.word	0xf01b866e
 80018b4:	400921f9 	.word	0x400921f9
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40cfff80 	.word	0x40cfff80

080018c0 <HAL_SPI_TxRxCpltCallback>:
float bit14ToDeg(uint16_t bit14)
{
	return (((float)bit14)*360.0)/(16383.0);
}
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2104      	movs	r1, #4
 80018cc:	481e      	ldr	r0, [pc, #120]	; (8001948 <HAL_SPI_TxRxCpltCallback+0x88>)
 80018ce:	f001 ff71 	bl	80037b4 <HAL_GPIO_WritePin>
	rDataFiltered = rDataSpi & 0x3FFF;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_SPI_TxRxCpltCallback+0x8c>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_SPI_TxRxCpltCallback+0x90>)
 80018de:	801a      	strh	r2, [r3, #0]
	tDataSpi = 0xFFFF;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_SPI_TxRxCpltCallback+0x94>)
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	801a      	strh	r2, [r3, #0]
	if(encPosBitPrev - rDataFiltered > 300)
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_SPI_TxRxCpltCallback+0x98>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_SPI_TxRxCpltCallback+0x90>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018f8:	dd05      	ble.n	8001906 <HAL_SPI_TxRxCpltCallback+0x46>
	{
		motorLoopCount++;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_SPI_TxRxCpltCallback+0x9c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <HAL_SPI_TxRxCpltCallback+0x9c>)
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e00d      	b.n	8001922 <HAL_SPI_TxRxCpltCallback+0x62>
	}
	else if(rDataFiltered - encPosBitPrev > 300)
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_SPI_TxRxCpltCallback+0x90>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_SPI_TxRxCpltCallback+0x98>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001916:	dd04      	ble.n	8001922 <HAL_SPI_TxRxCpltCallback+0x62>
	{
		motorLoopCount--;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_SPI_TxRxCpltCallback+0x9c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3b01      	subs	r3, #1
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_SPI_TxRxCpltCallback+0x9c>)
 8001920:	6013      	str	r3, [r2, #0]
	}
	encPosBitPrev = rDataFiltered;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_SPI_TxRxCpltCallback+0x90>)
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_SPI_TxRxCpltCallback+0x98>)
 8001928:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2104      	movs	r1, #4
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <HAL_SPI_TxRxCpltCallback+0x88>)
 8001930:	f001 ff40 	bl	80037b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(AS5047D_SPI, (uint8_t*)&tDataSpi, (uint8_t*)&rDataSpi, 1);
 8001934:	2301      	movs	r3, #1
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_SPI_TxRxCpltCallback+0x8c>)
 8001938:	4906      	ldr	r1, [pc, #24]	; (8001954 <HAL_SPI_TxRxCpltCallback+0x94>)
 800193a:	4809      	ldr	r0, [pc, #36]	; (8001960 <HAL_SPI_TxRxCpltCallback+0xa0>)
 800193c:	f006 fa20 	bl	8007d80 <HAL_SPI_TransmitReceive_DMA>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020c00 	.word	0x40020c00
 800194c:	200004cc 	.word	0x200004cc
 8001950:	200004ce 	.word	0x200004ce
 8001954:	20000000 	.word	0x20000000
 8001958:	200004d0 	.word	0x200004d0
 800195c:	200004d4 	.word	0x200004d4
 8001960:	200002a0 	.word	0x200002a0

08001964 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
	currentValue = (Current[0]<<8)|Current[1];
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_I2C_MemRxCpltCallback+0x54>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b21a      	sxth	r2, r3
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_I2C_MemRxCpltCallback+0x54>)
 8001976:	785b      	ldrb	r3, [r3, #1]
 8001978:	b21b      	sxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_I2C_MemRxCpltCallback+0x58>)
 8001982:	801a      	strh	r2, [r3, #0]
	I.fltnum = (float)currentValue;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_I2C_MemRxCpltCallback+0x58>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_I2C_MemRxCpltCallback+0x5c>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	USER_CURRENTSensI2C_SETUP();
 8001996:	f000 f917 	bl	8001bc8 <USER_CURRENTSensI2C_SETUP>
	HAL_I2C_Mem_Read_IT(INA219_I2C, INA219_ADDRESS << 1, 0x04, 1, Current, 2);
 800199a:	2302      	movs	r3, #2
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_I2C_MemRxCpltCallback+0x54>)
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	2204      	movs	r2, #4
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HAL_I2C_MemRxCpltCallback+0x60>)
 80019aa:	f002 f8c1 	bl	8003b30 <HAL_I2C_Mem_Read_IT>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200004e4 	.word	0x200004e4
 80019bc:	200004e6 	.word	0x200004e6
 80019c0:	200004e0 	.word	0x200004e0
 80019c4:	2000024c 	.word	0x2000024c

080019c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	if(htim == USB_1KHZTIM)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d13c      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x8a>
	{
//		posRad.fltnum = (((float)rDataFiltered)*2*3.14159)/(16383.0);
		posRad.fltnum = 2.0*3.14*((float)motorLoopCount) + bit14ToRad(rDataFiltered);
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	ee17 0a90 	vmov	r0, s15
 80019e8:	f7fe fd72 	bl	80004d0 <__aeabi_f2d>
 80019ec:	a324      	add	r3, pc, #144	; (adr r3, 8001a80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fdc5 	bl	8000580 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff28 	bl	8001858 <bit14ToRad>
 8001a08:	ee10 3a10 	vmov	r3, s0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd5f 	bl	80004d0 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fbfb 	bl	8000214 <__adddf3>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7fe ffdd 	bl	80009e4 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a2e:	6013      	str	r3, [r2, #0]
//		posRad.fltnum = bit14ToDeg(rDataFiltered);
//		USER_USB_TRANSMIT_2ITEM(USB_TX_Buf, posRad.fbyte, I.fbyte);
		USER_USB_TRANSMIT_3ITEM(USB_TX_Buf, posRad.fbyte, I.fbyte, speedViaFilter.fbyte);
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001a34:	4917      	ldr	r1, [pc, #92]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a36:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a38:	f000 f83c 	bl	8001ab4 <USER_USB_TRANSMIT_3ITEM>
//		desiredV.fbyte[0] = USB_RX_Buf[1];
//		desiredV.fbyte[1] = USB_RX_Buf[2];
//		desiredV.fbyte[2] = USB_RX_Buf[3];
//		desiredV.fbyte[3] = USB_RX_Buf[4];

		USER_USB_RECEIVE_1ITEM(USB_RX_Buf, desiredV.fbyte);
 8001a3c:	4919      	ldr	r1, [pc, #100]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a3e:	481a      	ldr	r0, [pc, #104]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a40:	f000 f88a 	bl	8001b58 <USER_USB_RECEIVE_1ITEM>
		motor_control(desiredV.fltnum);
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	f7ff fe8b 	bl	8001768 <motor_control>
	}
	if(htim == filterTimer)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10c      	bne.n	8001a74 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		speedViaFilter.fltnum = FirstOrderIIR_Update(&hpassfilt, posRad.fltnum);
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a66:	f000 f906 	bl	8001c76 <FirstOrderIIR_Update>
 8001a6a:	eef0 7a40 	vmov.f32	s15, s0
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a70:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	f3af 8000 	nop.w
 8001a80:	51eb851f 	.word	0x51eb851f
 8001a84:	40191eb8 	.word	0x40191eb8
 8001a88:	20000410 	.word	0x20000410
 8001a8c:	200004d4 	.word	0x200004d4
 8001a90:	200004ce 	.word	0x200004ce
 8001a94:	200004d8 	.word	0x200004d8
 8001a98:	200004c8 	.word	0x200004c8
 8001a9c:	200004e0 	.word	0x200004e0
 8001aa0:	200004a8 	.word	0x200004a8
 8001aa4:	200004b8 	.word	0x200004b8
 8001aa8:	200007d8 	.word	0x200007d8
 8001aac:	2000045c 	.word	0x2000045c
 8001ab0:	200004bc 	.word	0x200004bc

08001ab4 <USER_USB_TRANSMIT_3ITEM>:

	CDC_Transmit_FS(TX_Buf, USB_TX_DATA_CNT);
}

void USER_USB_TRANSMIT_3ITEM(uint8_t* TX_Buf, uint8_t* ITEM1, uint8_t* ITEM2, uint8_t* ITEM3)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
	TX_Buf[0] = '#';
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2223      	movs	r2, #35	; 0x23
 8001ac6:	701a      	strb	r2, [r3, #0]
	TX_Buf[1] = ITEM1[0];
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	701a      	strb	r2, [r3, #0]
	TX_Buf[2] = ITEM1[1];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	7852      	ldrb	r2, [r2, #1]
 8001ada:	701a      	strb	r2, [r3, #0]
	TX_Buf[3] = ITEM1[2];
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3303      	adds	r3, #3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	7892      	ldrb	r2, [r2, #2]
 8001ae4:	701a      	strb	r2, [r3, #0]
	TX_Buf[4] = ITEM1[3];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	78d2      	ldrb	r2, [r2, #3]
 8001aee:	701a      	strb	r2, [r3, #0]
	TX_Buf[5] = ITEM2[0];
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3305      	adds	r3, #5
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	7812      	ldrb	r2, [r2, #0]
 8001af8:	701a      	strb	r2, [r3, #0]
	TX_Buf[6] = ITEM2[1];
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3306      	adds	r3, #6
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	7852      	ldrb	r2, [r2, #1]
 8001b02:	701a      	strb	r2, [r3, #0]
	TX_Buf[7] = ITEM2[2];
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3307      	adds	r3, #7
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	7892      	ldrb	r2, [r2, #2]
 8001b0c:	701a      	strb	r2, [r3, #0]
	TX_Buf[8] = ITEM2[3];
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3308      	adds	r3, #8
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	78d2      	ldrb	r2, [r2, #3]
 8001b16:	701a      	strb	r2, [r3, #0]
	TX_Buf[9] = ITEM3[0];
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3309      	adds	r3, #9
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	701a      	strb	r2, [r3, #0]
	TX_Buf[10] = ITEM3[1];
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	330a      	adds	r3, #10
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	7852      	ldrb	r2, [r2, #1]
 8001b2a:	701a      	strb	r2, [r3, #0]
	TX_Buf[11] = ITEM3[2];
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	330b      	adds	r3, #11
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	7892      	ldrb	r2, [r2, #2]
 8001b34:	701a      	strb	r2, [r3, #0]
	TX_Buf[12] = ITEM3[3];
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	330c      	adds	r3, #12
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	78d2      	ldrb	r2, [r2, #3]
 8001b3e:	701a      	strb	r2, [r3, #0]
	TX_Buf[USB_TX_DATA_CNT-1] = '\n';
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	330d      	adds	r3, #13
 8001b44:	220a      	movs	r2, #10
 8001b46:	701a      	strb	r2, [r3, #0]

	CDC_Transmit_FS(TX_Buf, USB_TX_DATA_CNT);
 8001b48:	210e      	movs	r1, #14
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f00b fe2c 	bl	800d7a8 <CDC_Transmit_FS>
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <USER_USB_RECEIVE_1ITEM>:

void USER_USB_RECEIVE_1ITEM(uint8_t* RX_Buf, uint8_t* ITEM1)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	if(RX_Buf[0] == '#' && RX_Buf[USB_RX_DATA_CNT-1] == '\n')
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b23      	cmp	r3, #35	; 0x23
 8001b68:	d118      	bne.n	8001b9c <USER_USB_RECEIVE_1ITEM+0x44>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3305      	adds	r3, #5
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b0a      	cmp	r3, #10
 8001b72:	d113      	bne.n	8001b9c <USER_USB_RECEIVE_1ITEM+0x44>
	{
		ITEM1[0] = RX_Buf[1];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	785a      	ldrb	r2, [r3, #1]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	701a      	strb	r2, [r3, #0]
		ITEM1[1] = RX_Buf[2];
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	7892      	ldrb	r2, [r2, #2]
 8001b84:	701a      	strb	r2, [r3, #0]
		ITEM1[2] = RX_Buf[3];
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	78d2      	ldrb	r2, [r2, #3]
 8001b8e:	701a      	strb	r2, [r3, #0]
		ITEM1[3] = RX_Buf[4];
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3303      	adds	r3, #3
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	7912      	ldrb	r2, [r2, #4]
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e00f      	b.n	8001bbc <USER_USB_RECEIVE_1ITEM+0x64>
	}
	else
	{
		ITEM1[0] = '!';
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2221      	movs	r2, #33	; 0x21
 8001ba0:	701a      	strb	r2, [r3, #0]
		ITEM1[1] = '!';
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	2221      	movs	r2, #33	; 0x21
 8001ba8:	701a      	strb	r2, [r3, #0]
		ITEM1[2] = '!';
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3302      	adds	r3, #2
 8001bae:	2221      	movs	r2, #33	; 0x21
 8001bb0:	701a      	strb	r2, [r3, #0]
		ITEM1[3] = '!';
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	2221      	movs	r2, #33	; 0x21
 8001bb8:	701a      	strb	r2, [r3, #0]
	}
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <USER_CURRENTSensI2C_SETUP>:

void USER_CURRENTSensI2C_SETUP(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(INA219_I2C, (INA219_ADDRESS<<1), 0x00, 1, INA219_CONFIG, 2, 1000);
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <USER_CURRENTSensI2C_SETUP+0x40>)
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	2200      	movs	r2, #0
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	480a      	ldr	r0, [pc, #40]	; (8001c0c <USER_CURRENTSensI2C_SETUP+0x44>)
 8001be4:	f001 fe90 	bl	8003908 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(INA219_I2C, (INA219_ADDRESS<<1), 0x05, 1, INA219_CALIB, 2, 1000);
 8001be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <USER_CURRENTSensI2C_SETUP+0x48>)
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <USER_CURRENTSensI2C_SETUP+0x44>)
 8001bfe:	f001 fe83 	bl	8003908 <HAL_I2C_Mem_Write>
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	2000024c 	.word	0x2000024c
 8001c10:	20000014 	.word	0x20000014

08001c14 <FirstOrderIIR_Init>:

void FirstOrderIIR_Init(FirstOrderIIR *filt, float alpha)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	ed87 0a00 	vstr	s0, [r7]
	if(alpha < 0.0f)
 8001c20:	edd7 7a00 	vldr	s15, [r7]
 8001c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d504      	bpl.n	8001c38 <FirstOrderIIR_Init+0x24>
		filt->alpha = 0.0f;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e010      	b.n	8001c5a <FirstOrderIIR_Init+0x46>
	else if(alpha > 1.0f)
 8001c38:	edd7 7a00 	vldr	s15, [r7]
 8001c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dd04      	ble.n	8001c54 <FirstOrderIIR_Init+0x40>
		filt->alpha = 1.0f;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e002      	b.n	8001c5a <FirstOrderIIR_Init+0x46>
	else
		filt->alpha = alpha;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]

	filt->out = 0.0f;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
	filt->in = 0.0f;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <FirstOrderIIR_Update>:

float FirstOrderIIR_Update(FirstOrderIIR *filt, float in)
{
 8001c76:	b5b0      	push	{r4, r5, r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	ed87 0a00 	vstr	s0, [r7]
	filt->out = ((1.0f + filt->alpha)/2.0)*(in - filt->in) + filt->alpha * filt->out;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c90:	ee17 0a90 	vmov	r0, s15
 8001c94:	f7fe fc1c 	bl	80004d0 <__aeabi_f2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca0:	f7fe fd98 	bl	80007d4 <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb2:	ed97 7a00 	vldr	s14, [r7]
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	ee17 0a90 	vmov	r0, s15
 8001cbe:	f7fe fc07 	bl	80004d0 <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fc59 	bl	8000580 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	461d      	mov	r5, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	ee17 0a90 	vmov	r0, s15
 8001cea:	f7fe fbf1 	bl	80004d0 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fa8d 	bl	8000214 <__adddf3>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe fe6f 	bl	80009e4 <__aeabi_d2f>
 8001d06:	4602      	mov	r2, r0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	605a      	str	r2, [r3, #4]
	filt->in = in;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	609a      	str	r2, [r3, #8]
	return filt->out;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	ee07 3a90 	vmov	s15, r3
}
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <Error_Handler+0x8>
	...

08001d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_MspInit+0x44>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_MspInit+0x44>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_MspInit+0x44>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_MspInit+0x44>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_MspInit+0x44>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_MspInit+0x44>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <HAL_ADC_MspInit+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d152      	bne.n	8001e40 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_ADC_MspInit+0xd4>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <HAL_ADC_MspInit+0xd4>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_ADC_MspInit+0xd4>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_ADC_MspInit+0xd4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_ADC_MspInit+0xd4>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_ADC_MspInit+0xd4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dca:	2308      	movs	r3, #8
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <HAL_ADC_MspInit+0xd8>)
 8001dde:	f001 fb3d 	bl	800345c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_ADC_MspInit+0xe0>)
 8001de6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e26:	f000 ff71 	bl	8002d0c <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001e30:	f7ff ff78 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
 8001e3a:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_ADC_MspInit+0xdc>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40012000 	.word	0x40012000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	200001d8 	.word	0x200001d8
 8001e58:	40026410 	.word	0x40026410

08001e5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_DAC_MspInit+0x74>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d123      	bne.n	8001ec6 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_DAC_MspInit+0x78>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_DAC_MspInit+0x78>)
 8001e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_DAC_MspInit+0x78>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_DAC_MspInit+0x78>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <HAL_DAC_MspInit+0x78>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_DAC_MspInit+0x78>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_DAC_MspInit+0x7c>)
 8001ec2:	f001 facb 	bl	800345c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40007400 	.word	0x40007400
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0aa      	sub	sp, #168	; 0xa8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	2284      	movs	r2, #132	; 0x84
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00c f9e7 	bl	800e2d0 <memset>
  if(hi2c->Instance==I2C2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <HAL_I2C_MspInit+0xc0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d143      	bne.n	8001f94 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 fa94 	bl	8007448 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f26:	f7ff fefd 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_I2C_MspInit+0xc4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_I2C_MspInit+0xc4>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_I2C_MspInit+0xc4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f42:	2303      	movs	r3, #3
 8001f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f48:	2312      	movs	r3, #18
 8001f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f64:	4619      	mov	r1, r3
 8001f66:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <HAL_I2C_MspInit+0xc8>)
 8001f68:	f001 fa78 	bl	800345c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_I2C_MspInit+0xc4>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_I2C_MspInit+0xc4>)
 8001f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f76:	6413      	str	r3, [r2, #64]	; 0x40
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_I2C_MspInit+0xc4>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 15, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	210f      	movs	r1, #15
 8001f88:	2021      	movs	r0, #33	; 0x21
 8001f8a:	f000 fe18 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f8e:	2021      	movs	r0, #33	; 0x21
 8001f90:	f000 fe31 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	37a8      	adds	r7, #168	; 0xa8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40005800 	.word	0x40005800
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021400 	.word	0x40021400

08001fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <HAL_SPI_MspInit+0x13c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	f040 8087 	bne.w	80020da <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_SPI_MspInit+0x140>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_SPI_MspInit+0x140>)
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_SPI_MspInit+0x140>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe4:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_SPI_MspInit+0x140>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a3f      	ldr	r2, [pc, #252]	; (80020e8 <HAL_SPI_MspInit+0x140>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_SPI_MspInit+0x140>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ffc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800200e:	2306      	movs	r3, #6
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4834      	ldr	r0, [pc, #208]	; (80020ec <HAL_SPI_MspInit+0x144>)
 800201a:	f001 fa1f 	bl	800345c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002020:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <HAL_SPI_MspInit+0x14c>)
 8002022:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002024:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002026:	2200      	movs	r2, #0
 8002028:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002036:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002044:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002060:	4823      	ldr	r0, [pc, #140]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002062:	f000 fe53 	bl	8002d0c <HAL_DMA_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 800206c:	f7ff fe5a 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002074:	659a      	str	r2, [r3, #88]	; 0x58
 8002076:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <HAL_SPI_MspInit+0x148>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_SPI_MspInit+0x154>)
 8002080:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 800208a:	2240      	movs	r2, #64	; 0x40
 800208c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 8002090:	2200      	movs	r2, #0
 8002092:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 8002096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 800209e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80020be:	480e      	ldr	r0, [pc, #56]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020c0:	f000 fe24 	bl	8002d0c <HAL_DMA_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80020ca:	f7ff fe2b 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_SPI_MspInit+0x150>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40003c00 	.word	0x40003c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020800 	.word	0x40020800
 80020f0:	20000304 	.word	0x20000304
 80020f4:	40026010 	.word	0x40026010
 80020f8:	20000364 	.word	0x20000364
 80020fc:	40026088 	.word	0x40026088

08002100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_TIM_Base_MspInit+0x9c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10c      	bne.n	800212c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800212a:	e032      	b.n	8002192 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_TIM_Base_MspInit+0xa4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d114      	bne.n	8002160 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2103      	movs	r1, #3
 8002152:	201d      	movs	r0, #29
 8002154:	f000 fd33 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002158:	201d      	movs	r0, #29
 800215a:	f000 fd4c 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
}
 800215e:	e018      	b.n	8002192 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201e      	movs	r0, #30
 8002188:	f000 fd19 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800218c:	201e      	movs	r0, #30
 800218e:	f000 fd32 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800

080021ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_TIM_MspPostInit+0x64>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d11c      	bne.n	8002208 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_TIM_MspPostInit+0x68>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_TIM_MspPostInit+0x68>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_TIM_MspPostInit+0x68>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80021e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	4619      	mov	r1, r3
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_TIM_MspPostInit+0x6c>)
 8002204:	f001 f92a 	bl	800345c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40010000 	.word	0x40010000
 8002214:	40023800 	.word	0x40023800
 8002218:	40021000 	.word	0x40021000

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 f8f6 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA1_Stream0_IRQHandler+0x10>)
 8002276:	f000 fe79 	bl	8002f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000304 	.word	0x20000304

08002284 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Stream5_IRQHandler+0x10>)
 800228a:	f000 fe6f 	bl	8002f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000364 	.word	0x20000364

08002298 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM3_IRQHandler+0x10>)
 800229e:	f006 fc8d 	bl	8008bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000410 	.word	0x20000410

080022ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM4_IRQHandler+0x10>)
 80022b2:	f006 fc83 	bl	8008bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000045c 	.word	0x2000045c

080022c0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <I2C2_EV_IRQHandler+0x10>)
 80022c6:	f001 fcb9 	bl	8003c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000024c 	.word	0x2000024c

080022d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA2_Stream0_IRQHandler+0x10>)
 80022da:	f000 fe47 	bl	8002f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200001d8 	.word	0x200001d8

080022e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <OTG_FS_IRQHandler+0x10>)
 80022ee:	f003 fa36 	bl	800575e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200019e8 	.word	0x200019e8

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f00b ffe8 	bl	800e300 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20050000 	.word	0x20050000
 800235c:	00000400 	.word	0x00000400
 8002360:	200004e8 	.word	0x200004e8
 8002364:	20002038 	.word	0x20002038

08002368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002392:	490e      	ldr	r1, [pc, #56]	; (80023cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023a8:	4c0b      	ldr	r4, [pc, #44]	; (80023d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023b6:	f7ff ffd7 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ba:	f00b ffa7 	bl	800e30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7fe fcdf 	bl	8000d80 <main>
  bx  lr    
 80023c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80023d0:	0800e478 	.word	0x0800e478
  ldr r2, =_sbss
 80023d4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80023d8:	20002038 	.word	0x20002038

080023dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC_IRQHandler>

080023de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e2:	2003      	movs	r0, #3
 80023e4:	f000 fbe0 	bl	8002ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 f805 	bl	80023f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ee:	f7ff fc9f 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x54>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x58>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fbfb 	bl	8002c12 <HAL_SYSTICK_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00e      	b.n	8002444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d80a      	bhi.n	8002442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f000 fbc3 	bl	8002bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_InitTick+0x5c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000018 	.word	0x20000018
 8002450:	20000020 	.word	0x20000020
 8002454:	2000001c 	.word	0x2000001c

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000020 	.word	0x20000020
 800247c:	200004ec 	.word	0x200004ec

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200004ec 	.word	0x200004ec

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000020 	.word	0x20000020

080024e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e031      	b.n	800255a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fc3a 	bl	8001d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_ADC_Init+0x84>)
 8002524:	4013      	ands	r3, r2
 8002526:	f043 0202 	orr.w	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f970 	bl	8002814 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	f043 0201 	orr.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
 800254a:	e001      	b.n	8002550 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	ffffeefd 	.word	0xffffeefd

08002568 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1c>
 8002580:	2302      	movs	r3, #2
 8002582:	e136      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x28a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b09      	cmp	r3, #9
 8002592:	d93a      	bls.n	800260a <HAL_ADC_ConfigChannel+0xa2>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800259c:	d035      	beq.n	800260a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	3b1e      	subs	r3, #30
 80025b4:	2207      	movs	r2, #7
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	400a      	ands	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a8d      	ldr	r2, [pc, #564]	; (8002800 <HAL_ADC_ConfigChannel+0x298>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10a      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68d9      	ldr	r1, [r3, #12]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	061a      	lsls	r2, r3, #24
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e2:	e035      	b.n	8002650 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4403      	add	r3, r0
 80025fc:	3b1e      	subs	r3, #30
 80025fe:	409a      	lsls	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002608:	e022      	b.n	8002650 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6919      	ldr	r1, [r3, #16]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	2207      	movs	r2, #7
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6919      	ldr	r1, [r3, #16]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	4603      	mov	r3, r0
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4403      	add	r3, r0
 8002646:	409a      	lsls	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d824      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b05      	subs	r3, #5
 800266a:	221f      	movs	r2, #31
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43da      	mvns	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	400a      	ands	r2, r1
 8002678:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b05      	subs	r3, #5
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	635a      	str	r2, [r3, #52]	; 0x34
 80026a0:	e04c      	b.n	800273c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d824      	bhi.n	80026f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3b23      	subs	r3, #35	; 0x23
 80026bc:	221f      	movs	r2, #31
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b23      	subs	r3, #35	; 0x23
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
 80026f2:	e023      	b.n	800273c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b41      	subs	r3, #65	; 0x41
 8002706:	221f      	movs	r2, #31
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b41      	subs	r3, #65	; 0x41
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a30      	ldr	r2, [pc, #192]	; (8002804 <HAL_ADC_ConfigChannel+0x29c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10a      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1f4>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 8002756:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800275a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a28      	ldr	r2, [pc, #160]	; (8002804 <HAL_ADC_ConfigChannel+0x29c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10f      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x21e>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b12      	cmp	r3, #18
 800276c:	d10b      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 8002774:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002778:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 8002780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002784:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_ADC_ConfigChannel+0x29c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d12b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x280>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <HAL_ADC_ConfigChannel+0x298>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <HAL_ADC_ConfigChannel+0x23a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b11      	cmp	r3, #17
 80027a0:	d122      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027ac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_ADC_ConfigChannel+0x298>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d111      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_ADC_ConfigChannel+0x2a4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_ADC_ConfigChannel+0x2a8>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0c9a      	lsrs	r2, r3, #18
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027da:	e002      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	10000012 	.word	0x10000012
 8002804:	40012000 	.word	0x40012000
 8002808:	40012300 	.word	0x40012300
 800280c:	20000018 	.word	0x20000018
 8002810:	431bde83 	.word	0x431bde83

08002814 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800281c:	4b78      	ldr	r3, [pc, #480]	; (8002a00 <ADC_Init+0x1ec>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a77      	ldr	r2, [pc, #476]	; (8002a00 <ADC_Init+0x1ec>)
 8002822:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002826:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002828:	4b75      	ldr	r3, [pc, #468]	; (8002a00 <ADC_Init+0x1ec>)
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4973      	ldr	r1, [pc, #460]	; (8002a00 <ADC_Init+0x1ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <ADC_Init+0x1f0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	e00f      	b.n	800290e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800290c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0202 	bic.w	r2, r2, #2
 800291c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	005a      	lsls	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800295a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	3b01      	subs	r3, #1
 8002968:	035a      	lsls	r2, r3, #13
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e007      	b.n	8002984 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	3b01      	subs	r3, #1
 80029a0:	051a      	lsls	r2, r3, #20
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c6:	025a      	lsls	r2, r3, #9
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	029a      	lsls	r2, r3, #10
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40012300 	.word	0x40012300
 8002a04:	0f000001 	.word	0x0f000001

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <__NVIC_SetPriorityGrouping+0x40>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__NVIC_SetPriorityGrouping+0x40>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00
 8002a4c:	05fa0000 	.word	0x05fa0000

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b74:	d301      	bcc.n	8002b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00f      	b.n	8002b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <SysTick_Config+0x40>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b82:	210f      	movs	r1, #15
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f7ff ff8e 	bl	8002aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SysTick_Config+0x40>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <SysTick_Config+0x40>)
 8002b94:	2207      	movs	r2, #7
 8002b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010

08002ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff29 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd0:	f7ff ff3e 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f7ff ff8e 	bl	8002afc <NVIC_EncodePriority>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff5d 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff31 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ffa2 	bl	8002b64 <SysTick_Config>
 8002c20:	4603      	mov	r3, r0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e014      	b.n	8002c66 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	791b      	ldrb	r3, [r3, #4]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff f905 	bl	8001e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	795b      	ldrb	r3, [r3, #5]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_DAC_ConfigChannel+0x18>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e03c      	b.n	8002d00 <HAL_DAC_ConfigChannel+0x92>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	22c0      	movs	r2, #192	; 0xc0
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	400a      	ands	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff fbb2 	bl	8002480 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e099      	b.n	8002e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d48:	e00f      	b.n	8002d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4a:	f7ff fb99 	bl	8002480 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d908      	bls.n	8002d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e078      	b.n	8002e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e8      	bne.n	8002d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <HAL_DMA_Init+0x158>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d117      	bne.n	8002e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 faa7 	bl	8003364 <DMA_CheckFifoParam>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa5e 	bl	80032f8 <DMA_CalcBaseAndBitshift>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f010803f 	.word	0xf010803f

08002e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Start_IT+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e048      	b.n	8002f20 <HAL_DMA_Start_IT+0xb8>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d137      	bne.n	8002f12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9f0 	bl	800329c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0216 	orr.w	r2, r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ee6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0208 	orr.w	r2, r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e005      	b.n	8002f1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d004      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00c      	b.n	8002f60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2205      	movs	r2, #5
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f78:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <HAL_DMA_IRQHandler+0x248>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a8e      	ldr	r2, [pc, #568]	; (80031b8 <HAL_DMA_IRQHandler+0x24c>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0a9b      	lsrs	r3, r3, #10
 8002f84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2208      	movs	r2, #8
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01a      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d012      	beq.n	800300e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0202 	orr.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2204      	movs	r2, #4
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2204      	movs	r2, #4
 8003032:	409a      	lsls	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	2210      	movs	r2, #16
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d043      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d03c      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2210      	movs	r2, #16
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d018      	beq.n	80030ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d024      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
 800309a:	e01f      	b.n	80030dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
 80030ac:	e016      	b.n	80030dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0208 	bic.w	r2, r2, #8
 80030ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	2220      	movs	r2, #32
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 808f 	beq.w	800320c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8087 	beq.w	800320c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2220      	movs	r2, #32
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b05      	cmp	r3, #5
 8003114:	d136      	bne.n	8003184 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0216 	bic.w	r2, r2, #22
 8003124:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003134:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <HAL_DMA_IRQHandler+0x1da>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0208 	bic.w	r2, r2, #8
 8003154:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	223f      	movs	r2, #63	; 0x3f
 800315c:	409a      	lsls	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003176:	2b00      	cmp	r3, #0
 8003178:	d07e      	beq.n	8003278 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
        }
        return;
 8003182:	e079      	b.n	8003278 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01d      	beq.n	80031ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d031      	beq.n	800320c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e02c      	b.n	800320c <HAL_DMA_IRQHandler+0x2a0>
 80031b2:	bf00      	nop
 80031b4:	20000018 	.word	0x20000018
 80031b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d023      	beq.n	800320c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e01e      	b.n	800320c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0210 	bic.w	r2, r2, #16
 80031ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	2b00      	cmp	r3, #0
 8003212:	d032      	beq.n	800327a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d022      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2205      	movs	r2, #5
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	3301      	adds	r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	d307      	bcc.n	8003254 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f2      	bne.n	8003238 <HAL_DMA_IRQHandler+0x2cc>
 8003252:	e000      	b.n	8003256 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003254:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
 8003276:	e000      	b.n	800327a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003278:	bf00      	nop
    }
  }
}
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328e:	b2db      	uxtb	r3, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b10      	subs	r3, #16
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <DMA_CalcBaseAndBitshift+0x60>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <DMA_CalcBaseAndBitshift+0x64>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d908      	bls.n	8003338 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <DMA_CalcBaseAndBitshift+0x68>)
 800332e:	4013      	ands	r3, r2
 8003330:	1d1a      	adds	r2, r3, #4
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58
 8003336:	e006      	b.n	8003346 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <DMA_CalcBaseAndBitshift+0x68>)
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	aaaaaaab 	.word	0xaaaaaaab
 800335c:	0800e460 	.word	0x0800e460
 8003360:	fffffc00 	.word	0xfffffc00

08003364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d856      	bhi.n	8003432 <DMA_CheckFifoParam+0xce>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <DMA_CheckFifoParam+0x28>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033af 	.word	0x080033af
 8003394:	0800339d 	.word	0x0800339d
 8003398:	08003433 	.word	0x08003433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d046      	beq.n	8003436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e043      	b.n	8003436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b6:	d140      	bne.n	800343a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e03d      	b.n	800343a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	d121      	bne.n	800340c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d837      	bhi.n	800343e <DMA_CheckFifoParam+0xda>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <DMA_CheckFifoParam+0x70>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033eb 	.word	0x080033eb
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	080033fd 	.word	0x080033fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e030      	b.n	800344c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d025      	beq.n	8003442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fa:	e022      	b.n	8003442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003404:	d11f      	bne.n	8003446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340a:	e01c      	b.n	8003446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d903      	bls.n	800341a <DMA_CheckFifoParam+0xb6>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d003      	beq.n	8003420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003418:	e018      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      break;
 800341e:	e015      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e00b      	b.n	800344a <DMA_CheckFifoParam+0xe6>
      break;
 8003432:	bf00      	nop
 8003434:	e00a      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e008      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e006      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e004      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;   
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
    }
  } 
  
  return status; 
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e175      	b.n	8003768 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 8164 	bne.w	8003762 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d005      	beq.n	80034b2 <HAL_GPIO_Init+0x56>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d130      	bne.n	8003514 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d017      	beq.n	8003550 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d123      	bne.n	80035a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3208      	adds	r2, #8
 8003564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80be 	beq.w	8003762 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_GPIO_Init+0x324>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_GPIO_Init+0x324>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_GPIO_Init+0x324>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035fe:	4a61      	ldr	r2, [pc, #388]	; (8003784 <HAL_GPIO_Init+0x328>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_GPIO_Init+0x32c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d037      	beq.n	800369a <HAL_GPIO_Init+0x23e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_GPIO_Init+0x330>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d031      	beq.n	8003696 <HAL_GPIO_Init+0x23a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_GPIO_Init+0x334>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02b      	beq.n	8003692 <HAL_GPIO_Init+0x236>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_GPIO_Init+0x338>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d025      	beq.n	800368e <HAL_GPIO_Init+0x232>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a54      	ldr	r2, [pc, #336]	; (8003798 <HAL_GPIO_Init+0x33c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <HAL_GPIO_Init+0x22e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a53      	ldr	r2, [pc, #332]	; (800379c <HAL_GPIO_Init+0x340>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x22a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_GPIO_Init+0x344>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x226>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a51      	ldr	r2, [pc, #324]	; (80037a4 <HAL_GPIO_Init+0x348>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x222>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a50      	ldr	r2, [pc, #320]	; (80037a8 <HAL_GPIO_Init+0x34c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x21e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4f      	ldr	r2, [pc, #316]	; (80037ac <HAL_GPIO_Init+0x350>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x21a>
 8003672:	2309      	movs	r3, #9
 8003674:	e012      	b.n	800369c <HAL_GPIO_Init+0x240>
 8003676:	230a      	movs	r3, #10
 8003678:	e010      	b.n	800369c <HAL_GPIO_Init+0x240>
 800367a:	2308      	movs	r3, #8
 800367c:	e00e      	b.n	800369c <HAL_GPIO_Init+0x240>
 800367e:	2307      	movs	r3, #7
 8003680:	e00c      	b.n	800369c <HAL_GPIO_Init+0x240>
 8003682:	2306      	movs	r3, #6
 8003684:	e00a      	b.n	800369c <HAL_GPIO_Init+0x240>
 8003686:	2305      	movs	r3, #5
 8003688:	e008      	b.n	800369c <HAL_GPIO_Init+0x240>
 800368a:	2304      	movs	r3, #4
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x240>
 800368e:	2303      	movs	r3, #3
 8003690:	e004      	b.n	800369c <HAL_GPIO_Init+0x240>
 8003692:	2302      	movs	r3, #2
 8003694:	e002      	b.n	800369c <HAL_GPIO_Init+0x240>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_GPIO_Init+0x240>
 800369a:	2300      	movs	r3, #0
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f002 0203 	and.w	r2, r2, #3
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	4093      	lsls	r3, r2
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036ac:	4935      	ldr	r1, [pc, #212]	; (8003784 <HAL_GPIO_Init+0x328>)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	3302      	adds	r3, #2
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <HAL_GPIO_Init+0x354>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036de:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <HAL_GPIO_Init+0x354>)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_GPIO_Init+0x354>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <HAL_GPIO_Init+0x354>)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800370e:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <HAL_GPIO_Init+0x354>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003732:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <HAL_GPIO_Init+0x354>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_GPIO_Init+0x354>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800375c:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <HAL_GPIO_Init+0x354>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3301      	adds	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	f67f ae86 	bls.w	800347c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3724      	adds	r7, #36	; 0x24
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	40013800 	.word	0x40013800
 8003788:	40020000 	.word	0x40020000
 800378c:	40020400 	.word	0x40020400
 8003790:	40020800 	.word	0x40020800
 8003794:	40020c00 	.word	0x40020c00
 8003798:	40021000 	.word	0x40021000
 800379c:	40021400 	.word	0x40021400
 80037a0:	40021800 	.word	0x40021800
 80037a4:	40021c00 	.word	0x40021c00
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40022400 	.word	0x40022400
 80037b0:	40013c00 	.word	0x40013c00

080037b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c4:	787b      	ldrb	r3, [r7, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037d0:	e003      	b.n	80037da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe fb64 	bl	8001edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003838:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003848:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	e006      	b.n	8003870 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800386e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d104      	bne.n	8003882 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_I2C_Init+0x11c>)
 800388e:	430b      	orrs	r3, r1
 8003890:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69d9      	ldr	r1, [r3, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	02008000 	.word	0x02008000

08003908 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	4608      	mov	r0, r1
 8003912:	4611      	mov	r1, r2
 8003914:	461a      	mov	r2, r3
 8003916:	4603      	mov	r3, r0
 8003918:	817b      	strh	r3, [r7, #10]
 800391a:	460b      	mov	r3, r1
 800391c:	813b      	strh	r3, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	f040 80f9 	bne.w	8003b22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_I2C_Mem_Write+0x34>
 8003936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ed      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_I2C_Mem_Write+0x4e>
 8003952:	2302      	movs	r3, #2
 8003954:	e0e6      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800395e:	f7fe fd8f 	bl	8002480 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2319      	movs	r3, #25
 800396a:	2201      	movs	r2, #1
 800396c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f001 fa80 	bl	8004e76 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0d1      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2221      	movs	r2, #33	; 0x21
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a8:	88f8      	ldrh	r0, [r7, #6]
 80039aa:	893a      	ldrh	r2, [r7, #8]
 80039ac:	8979      	ldrh	r1, [r7, #10]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4603      	mov	r3, r0
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fd8f 	bl	80044dc <I2C_RequestMemoryWrite>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0a9      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2bff      	cmp	r3, #255	; 0xff
 80039d8:	d90e      	bls.n	80039f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	22ff      	movs	r2, #255	; 0xff
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	8979      	ldrh	r1, [r7, #10]
 80039e8:	2300      	movs	r3, #0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f001 fbdd 	bl	80051b0 <I2C_TransferConfig>
 80039f6:	e00f      	b.n	8003a18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	8979      	ldrh	r1, [r7, #10]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f001 fbcc 	bl	80051b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f001 fa6a 	bl	8004ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e07b      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d034      	beq.n	8003ad0 <HAL_I2C_Mem_Write+0x1c8>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d130      	bne.n	8003ad0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	2200      	movs	r2, #0
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f001 f9fc 	bl	8004e76 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e04d      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2bff      	cmp	r3, #255	; 0xff
 8003a90:	d90e      	bls.n	8003ab0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	22ff      	movs	r2, #255	; 0xff
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f001 fb81 	bl	80051b0 <I2C_TransferConfig>
 8003aae:	e00f      	b.n	8003ad0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	8979      	ldrh	r1, [r7, #10]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 fb70 	bl	80051b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d19e      	bne.n	8003a18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f001 fa49 	bl	8004f76 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e01a      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2220      	movs	r2, #32
 8003af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_I2C_Mem_Write+0x224>)
 8003b02:	400b      	ands	r3, r1
 8003b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	fe00e800 	.word	0xfe00e800

08003b30 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d166      	bne.n	8003c24 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_I2C_Mem_Read_IT+0x32>
 8003b5c:	8bbb      	ldrh	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e05b      	b.n	8003c26 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e051      	b.n	8003c26 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2C_Mem_Read_IT+0x60>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e04a      	b.n	8003c26 <HAL_I2C_Mem_Read_IT+0xf6>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2240      	movs	r2, #64	; 0x40
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8bba      	ldrh	r2, [r7, #28]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_I2C_Mem_Read_IT+0x100>)
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_I2C_Mem_Read_IT+0x104>)
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003bc6:	897a      	ldrh	r2, [r7, #10]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d109      	bne.n	8003be6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd2:	893b      	ldrh	r3, [r7, #8]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295
 8003be2:	651a      	str	r2, [r3, #80]	; 0x50
 8003be4:	e00b      	b.n	8003bfe <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003be6:	893b      	ldrh	r3, [r7, #8]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003bf4:	893b      	ldrh	r3, [r7, #8]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_I2C_Mem_Read_IT+0x108>)
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f001 fad0 	bl	80051b0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 8003c18:	2103      	movs	r1, #3
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f001 fafa 	bl	8005214 <I2C_Enable_IRQ>

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	ffff0000 	.word	0xffff0000
 8003c34:	08003d2d 	.word	0x08003d2d
 8003c38:	80002000 	.word	0x80002000

08003c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003d38:	4b89      	ldr	r3, [pc, #548]	; (8003f60 <I2C_Mem_ISR_IT+0x234>)
 8003d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <I2C_Mem_ISR_IT+0x22>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e104      	b.n	8003f58 <I2C_Mem_ISR_IT+0x22c>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2210      	movs	r2, #16
 8003d70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f001 f837 	bl	8004df2 <I2C_Flush_TXDR>
 8003d84:	e0d5      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d022      	beq.n	8003dd6 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01d      	beq.n	8003dd6 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd4:	e0ad      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02c      	beq.n	8003e3a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d027      	beq.n	8003e3a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d118      	bne.n	8003e26 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003e24:	e085      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003e38:	e07b      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d03c      	beq.n	8003ebe <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d037      	beq.n	8003ebe <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02c      	beq.n	8003eb2 <I2C_Mem_ISR_IT+0x186>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d128      	bne.n	8003eb2 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2bff      	cmp	r3, #255	; 0xff
 8003e68:	d910      	bls.n	8003e8c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	b299      	uxth	r1, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f001 f993 	bl	80051b0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8a:	e017      	b.n	8003ebc <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	b299      	uxth	r1, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f001 f980 	bl	80051b0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb0:	e004      	b.n	8003ebc <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fea5 	bl	8004c04 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eba:	e03a      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
 8003ebc:	e039      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d034      	beq.n	8003f32 <I2C_Mem_ISR_IT+0x206>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02f      	beq.n	8003f32 <I2C_Mem_ISR_IT+0x206>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b22      	cmp	r3, #34	; 0x22
 8003edc:	d101      	bne.n	8003ee2 <I2C_Mem_ISR_IT+0x1b6>
    {
      direction = I2C_GENERATE_START_READ;
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <I2C_Mem_ISR_IT+0x238>)
 8003ee0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2bff      	cmp	r3, #255	; 0xff
 8003eea:	d910      	bls.n	8003f0e <I2C_Mem_ISR_IT+0x1e2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	22ff      	movs	r2, #255	; 0xff
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f001 f952 	bl	80051b0 <I2C_TransferConfig>
 8003f0c:	e011      	b.n	8003f32 <I2C_Mem_ISR_IT+0x206>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	b299      	uxth	r1, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f001 f93f 	bl	80051b0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <I2C_Mem_ISR_IT+0x222>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <I2C_Mem_ISR_IT+0x222>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003f46:	6939      	ldr	r1, [r7, #16]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fc39 	bl	80047c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	80002000 	.word	0x80002000
 8003f64:	80002400 	.word	0x80002400

08003f68 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <I2C_Slave_ISR_IT+0x24>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e0e1      	b.n	8004150 <I2C_Slave_ISR_IT+0x1e8>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003fa8:	6939      	ldr	r1, [r7, #16]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fcd0 	bl	8004950 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04b      	beq.n	8004052 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d046      	beq.n	8004052 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d128      	bne.n	8004020 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b28      	cmp	r3, #40	; 0x28
 8003fd8:	d108      	bne.n	8003fec <I2C_Slave_ISR_IT+0x84>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe0:	d104      	bne.n	8003fec <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003fe2:	6939      	ldr	r1, [r7, #16]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fdb9 	bl	8004b5c <I2C_ITListenCplt>
 8003fea:	e031      	b.n	8004050 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b29      	cmp	r3, #41	; 0x29
 8003ff6:	d10e      	bne.n	8004016 <I2C_Slave_ISR_IT+0xae>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ffe:	d00a      	beq.n	8004016 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2210      	movs	r2, #16
 8004006:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fef2 	bl	8004df2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fb79 	bl	8004706 <I2C_ITSlaveSeqCplt>
 8004014:	e01c      	b.n	8004050 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800401e:	e08f      	b.n	8004140 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2210      	movs	r2, #16
 8004026:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <I2C_Slave_ISR_IT+0xda>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004040:	d17e      	bne.n	8004140 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	4619      	mov	r1, r3
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fddb 	bl	8004c04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800404e:	e077      	b.n	8004140 <I2C_Slave_ISR_IT+0x1d8>
 8004050:	e076      	b.n	8004140 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02f      	beq.n	80040bc <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02a      	beq.n	80040bc <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d018      	beq.n	80040a2 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d14b      	bne.n	8004144 <I2C_Slave_ISR_IT+0x1dc>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040b2:	d047      	beq.n	8004144 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fb26 	bl	8004706 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80040ba:	e043      	b.n	8004144 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80040d0:	6939      	ldr	r1, [r7, #16]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa56 	bl	8004584 <I2C_ITAddrCplt>
 80040d8:	e035      	b.n	8004146 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d030      	beq.n	8004146 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02b      	beq.n	8004146 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d018      	beq.n	800412a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
 8004128:	e00d      	b.n	8004146 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004130:	d002      	beq.n	8004138 <I2C_Slave_ISR_IT+0x1d0>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fae4 	bl	8004706 <I2C_ITSlaveSeqCplt>
 800413e:	e002      	b.n	8004146 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004140:	bf00      	nop
 8004142:	e000      	b.n	8004146 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004144:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <I2C_Master_ISR_DMA+0x1a>
 800416e:	2302      	movs	r3, #2
 8004170:	e0d9      	b.n	8004326 <I2C_Master_ISR_DMA+0x1ce>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d016      	beq.n	80041b2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800418a:	2b00      	cmp	r3, #0
 800418c:	d011      	beq.n	80041b2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2210      	movs	r2, #16
 8004194:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80041a2:	2120      	movs	r1, #32
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f001 f835 	bl	8005214 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fe21 	bl	8004df2 <I2C_Flush_TXDR>
 80041b0:	e0b4      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d071      	beq.n	80042a0 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d06c      	beq.n	80042a0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d04e      	beq.n	800427e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2bff      	cmp	r3, #255	; 0xff
 80041f6:	d906      	bls.n	8004206 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80041fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e010      	b.n	8004228 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004218:	d003      	beq.n	8004222 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e002      	b.n	8004228 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004226:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	b2da      	uxtb	r2, r3
 800422e:	8a79      	ldrh	r1, [r7, #18]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 ffba 	bl	80051b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	d108      	bne.n	800426c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004268:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800426a:	e057      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800427c:	e04e      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428c:	d003      	beq.n	8004296 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f9fc 	bl	800468c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004294:	e042      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004296:	2140      	movs	r1, #64	; 0x40
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fcb3 	bl	8004c04 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800429e:	e03d      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d028      	beq.n	80042fc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042cc:	d025      	beq.n	800431a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d6:	d108      	bne.n	80042ea <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80042e8:	e017      	b.n	800431a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f9ce 	bl	800468c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80042f0:	e013      	b.n	800431a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042f2:	2140      	movs	r1, #64	; 0x40
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fc85 	bl	8004c04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042fa:	e00e      	b.n	800431a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa54 	bl	80047c0 <I2C_ITMasterCplt>
 8004318:	e000      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800431a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b088      	sub	sp, #32
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <I2C_Slave_ISR_DMA+0x24>
 800434e:	2302      	movs	r3, #2
 8004350:	e0bf      	b.n	80044d2 <I2C_Slave_ISR_DMA+0x1a4>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 faed 	bl	8004950 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8095 	beq.w	80044ac <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 808f 	beq.w	80044ac <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07d      	beq.n	800449e <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d128      	bne.n	800443e <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b28      	cmp	r3, #40	; 0x28
 80043f6:	d108      	bne.n	800440a <I2C_Slave_ISR_DMA+0xdc>
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043fe:	d104      	bne.n	800440a <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fbaa 	bl	8004b5c <I2C_ITListenCplt>
 8004408:	e048      	b.n	800449c <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b29      	cmp	r3, #41	; 0x29
 8004414:	d10e      	bne.n	8004434 <I2C_Slave_ISR_DMA+0x106>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800441c:	d00a      	beq.n	8004434 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2210      	movs	r2, #16
 8004424:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fce3 	bl	8004df2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f96a 	bl	8004706 <I2C_ITSlaveSeqCplt>
 8004432:	e033      	b.n	800449c <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800443c:	e034      	b.n	80044a8 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2210      	movs	r2, #16
 8004444:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f043 0204 	orr.w	r2, r3, #4
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004458:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <I2C_Slave_ISR_DMA+0x13a>
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004466:	d11f      	bne.n	80044a8 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b21      	cmp	r3, #33	; 0x21
 800446c:	d002      	beq.n	8004474 <I2C_Slave_ISR_DMA+0x146>
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b29      	cmp	r3, #41	; 0x29
 8004472:	d103      	bne.n	800447c <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2221      	movs	r2, #33	; 0x21
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
 800447a:	e008      	b.n	800448e <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b22      	cmp	r3, #34	; 0x22
 8004480:	d002      	beq.n	8004488 <I2C_Slave_ISR_DMA+0x15a>
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b2a      	cmp	r3, #42	; 0x2a
 8004486:	d102      	bne.n	800448e <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2222      	movs	r2, #34	; 0x22
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4619      	mov	r1, r3
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fbb5 	bl	8004c04 <I2C_ITError>
      if (treatdmanack == 1U)
 800449a:	e005      	b.n	80044a8 <I2C_Slave_ISR_DMA+0x17a>
 800449c:	e004      	b.n	80044a8 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2210      	movs	r2, #16
 80044a4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044a6:	e00f      	b.n	80044c8 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80044a8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044aa:	e00d      	b.n	80044c8 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f85e 	bl	8004584 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	8979      	ldrh	r1, [r7, #10]
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <I2C_RequestMemoryWrite+0xa4>)
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fe53 	bl	80051b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	69b9      	ldr	r1, [r7, #24]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fcf1 	bl	8004ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e02c      	b.n	8004578 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004524:	893b      	ldrh	r3, [r7, #8]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
 800452e:	e015      	b.n	800455c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	b29b      	uxth	r3, r3
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fcd7 	bl	8004ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e012      	b.n	8004578 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004552:	893b      	ldrh	r3, [r7, #8]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2200      	movs	r2, #0
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fc85 	bl	8004e76 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	80002000 	.word	0x80002000

08004584 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800459a:	2b28      	cmp	r3, #40	; 0x28
 800459c:	d16a      	bne.n	8004674 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045bc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045d8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d138      	bne.n	8004654 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	09db      	lsrs	r3, r3, #7
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	89bb      	ldrh	r3, [r7, #12]
 80045ea:	4053      	eors	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f003 0306 	and.w	r3, r3, #6
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d11c      	bne.n	8004630 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	2b02      	cmp	r3, #2
 800460a:	d13b      	bne.n	8004684 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2208      	movs	r2, #8
 8004618:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004622:	89ba      	ldrh	r2, [r7, #12]
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fb49 	bl	8003cc0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800462e:	e029      	b.n	8004684 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fe55 	bl	80052e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004646:	89ba      	ldrh	r2, [r7, #12]
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fb37 	bl	8003cc0 <HAL_I2C_AddrCallback>
}
 8004652:	e017      	b.n	8004684 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fe45 	bl	80052e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004666:	89ba      	ldrh	r2, [r7, #12]
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fb27 	bl	8003cc0 <HAL_I2C_AddrCallback>
}
 8004672:	e007      	b.n	8004684 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2208      	movs	r2, #8
 800467a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d115      	bne.n	80046d4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2211      	movs	r2, #17
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046bc:	2101      	movs	r1, #1
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fe12 	bl	80052e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff facf 	bl	8003c70 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046d2:	e014      	b.n	80046fe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2212      	movs	r2, #18
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046e8:	2102      	movs	r1, #2
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fdfc 	bl	80052e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fac3 	bl	8003c84 <HAL_I2C_MasterRxCpltCallback>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e00c      	b.n	8004754 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004752:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b29      	cmp	r3, #41	; 0x29
 800475e:	d112      	bne.n	8004786 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2228      	movs	r2, #40	; 0x28
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2221      	movs	r2, #33	; 0x21
 800476c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800476e:	2101      	movs	r1, #1
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fdb9 	bl	80052e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fa8a 	bl	8003c98 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004784:	e017      	b.n	80047b6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b2a      	cmp	r3, #42	; 0x2a
 8004790:	d111      	bne.n	80047b6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2228      	movs	r2, #40	; 0x28
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2222      	movs	r2, #34	; 0x22
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047a0:	2102      	movs	r1, #2
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fda0 	bl	80052e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fa7b 	bl	8003cac <HAL_I2C_SlaveRxCpltCallback>
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2220      	movs	r2, #32
 80047d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b21      	cmp	r3, #33	; 0x21
 80047e0:	d107      	bne.n	80047f2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047e2:	2101      	movs	r1, #1
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fd7f 	bl	80052e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2211      	movs	r2, #17
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
 80047f0:	e00c      	b.n	800480c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b22      	cmp	r3, #34	; 0x22
 80047fc:	d106      	bne.n	800480c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047fe:	2102      	movs	r1, #2
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fd71 	bl	80052e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2212      	movs	r2, #18
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b4c      	ldr	r3, [pc, #304]	; (8004948 <I2C_ITMasterCplt+0x188>)
 8004818:	400b      	ands	r3, r1
 800481a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a49      	ldr	r2, [pc, #292]	; (800494c <I2C_ITMasterCplt+0x18c>)
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2210      	movs	r2, #16
 8004838:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f043 0204 	orr.w	r2, r3, #4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b60      	cmp	r3, #96	; 0x60
 8004850:	d10a      	bne.n	8004868 <I2C_ITMasterCplt+0xa8>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2db      	uxtb	r3, r3
 8004864:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004866:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fac2 	bl	8004df2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b60      	cmp	r3, #96	; 0x60
 800487e:	d002      	beq.n	8004886 <I2C_ITMasterCplt+0xc6>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f9b9 	bl	8004c04 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004892:	e054      	b.n	800493e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b21      	cmp	r3, #33	; 0x21
 800489e:	d124      	bne.n	80048ea <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b40      	cmp	r3, #64	; 0x40
 80048b8:	d10b      	bne.n	80048d2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fa10 	bl	8003cf0 <HAL_I2C_MemTxCpltCallback>
}
 80048d0:	e035      	b.n	800493e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff f9c4 	bl	8003c70 <HAL_I2C_MasterTxCpltCallback>
}
 80048e8:	e029      	b.n	800493e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b22      	cmp	r3, #34	; 0x22
 80048f4:	d123      	bne.n	800493e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d10b      	bne.n	8004928 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fd f81f 	bl	8001964 <HAL_I2C_MemRxCpltCallback>
}
 8004926:	e00a      	b.n	800493e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff f9a3 	bl	8003c84 <HAL_I2C_MasterRxCpltCallback>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	fe00e800 	.word	0xfe00e800
 800494c:	ffff0000 	.word	0xffff0000

08004950 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2220      	movs	r2, #32
 8004974:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b21      	cmp	r3, #33	; 0x21
 800497a:	d002      	beq.n	8004982 <I2C_ITSlaveCplt+0x32>
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b29      	cmp	r3, #41	; 0x29
 8004980:	d108      	bne.n	8004994 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004982:	f248 0101 	movw	r1, #32769	; 0x8001
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fcae 	bl	80052e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2221      	movs	r2, #33	; 0x21
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
 8004992:	e00d      	b.n	80049b0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b22      	cmp	r3, #34	; 0x22
 8004998:	d002      	beq.n	80049a0 <I2C_ITSlaveCplt+0x50>
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b2a      	cmp	r3, #42	; 0x2a
 800499e:	d107      	bne.n	80049b0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049a0:	f248 0102 	movw	r1, #32770	; 0x8002
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fc9f 	bl	80052e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2222      	movs	r2, #34	; 0x22
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b62      	ldr	r3, [pc, #392]	; (8004b54 <I2C_ITSlaveCplt+0x204>)
 80049cc:	400b      	ands	r3, r1
 80049ce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa0e 	bl	8004df2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01f      	beq.n	8004a38 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a06:	e017      	b.n	8004a38 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d012      	beq.n	8004a38 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d020      	beq.n	8004a84 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f023 0304 	bic.w	r3, r3, #4
 8004a48:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d010      	beq.n	8004ad2 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8a4 	bl	8004c04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b28      	cmp	r3, #40	; 0x28
 8004ac6:	d141      	bne.n	8004b4c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f846 	bl	8004b5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ad0:	e03c      	b.n	8004b4c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ada:	d014      	beq.n	8004b06 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff fe12 	bl	8004706 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <I2C_ITSlaveCplt+0x208>)
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff f8ec 	bl	8003cdc <HAL_I2C_ListenCpltCallback>
}
 8004b04:	e022      	b.n	8004b4c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b22      	cmp	r3, #34	; 0x22
 8004b10:	d10e      	bne.n	8004b30 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff f8bf 	bl	8003cac <HAL_I2C_SlaveRxCpltCallback>
}
 8004b2e:	e00d      	b.n	8004b4c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff f8a6 	bl	8003c98 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b4c:	bf00      	nop
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	fe00e800 	.word	0xfe00e800
 8004b58:	ffff0000 	.word	0xffff0000

08004b5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <I2C_ITListenCplt+0xa4>)
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d022      	beq.n	8004bd8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d012      	beq.n	8004bd8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bd8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb83 	bl	80052e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2210      	movs	r2, #16
 8004be8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff f872 	bl	8003cdc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	ffff0000 	.word	0xffff0000

08004c04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a5d      	ldr	r2, [pc, #372]	; (8004d98 <I2C_ITError+0x194>)
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b28      	cmp	r3, #40	; 0x28
 8004c3a:	d005      	beq.n	8004c48 <I2C_ITError+0x44>
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b29      	cmp	r3, #41	; 0x29
 8004c40:	d002      	beq.n	8004c48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b2a      	cmp	r3, #42	; 0x2a
 8004c46:	d10b      	bne.n	8004c60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c48:	2103      	movs	r1, #3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb4c 	bl	80052e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2228      	movs	r2, #40	; 0x28
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a50      	ldr	r2, [pc, #320]	; (8004d9c <I2C_ITError+0x198>)
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c5e:	e011      	b.n	8004c84 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c60:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb3f 	bl	80052e8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b60      	cmp	r3, #96	; 0x60
 8004c74:	d003      	beq.n	8004c7e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d039      	beq.n	8004d06 <I2C_ITError+0x102>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b11      	cmp	r3, #17
 8004c96:	d002      	beq.n	8004c9e <I2C_ITError+0x9a>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b21      	cmp	r3, #33	; 0x21
 8004c9c:	d133      	bne.n	8004d06 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cac:	d107      	bne.n	8004cbe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cbc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fadc 	bl	8003280 <HAL_DMA_GetState>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d017      	beq.n	8004cfe <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <I2C_ITError+0x19c>)
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe f920 	bl	8002f28 <HAL_DMA_Abort_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d04d      	beq.n	8004d8a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cfc:	e045      	b.n	8004d8a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f850 	bl	8004da4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d04:	e041      	b.n	8004d8a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d039      	beq.n	8004d82 <I2C_ITError+0x17e>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d002      	beq.n	8004d1a <I2C_ITError+0x116>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b22      	cmp	r3, #34	; 0x22
 8004d18:	d133      	bne.n	8004d82 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d28:	d107      	bne.n	8004d3a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fa9e 	bl	8003280 <HAL_DMA_GetState>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d017      	beq.n	8004d7a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <I2C_ITError+0x19c>)
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe f8e2 	bl	8002f28 <HAL_DMA_Abort_IT>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d78:	e009      	b.n	8004d8e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f812 	bl	8004da4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d80:	e005      	b.n	8004d8e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f80e 	bl	8004da4 <I2C_TreatErrorCallback>
  }
}
 8004d88:	e002      	b.n	8004d90 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d8e:	bf00      	nop
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	ffff0000 	.word	0xffff0000
 8004d9c:	08003f69 	.word	0x08003f69
 8004da0:	08004e3b 	.word	0x08004e3b

08004da4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b60      	cmp	r3, #96	; 0x60
 8004db6:	d10e      	bne.n	8004dd6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe ffa2 	bl	8003d18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dd4:	e009      	b.n	8004dea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fe ff8d 	bl	8003d04 <HAL_I2C_ErrorCallback>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d103      	bne.n	8004e10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d007      	beq.n	8004e2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	619a      	str	r2, [r3, #24]
  }
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	2200      	movs	r2, #0
 8004e56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	2200      	movs	r2, #0
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7ff ff9b 	bl	8004da4 <I2C_TreatErrorCallback>
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e86:	e022      	b.n	8004ece <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d01e      	beq.n	8004ece <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e90:	f7fd faf6 	bl	8002480 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d113      	bne.n	8004ece <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e00f      	b.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	bf0c      	ite	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	2300      	movne	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d0cd      	beq.n	8004e88 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f02:	e02c      	b.n	8004f5e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f871 	bl	8004ff0 <I2C_IsErrorOccurred>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e02a      	b.n	8004f6e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d01e      	beq.n	8004f5e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7fd faae 	bl	8002480 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d302      	bcc.n	8004f36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d113      	bne.n	8004f5e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d1cb      	bne.n	8004f04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f82:	e028      	b.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f831 	bl	8004ff0 <I2C_IsErrorOccurred>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e026      	b.n	8004fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f98:	f7fd fa72 	bl	8002480 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d113      	bne.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e007      	b.n	8004fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d1cf      	bne.n	8004f84 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d068      	beq.n	80050ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005024:	e049      	b.n	80050ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d045      	beq.n	80050ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fd fa27 	bl	8002480 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <I2C_IsErrorOccurred+0x54>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d13a      	bne.n	80050ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005056:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005066:	d121      	bne.n	80050ac <I2C_IsErrorOccurred+0xbc>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800506e:	d01d      	beq.n	80050ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b20      	cmp	r3, #32
 8005074:	d01a      	beq.n	80050ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005084:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005086:	f7fd f9fb 	bl	8002480 <HAL_GetTick>
 800508a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800508c:	e00e      	b.n	80050ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800508e:	f7fd f9f7 	bl	8002480 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b19      	cmp	r3, #25
 800509a:	d907      	bls.n	80050ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f043 0320 	orr.w	r3, r3, #32
 80050a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80050aa:	e006      	b.n	80050ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d1e9      	bne.n	800508e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d003      	beq.n	80050d0 <I2C_IsErrorOccurred+0xe0>
 80050c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0aa      	beq.n	8005026 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2220      	movs	r2, #32
 80050de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005110:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f043 0302 	orr.w	r3, r3, #2
 800514a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800515c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01c      	beq.n	800519e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff fe44 	bl	8004df2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <I2C_IsErrorOccurred+0x1bc>)
 8005176:	400b      	ands	r3, r1
 8005178:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	431a      	orrs	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800519e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3728      	adds	r7, #40	; 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	fe00e800 	.word	0xfe00e800

080051b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	817b      	strh	r3, [r7, #10]
 80051be:	4613      	mov	r3, r2
 80051c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051c2:	897b      	ldrh	r3, [r7, #10]
 80051c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051c8:	7a7b      	ldrb	r3, [r7, #9]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	4313      	orrs	r3, r2
 80051da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	0d5b      	lsrs	r3, r3, #21
 80051ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <I2C_TransferConfig+0x60>)
 80051f0:	430b      	orrs	r3, r1
 80051f2:	43db      	mvns	r3, r3
 80051f4:	ea02 0103 	and.w	r1, r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	03ff63ff 	.word	0x03ff63ff

08005214 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <I2C_Enable_IRQ+0xcc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005232:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <I2C_Enable_IRQ+0xd0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d11d      	bne.n	8005274 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005238:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800523c:	2b00      	cmp	r3, #0
 800523e:	da03      	bge.n	8005248 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005246:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005248:	887b      	ldrh	r3, [r7, #2]
 800524a:	2b10      	cmp	r3, #16
 800524c:	d103      	bne.n	8005256 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005254:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	2b20      	cmp	r3, #32
 800525a:	d103      	bne.n	8005264 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005262:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d12c      	bne.n	80052c4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005270:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005272:	e027      	b.n	80052c4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005278:	2b00      	cmp	r3, #0
 800527a:	da03      	bge.n	8005284 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005282:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005294:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80052a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052a8:	887b      	ldrh	r3, [r7, #2]
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d103      	bne.n	80052b6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80052b4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052b6:	887b      	ldrh	r3, [r7, #2]
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d103      	bne.n	80052c4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	08004159 	.word	0x08004159
 80052e4:	0800432f 	.word	0x0800432f

080052e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052f8:	887b      	ldrh	r3, [r7, #2]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00f      	beq.n	8005322 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005308:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005316:	2b28      	cmp	r3, #40	; 0x28
 8005318:	d003      	beq.n	8005322 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005320:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00f      	beq.n	800534c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005332:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005340:	2b28      	cmp	r3, #40	; 0x28
 8005342:	d003      	beq.n	800534c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800534a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800534c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	da03      	bge.n	800535c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800535a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800535c:	887b      	ldrh	r3, [r7, #2]
 800535e:	2b10      	cmp	r3, #16
 8005360:	d103      	bne.n	800536a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	2b20      	cmp	r3, #32
 800536e:	d103      	bne.n	8005378 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f043 0320 	orr.w	r3, r3, #32
 8005376:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005378:	887b      	ldrh	r3, [r7, #2]
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d103      	bne.n	8005386 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005384:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6819      	ldr	r1, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	43da      	mvns	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	400a      	ands	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d138      	bne.n	800542c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e032      	b.n	800542e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2224      	movs	r2, #36	; 0x24
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b20      	cmp	r3, #32
 800544e:	d139      	bne.n	80054c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800545a:	2302      	movs	r3, #2
 800545c:	e033      	b.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2224      	movs	r2, #36	; 0x24
 800546a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800548c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d4:	b08f      	sub	sp, #60	; 0x3c
 80054d6:	af0a      	add	r7, sp, #40	; 0x28
 80054d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e116      	b.n	8005712 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f008 faac 	bl	800da5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f004 fcdd 	bl	8009ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	687e      	ldr	r6, [r7, #4]
 8005530:	466d      	mov	r5, sp
 8005532:	f106 0410 	add.w	r4, r6, #16
 8005536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800553c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005542:	e885 0003 	stmia.w	r5, {r0, r1}
 8005546:	1d33      	adds	r3, r6, #4
 8005548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f004 fbbe 	bl	8009ccc <USB_CoreInit>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0d7      	b.n	8005712 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f004 fccb 	bl	8009f04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	e04a      	b.n	800560a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	333d      	adds	r3, #61	; 0x3d
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	333c      	adds	r3, #60	; 0x3c
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	b298      	uxth	r0, r3
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3344      	adds	r3, #68	; 0x44
 80055b0:	4602      	mov	r2, r0
 80055b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3340      	adds	r3, #64	; 0x40
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3348      	adds	r3, #72	; 0x48
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	334c      	adds	r3, #76	; 0x4c
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	3354      	adds	r3, #84	; 0x54
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	3301      	adds	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d3af      	bcc.n	8005574 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e044      	b.n	80056a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3301      	adds	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3b5      	bcc.n	800561a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	687e      	ldr	r6, [r7, #4]
 80056b6:	466d      	mov	r5, sp
 80056b8:	f106 0410 	add.w	r4, r6, #16
 80056bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056cc:	1d33      	adds	r3, r6, #4
 80056ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f004 fc63 	bl	8009f9c <USB_DevInit>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e014      	b.n	8005712 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f97b 	bl	80069fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f005 fdb1 	bl	800b272 <USB_DevDisconnect>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800571a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_PCD_Start+0x16>
 800572c:	2302      	movs	r3, #2
 800572e:	e012      	b.n	8005756 <HAL_PCD_Start+0x3c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f004 fbbf 	bl	8009ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f005 fd72 	bl	800b230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800575e:	b590      	push	{r4, r7, lr}
 8005760:	b08d      	sub	sp, #52	; 0x34
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f005 fe30 	bl	800b3da <USB_GetMode>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 84b7 	bne.w	80060f0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f005 fd94 	bl	800b2b4 <USB_ReadInterrupts>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 84ad 	beq.w	80060ee <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f005 fd81 	bl	800b2b4 <USB_ReadInterrupts>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d107      	bne.n	80057cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f002 0202 	and.w	r2, r2, #2
 80057ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f005 fd6f 	bl	800b2b4 <USB_ReadInterrupts>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d161      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	4413      	add	r3, r2
 800580c:	3304      	adds	r3, #4
 800580e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	0c5b      	lsrs	r3, r3, #17
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	2b02      	cmp	r3, #2
 800581a:	d124      	bne.n	8005866 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d035      	beq.n	8005894 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005836:	b29b      	uxth	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	6a38      	ldr	r0, [r7, #32]
 800583c:	f005 fba6 	bl	800af8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584c:	441a      	add	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800585e:	441a      	add	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
 8005864:	e016      	b.n	8005894 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	0c5b      	lsrs	r3, r3, #17
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	2b06      	cmp	r3, #6
 8005870:	d110      	bne.n	8005894 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005878:	2208      	movs	r2, #8
 800587a:	4619      	mov	r1, r3
 800587c:	6a38      	ldr	r0, [r7, #32]
 800587e:	f005 fb85 	bl	800af8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800588e:	441a      	add	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0210 	orr.w	r2, r2, #16
 80058a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f005 fd03 	bl	800b2b4 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058b8:	f040 80a7 	bne.w	8005a0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f005 fd08 	bl	800b2da <USB_ReadDevAllOutEpInterrupt>
 80058ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058cc:	e099      	b.n	8005a02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 808e 	beq.w	80059f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	4611      	mov	r1, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f005 fd2c 	bl	800b342 <USB_ReadDevOutEPInterrupt>
 80058ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00c      	beq.n	8005910 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	461a      	mov	r2, r3
 8005904:	2301      	movs	r3, #1
 8005906:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fef0 	bl	80066f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	461a      	mov	r2, r3
 8005928:	2308      	movs	r3, #8
 800592a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800592c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 ffc6 	bl	80068c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	461a      	mov	r2, r3
 800594c:	2310      	movs	r3, #16
 800594e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d030      	beq.n	80059bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d109      	bne.n	800597a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005978:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	4613      	mov	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4413      	add	r3, r2
 800598c:	3304      	adds	r3, #4
 800598e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d108      	bne.n	80059aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f008 f98d 	bl	800dcc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	2302      	movs	r3, #2
 80059ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	461a      	mov	r2, r3
 80059d4:	2320      	movs	r3, #32
 80059d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	461a      	mov	r2, r3
 80059f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	3301      	adds	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f af62 	bne.w	80058ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 fc50 	bl	800b2b4 <USB_ReadInterrupts>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a1e:	f040 80db 	bne.w	8005bd8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f005 fc71 	bl	800b30e <USB_ReadDevAllInEpInterrupt>
 8005a2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a32:	e0cd      	b.n	8005bd0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80c2 	beq.w	8005bc4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f005 fc97 	bl	800b37e <USB_ReadDevInEPInterrupt>
 8005a50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d057      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	2201      	movs	r2, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2301      	movs	r3, #1
 8005a90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d132      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	334c      	adds	r3, #76	; 0x4c
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4403      	add	r3, r0
 8005aba:	3348      	adds	r3, #72	; 0x48
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4419      	add	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4403      	add	r3, r0
 8005ace:	334c      	adds	r3, #76	; 0x4c
 8005ad0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d113      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x3a2>
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3354      	adds	r3, #84	; 0x54
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005af8:	461a      	mov	r2, r3
 8005afa:	2101      	movs	r1, #1
 8005afc:	f005 fca0 	bl	800b440 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f008 f857 	bl	800dbba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	461a      	mov	r2, r3
 8005b24:	2308      	movs	r3, #8
 8005b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2310      	movs	r3, #16
 8005b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d023      	beq.n	8005bb2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b6c:	6a38      	ldr	r0, [r7, #32]
 8005b6e:	f004 fb73 	bl	800a258 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	4613      	mov	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	3338      	adds	r3, #56	; 0x38
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	3304      	adds	r3, #4
 8005b84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d108      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f008 f8a4 	bl	800dce8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	461a      	mov	r2, r3
 8005bae:	2302      	movs	r3, #2
 8005bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fd08 	bl	80065d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f47f af2e 	bne.w	8005a34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f005 fb69 	bl	800b2b4 <USB_ReadInterrupts>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d122      	bne.n	8005c34 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d108      	bne.n	8005c1e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c14:	2100      	movs	r1, #0
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f008 fa1e 	bl	800e058 <HAL_PCDEx_LPM_Callback>
 8005c1c:	e002      	b.n	8005c24 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f008 f842 	bl	800dca8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f005 fb3b 	bl	800b2b4 <USB_ReadInterrupts>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c48:	d112      	bne.n	8005c70 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d102      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f007 fffe 	bl	800dc5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 fb1d 	bl	800b2b4 <USB_ReadInterrupts>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c84:	d121      	bne.n	8005cca <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005c94:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d111      	bne.n	8005cc4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	f003 020f 	and.w	r2, r3, #15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cba:	2101      	movs	r1, #1
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f008 f9cb 	bl	800e058 <HAL_PCDEx_LPM_Callback>
 8005cc2:	e002      	b.n	8005cca <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f007 ffc9 	bl	800dc5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f005 faf0 	bl	800b2b4 <USB_ReadInterrupts>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	f040 80b7 	bne.w	8005e50 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2110      	movs	r1, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f004 faab 	bl	800a258 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d06:	e046      	b.n	8005d96 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	461a      	mov	r2, r3
 8005d16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	3301      	adds	r3, #1
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d3b3      	bcc.n	8005d08 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005db2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d016      	beq.n	8005dea <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dcc:	f043 030b 	orr.w	r3, r3, #11
 8005dd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de2:	f043 030b 	orr.w	r3, r3, #11
 8005de6:	6453      	str	r3, [r2, #68]	; 0x44
 8005de8:	e015      	b.n	8005e16 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f242 032b 	movw	r3, #8235	; 0x202b
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e10:	f043 030b 	orr.w	r3, r3, #11
 8005e14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f005 fb00 	bl	800b440 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f005 fa2d 	bl	800b2b4 <USB_ReadInterrupts>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e64:	d124      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f005 fac4 	bl	800b3f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f004 fa6c 	bl	800a352 <USB_GetDevSpeed>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681c      	ldr	r4, [r3, #0]
 8005e86:	f001 fad3 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 8005e8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	4620      	mov	r0, r4
 8005e96:	f003 ff71 	bl	8009d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f007 feb5 	bl	800dc0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f005 f9fd 	bl	800b2b4 <USB_ReadInterrupts>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d10a      	bne.n	8005eda <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f007 fe92 	bl	800dbee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f002 0208 	and.w	r2, r2, #8
 8005ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f005 f9e8 	bl	800b2b4 <USB_ReadInterrupts>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d122      	bne.n	8005f34 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005efa:	2301      	movs	r3, #1
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
 8005efe:	e014      	b.n	8005f2a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fb27 	bl	8006572 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	3301      	adds	r3, #1
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d3e5      	bcc.n	8005f00 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f005 f9bb 	bl	800b2b4 <USB_ReadInterrupts>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f48:	d13b      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4e:	e02b      	b.n	8005fa8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	3340      	adds	r3, #64	; 0x40
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d115      	bne.n	8005fa2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005f76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	da12      	bge.n	8005fa2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	333f      	adds	r3, #63	; 0x3f
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fae8 	bl	8006572 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d3ce      	bcc.n	8005f50 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f005 f974 	bl	800b2b4 <USB_ReadInterrupts>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd6:	d155      	bne.n	8006084 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fd8:	2301      	movs	r3, #1
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
 8005fdc:	e045      	b.n	800606a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d12e      	bne.n	8006064 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006006:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006008:	2b00      	cmp	r3, #0
 800600a:	da2b      	bge.n	8006064 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006018:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800601c:	429a      	cmp	r2, r3
 800601e:	d121      	bne.n	8006064 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006060:	6053      	str	r3, [r2, #4]
            break;
 8006062:	e007      	b.n	8006074 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	3301      	adds	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	429a      	cmp	r2, r3
 8006072:	d3b4      	bcc.n	8005fde <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f005 f913 	bl	800b2b4 <USB_ReadInterrupts>
 800608e:	4603      	mov	r3, r0
 8006090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006098:	d10a      	bne.n	80060b0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f007 fe36 	bl	800dd0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80060ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f005 f8fd 	bl	800b2b4 <USB_ReadInterrupts>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d115      	bne.n	80060f0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f007 fe26 	bl	800dd28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e000      	b.n	80060f0 <HAL_PCD_IRQHandler+0x992>
      return;
 80060ee:	bf00      	nop
    }
  }
}
 80060f0:	3734      	adds	r7, #52	; 0x34
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd90      	pop	{r4, r7, pc}

080060f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_PCD_SetAddress+0x1a>
 800610c:	2302      	movs	r3, #2
 800610e:	e013      	b.n	8006138 <HAL_PCD_SetAddress+0x42>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f005 f85b 	bl	800b1e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	70fb      	strb	r3, [r7, #3]
 8006152:	460b      	mov	r3, r1
 8006154:	803b      	strh	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800615e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	da0f      	bge.n	8006186 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	3338      	adds	r3, #56	; 0x38
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	3304      	adds	r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	705a      	strb	r2, [r3, #1]
 8006184:	e00f      	b.n	80061a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	4613      	mov	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4413      	add	r3, r2
 800619c:	3304      	adds	r3, #4
 800619e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80061b2:	883a      	ldrh	r2, [r7, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	78ba      	ldrb	r2, [r7, #2]
 80061bc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80061d0:	78bb      	ldrb	r3, [r7, #2]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d102      	bne.n	80061dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_PCD_EP_Open+0xaa>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e00e      	b.n	8006208 <HAL_PCD_EP_Open+0xc8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f004 f8cf 	bl	800a39c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006206:	7afb      	ldrb	r3, [r7, #11]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800621c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006220:	2b00      	cmp	r3, #0
 8006222:	da0f      	bge.n	8006244 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	f003 020f 	and.w	r2, r3, #15
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	3338      	adds	r3, #56	; 0x38
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	705a      	strb	r2, [r3, #1]
 8006242:	e00f      	b.n	8006264 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 020f 	and.w	r2, r3, #15
 800624a:	4613      	mov	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	3304      	adds	r3, #4
 800625c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_PCD_EP_Close+0x6e>
 800627a:	2302      	movs	r3, #2
 800627c:	e00e      	b.n	800629c <HAL_PCD_EP_Close+0x8c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	4618      	mov	r0, r3
 800628e:	f004 f90d 	bl	800a4ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	460b      	mov	r3, r1
 80062b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	3304      	adds	r3, #4
 80062cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d102      	bne.n	8006300 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	f004 fbf4 	bl	800ab04 <USB_EP0StartXfer>
 800631c:	e008      	b.n	8006330 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	6979      	ldr	r1, [r7, #20]
 800632c:	f004 f99a 	bl	800a664 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800635c:	681b      	ldr	r3, [r3, #0]
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	460b      	mov	r3, r1
 8006378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	f003 020f 	and.w	r2, r3, #15
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	3338      	adds	r3, #56	; 0x38
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	3304      	adds	r3, #4
 8006390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2201      	movs	r2, #1
 80063a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d102      	bne.n	80063c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6979      	ldr	r1, [r7, #20]
 80063dc:	f004 fb92 	bl	800ab04 <USB_EP0StartXfer>
 80063e0:	e008      	b.n	80063f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	6979      	ldr	r1, [r7, #20]
 80063f0:	f004 f938 	bl	800a664 <USB_EPStartXfer>
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d901      	bls.n	800641c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e050      	b.n	80064be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800641c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006420:	2b00      	cmp	r3, #0
 8006422:	da0f      	bge.n	8006444 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	3338      	adds	r3, #56	; 0x38
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4413      	add	r3, r2
 8006438:	3304      	adds	r3, #4
 800643a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	705a      	strb	r2, [r3, #1]
 8006442:	e00d      	b.n	8006460 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	4613      	mov	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	3304      	adds	r3, #4
 8006458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_PCD_EP_SetStall+0x82>
 800647c:	2302      	movs	r3, #2
 800647e:	e01e      	b.n	80064be <HAL_PCD_EP_SetStall+0xc0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68f9      	ldr	r1, [r7, #12]
 800648e:	4618      	mov	r0, r3
 8006490:	f004 fdd4 	bl	800b03c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	b2d9      	uxtb	r1, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064ae:	461a      	mov	r2, r3
 80064b0:	f004 ffc6 	bl	800b440 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	f003 020f 	and.w	r2, r3, #15
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d901      	bls.n	80064e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e042      	b.n	800656a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da0f      	bge.n	800650c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 020f 	and.w	r2, r3, #15
 80064f2:	4613      	mov	r3, r2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	3338      	adds	r3, #56	; 0x38
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	3304      	adds	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	705a      	strb	r2, [r3, #1]
 800650a:	e00f      	b.n	800652c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	3304      	adds	r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	b2da      	uxtb	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_PCD_EP_ClrStall+0x86>
 8006548:	2302      	movs	r3, #2
 800654a:	e00e      	b.n	800656a <HAL_PCD_EP_ClrStall+0xa4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	4618      	mov	r0, r3
 800655c:	f004 fddc 	bl	800b118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800657e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006582:	2b00      	cmp	r3, #0
 8006584:	da0c      	bge.n	80065a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	3338      	adds	r3, #56	; 0x38
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e00c      	b.n	80065ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	f003 020f 	and.w	r2, r3, #15
 80065a6:	4613      	mov	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	3304      	adds	r3, #4
 80065b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f004 fbfb 	bl	800adbc <USB_EPStopXfer>
 80065c6:	4603      	mov	r3, r0
 80065c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80065ca:	7afb      	ldrb	r3, [r7, #11]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af02      	add	r7, sp, #8
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	3338      	adds	r3, #56	; 0x38
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	3304      	adds	r3, #4
 80065fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	429a      	cmp	r2, r3
 8006606:	d901      	bls.n	800660c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e06c      	b.n	80066e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	429a      	cmp	r2, r3
 8006620:	d902      	bls.n	8006628 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	3303      	adds	r3, #3
 800662c:	089b      	lsrs	r3, r3, #2
 800662e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006630:	e02b      	b.n	800668a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	429a      	cmp	r2, r3
 8006646:	d902      	bls.n	800664e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3303      	adds	r3, #3
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6919      	ldr	r1, [r3, #16]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006666:	b2db      	uxtb	r3, r3
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	4603      	mov	r3, r0
 800666c:	6978      	ldr	r0, [r7, #20]
 800666e:	f004 fc4f 	bl	800af10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	441a      	add	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	d809      	bhi.n	80066b4 <PCD_WriteEmptyTxFifo+0xe0>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1a      	ldr	r2, [r3, #32]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d203      	bcs.n	80066b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1be      	bne.n	8006632 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	699a      	ldr	r2, [r3, #24]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d811      	bhi.n	80066e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	2201      	movs	r2, #1
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	43db      	mvns	r3, r3
 80066da:	6939      	ldr	r1, [r7, #16]
 80066dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e0:	4013      	ands	r3, r2
 80066e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	333c      	adds	r3, #60	; 0x3c
 8006708:	3304      	adds	r3, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d17b      	bne.n	800681e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d015      	beq.n	800675c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4a61      	ldr	r2, [pc, #388]	; (80068b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	f240 80b9 	bls.w	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80b3 	beq.w	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006758:	6093      	str	r3, [r2, #8]
 800675a:	e0a7      	b.n	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	461a      	mov	r2, r3
 8006774:	2320      	movs	r3, #32
 8006776:	6093      	str	r3, [r2, #8]
 8006778:	e098      	b.n	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 8093 	bne.w	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	4a4b      	ldr	r2, [pc, #300]	; (80068b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d90f      	bls.n	80067ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067aa:	6093      	str	r3, [r2, #8]
 80067ac:	e07e      	b.n	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	3304      	adds	r3, #4
 80067c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	0159      	lsls	r1, r3, #5
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	440b      	add	r3, r1
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d114      	bne.n	8006810 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067f8:	461a      	mov	r2, r3
 80067fa:	2101      	movs	r1, #1
 80067fc:	f004 fe20 	bl	800b440 <USB_EP0_OutStart>
 8006800:	e006      	b.n	8006810 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	441a      	add	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f007 f9b4 	bl	800db84 <HAL_PCD_DataOutStageCallback>
 800681c:	e046      	b.n	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4a26      	ldr	r2, [pc, #152]	; (80068bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d124      	bne.n	8006870 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	461a      	mov	r2, r3
 800683e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006842:	6093      	str	r3, [r2, #8]
 8006844:	e032      	b.n	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685c:	461a      	mov	r2, r3
 800685e:	2320      	movs	r3, #32
 8006860:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f007 f98b 	bl	800db84 <HAL_PCD_DataOutStageCallback>
 800686e:	e01d      	b.n	80068ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d114      	bne.n	80068a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d108      	bne.n	80068a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006898:	461a      	mov	r2, r3
 800689a:	2100      	movs	r1, #0
 800689c:	f004 fdd0 	bl	800b440 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f007 f96c 	bl	800db84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	4f54300a 	.word	0x4f54300a
 80068bc:	4f54310a 	.word	0x4f54310a

080068c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	333c      	adds	r3, #60	; 0x3c
 80068d8:	3304      	adds	r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a15      	ldr	r2, [pc, #84]	; (8006948 <PCD_EP_OutSetupPacket_int+0x88>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d90e      	bls.n	8006914 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006912:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f007 f923 	bl	800db60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <PCD_EP_OutSetupPacket_int+0x88>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d90c      	bls.n	800693c <PCD_EP_OutSetupPacket_int+0x7c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d108      	bne.n	800693c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006934:	461a      	mov	r2, r3
 8006936:	2101      	movs	r1, #1
 8006938:	f004 fd82 	bl	800b440 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	4f54300a 	.word	0x4f54300a

0800694c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
 8006958:	4613      	mov	r3, r2
 800695a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800696a:	883b      	ldrh	r3, [r7, #0]
 800696c:	0419      	lsls	r1, r3, #16
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	430a      	orrs	r2, r1
 8006976:	629a      	str	r2, [r3, #40]	; 0x28
 8006978:	e028      	b.n	80069cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	4413      	add	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]
 800698c:	e00d      	b.n	80069aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	3340      	adds	r3, #64	; 0x40
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	3301      	adds	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3ec      	bcc.n	800698e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80069b4:	883b      	ldrh	r3, [r7, #0]
 80069b6:	0418      	lsls	r0, r3, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	3b01      	subs	r3, #1
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4302      	orrs	r2, r0
 80069c4:	3340      	adds	r3, #64	; 0x40
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	887a      	ldrh	r2, [r7, #2]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_PCDEx_ActivateLPM+0x44>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	10000003 	.word	0x10000003

08006a44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a04      	ldr	r2, [pc, #16]	; (8006a60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a52:	6013      	str	r3, [r2, #0]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40007000 	.word	0x40007000

08006a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	4b23      	ldr	r3, [pc, #140]	; (8006afc <HAL_PWREx_EnableOverDrive+0x98>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	4a22      	ldr	r2, [pc, #136]	; (8006afc <HAL_PWREx_EnableOverDrive+0x98>)
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a78:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7a:	4b20      	ldr	r3, [pc, #128]	; (8006afc <HAL_PWREx_EnableOverDrive+0x98>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a86:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a92:	f7fb fcf5 	bl	8002480 <HAL_GetTick>
 8006a96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a98:	e009      	b.n	8006aae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a9a:	f7fb fcf1 	bl	8002480 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa8:	d901      	bls.n	8006aae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e022      	b.n	8006af4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006aae:	4b14      	ldr	r3, [pc, #80]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aba:	d1ee      	bne.n	8006a9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0f      	ldr	r2, [pc, #60]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ac8:	f7fb fcda 	bl	8002480 <HAL_GetTick>
 8006acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ace:	e009      	b.n	8006ae4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ad0:	f7fb fcd6 	bl	8002480 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ade:	d901      	bls.n	8006ae4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e007      	b.n	8006af4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af0:	d1ee      	bne.n	8006ad0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40023800 	.word	0x40023800
 8006b00:	40007000 	.word	0x40007000

08006b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e291      	b.n	800703e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8087 	beq.w	8006c36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b28:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d00c      	beq.n	8006b4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b34:	4b93      	ldr	r3, [pc, #588]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 030c 	and.w	r3, r3, #12
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d112      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
 8006b40:	4b90      	ldr	r3, [pc, #576]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b4c:	d10b      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4e:	4b8d      	ldr	r3, [pc, #564]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06c      	beq.n	8006c34 <HAL_RCC_OscConfig+0x130>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d168      	bne.n	8006c34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e26b      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x7a>
 8006b70:	4b84      	ldr	r3, [pc, #528]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a83      	ldr	r2, [pc, #524]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	e02e      	b.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x9c>
 8006b86:	4b7f      	ldr	r3, [pc, #508]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a7e      	ldr	r2, [pc, #504]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	4b7c      	ldr	r3, [pc, #496]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a7b      	ldr	r2, [pc, #492]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	e01d      	b.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0xc0>
 8006baa:	4b76      	ldr	r3, [pc, #472]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a75      	ldr	r2, [pc, #468]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	4b73      	ldr	r3, [pc, #460]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a72      	ldr	r2, [pc, #456]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e00b      	b.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006bc4:	4b6f      	ldr	r3, [pc, #444]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a6e      	ldr	r2, [pc, #440]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b6c      	ldr	r3, [pc, #432]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a6b      	ldr	r2, [pc, #428]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d013      	beq.n	8006c0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fb fc4c 	bl	8002480 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bec:	f7fb fc48 	bl	8002480 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b64      	cmp	r3, #100	; 0x64
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e21f      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfe:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0xe8>
 8006c0a:	e014      	b.n	8006c36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fb fc38 	bl	8002480 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c14:	f7fb fc34 	bl	8002480 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b64      	cmp	r3, #100	; 0x64
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e20b      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c26:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x110>
 8006c32:	e000      	b.n	8006c36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d069      	beq.n	8006d16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c42:	4b50      	ldr	r3, [pc, #320]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 030c 	and.w	r3, r3, #12
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c4e:	4b4d      	ldr	r3, [pc, #308]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d11c      	bne.n	8006c94 <HAL_RCC_OscConfig+0x190>
 8006c5a:	4b4a      	ldr	r3, [pc, #296]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d116      	bne.n	8006c94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c66:	4b47      	ldr	r3, [pc, #284]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_RCC_OscConfig+0x17a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d001      	beq.n	8006c7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e1df      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7e:	4b41      	ldr	r3, [pc, #260]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	493d      	ldr	r1, [pc, #244]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c92:	e040      	b.n	8006d16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d023      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c9c:	4b39      	ldr	r3, [pc, #228]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a38      	ldr	r2, [pc, #224]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fb fbea 	bl	8002480 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb0:	f7fb fbe6 	bl	8002480 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1bd      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc2:	4b30      	ldr	r3, [pc, #192]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cce:	4b2d      	ldr	r3, [pc, #180]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4929      	ldr	r1, [pc, #164]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]
 8006ce2:	e018      	b.n	8006d16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ce4:	4b27      	ldr	r3, [pc, #156]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a26      	ldr	r2, [pc, #152]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fb fbc6 	bl	8002480 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fb fbc2 	bl	8002480 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e199      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	4b1e      	ldr	r3, [pc, #120]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d038      	beq.n	8006d94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d019      	beq.n	8006d5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2a:	4b16      	ldr	r3, [pc, #88]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2e:	4a15      	ldr	r2, [pc, #84]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d36:	f7fb fba3 	bl	8002480 <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d3c:	e008      	b.n	8006d50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d3e:	f7fb fb9f 	bl	8002480 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e176      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d50:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0f0      	beq.n	8006d3e <HAL_RCC_OscConfig+0x23a>
 8006d5c:	e01a      	b.n	8006d94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d62:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <HAL_RCC_OscConfig+0x280>)
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6a:	f7fb fb89 	bl	8002480 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d70:	e00a      	b.n	8006d88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d72:	f7fb fb85 	bl	8002480 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d903      	bls.n	8006d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e15c      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
 8006d84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d88:	4b91      	ldr	r3, [pc, #580]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ee      	bne.n	8006d72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80a4 	beq.w	8006eea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b8b      	ldr	r3, [pc, #556]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	4b88      	ldr	r3, [pc, #544]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	4a87      	ldr	r2, [pc, #540]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dba:	4b85      	ldr	r3, [pc, #532]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	60bb      	str	r3, [r7, #8]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dca:	4b82      	ldr	r3, [pc, #520]	; (8006fd4 <HAL_RCC_OscConfig+0x4d0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d118      	bne.n	8006e08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006dd6:	4b7f      	ldr	r3, [pc, #508]	; (8006fd4 <HAL_RCC_OscConfig+0x4d0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a7e      	ldr	r2, [pc, #504]	; (8006fd4 <HAL_RCC_OscConfig+0x4d0>)
 8006ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de2:	f7fb fb4d 	bl	8002480 <HAL_GetTick>
 8006de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dea:	f7fb fb49 	bl	8002480 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b64      	cmp	r3, #100	; 0x64
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e120      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfc:	4b75      	ldr	r3, [pc, #468]	; (8006fd4 <HAL_RCC_OscConfig+0x4d0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f0      	beq.n	8006dea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d106      	bne.n	8006e1e <HAL_RCC_OscConfig+0x31a>
 8006e10:	4b6f      	ldr	r3, [pc, #444]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e14:	4a6e      	ldr	r2, [pc, #440]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1c:	e02d      	b.n	8006e7a <HAL_RCC_OscConfig+0x376>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10c      	bne.n	8006e40 <HAL_RCC_OscConfig+0x33c>
 8006e26:	4b6a      	ldr	r3, [pc, #424]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	4a69      	ldr	r2, [pc, #420]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	6713      	str	r3, [r2, #112]	; 0x70
 8006e32:	4b67      	ldr	r3, [pc, #412]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	4a66      	ldr	r2, [pc, #408]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e38:	f023 0304 	bic.w	r3, r3, #4
 8006e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e3e:	e01c      	b.n	8006e7a <HAL_RCC_OscConfig+0x376>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b05      	cmp	r3, #5
 8006e46:	d10c      	bne.n	8006e62 <HAL_RCC_OscConfig+0x35e>
 8006e48:	4b61      	ldr	r3, [pc, #388]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	4a60      	ldr	r2, [pc, #384]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e4e:	f043 0304 	orr.w	r3, r3, #4
 8006e52:	6713      	str	r3, [r2, #112]	; 0x70
 8006e54:	4b5e      	ldr	r3, [pc, #376]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e58:	4a5d      	ldr	r2, [pc, #372]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e60:	e00b      	b.n	8006e7a <HAL_RCC_OscConfig+0x376>
 8006e62:	4b5b      	ldr	r3, [pc, #364]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	4a5a      	ldr	r2, [pc, #360]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6e:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	4a57      	ldr	r2, [pc, #348]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006e74:	f023 0304 	bic.w	r3, r3, #4
 8006e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d015      	beq.n	8006eae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e82:	f7fb fafd 	bl	8002480 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e88:	e00a      	b.n	8006ea0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e8a:	f7fb faf9 	bl	8002480 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e0ce      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea0:	4b4b      	ldr	r3, [pc, #300]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0ee      	beq.n	8006e8a <HAL_RCC_OscConfig+0x386>
 8006eac:	e014      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eae:	f7fb fae7 	bl	8002480 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb6:	f7fb fae3 	bl	8002480 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0b8      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ecc:	4b40      	ldr	r3, [pc, #256]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1ee      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d105      	bne.n	8006eea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ede:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	4a3b      	ldr	r2, [pc, #236]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80a4 	beq.w	800703c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ef4:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 030c 	and.w	r3, r3, #12
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d06b      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d149      	bne.n	8006f9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f08:	4b31      	ldr	r3, [pc, #196]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fb fab4 	bl	8002480 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fb fab0 	bl	8002480 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e087      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69da      	ldr	r2, [r3, #28]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	3b01      	subs	r3, #1
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f68:	4b19      	ldr	r3, [pc, #100]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fb fa84 	bl	8002480 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fb fa80 	bl	8002480 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e057      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f0      	beq.n	8006f7c <HAL_RCC_OscConfig+0x478>
 8006f9a:	e04f      	b.n	800703c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0b      	ldr	r2, [pc, #44]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa8:	f7fb fa6a 	bl	8002480 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb0:	f7fb fa66 	bl	8002480 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e03d      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <HAL_RCC_OscConfig+0x4cc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x4ac>
 8006fce:	e035      	b.n	800703c <HAL_RCC_OscConfig+0x538>
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <HAL_RCC_OscConfig+0x544>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d028      	beq.n	8007038 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d121      	bne.n	8007038 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d11a      	bne.n	8007038 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007008:	4013      	ands	r3, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800700e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007010:	4293      	cmp	r3, r2
 8007012:	d111      	bne.n	8007038 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	3b01      	subs	r3, #1
 8007022:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007024:	429a      	cmp	r2, r3
 8007026:	d107      	bne.n	8007038 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d001      	beq.n	800703c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800

0800704c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0d0      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007064:	4b6a      	ldr	r3, [pc, #424]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d910      	bls.n	8007094 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b67      	ldr	r3, [pc, #412]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 020f 	bic.w	r2, r3, #15
 800707a:	4965      	ldr	r1, [pc, #404]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b63      	ldr	r3, [pc, #396]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0b8      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d020      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070ac:	4b59      	ldr	r3, [pc, #356]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4a58      	ldr	r2, [pc, #352]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070c4:	4b53      	ldr	r3, [pc, #332]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a52      	ldr	r2, [pc, #328]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d0:	4b50      	ldr	r3, [pc, #320]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	494d      	ldr	r1, [pc, #308]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d040      	beq.n	8007170 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d107      	bne.n	8007106 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070f6:	4b47      	ldr	r3, [pc, #284]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d115      	bne.n	800712e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e07f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d107      	bne.n	800711e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800710e:	4b41      	ldr	r3, [pc, #260]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e073      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800711e:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e06b      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f023 0203 	bic.w	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4936      	ldr	r1, [pc, #216]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 800713c:	4313      	orrs	r3, r2
 800713e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007140:	f7fb f99e 	bl	8002480 <HAL_GetTick>
 8007144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007146:	e00a      	b.n	800715e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007148:	f7fb f99a 	bl	8002480 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	f241 3288 	movw	r2, #5000	; 0x1388
 8007156:	4293      	cmp	r3, r2
 8007158:	d901      	bls.n	800715e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e053      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715e:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 020c 	and.w	r2, r3, #12
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	429a      	cmp	r2, r3
 800716e:	d1eb      	bne.n	8007148 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007170:	4b27      	ldr	r3, [pc, #156]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d210      	bcs.n	80071a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b24      	ldr	r3, [pc, #144]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f023 020f 	bic.w	r2, r3, #15
 8007186:	4922      	ldr	r1, [pc, #136]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	4313      	orrs	r3, r2
 800718c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800718e:	4b20      	ldr	r3, [pc, #128]	; (8007210 <HAL_RCC_ClockConfig+0x1c4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d001      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e032      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	4916      	ldr	r1, [pc, #88]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	490e      	ldr	r1, [pc, #56]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071de:	f000 f821 	bl	8007224 <HAL_RCC_GetSysClockFreq>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_ClockConfig+0x1c8>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	490a      	ldr	r1, [pc, #40]	; (8007218 <HAL_RCC_ClockConfig+0x1cc>)
 80071f0:	5ccb      	ldrb	r3, [r1, r3]
 80071f2:	fa22 f303 	lsr.w	r3, r2, r3
 80071f6:	4a09      	ldr	r2, [pc, #36]	; (800721c <HAL_RCC_ClockConfig+0x1d0>)
 80071f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCC_ClockConfig+0x1d4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fb f8fa 	bl	80023f8 <HAL_InitTick>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40023c00 	.word	0x40023c00
 8007214:	40023800 	.word	0x40023800
 8007218:	0800e450 	.word	0x0800e450
 800721c:	20000018 	.word	0x20000018
 8007220:	2000001c 	.word	0x2000001c

08007224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007228:	b094      	sub	sp, #80	; 0x50
 800722a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	647b      	str	r3, [r7, #68]	; 0x44
 8007230:	2300      	movs	r3, #0
 8007232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007234:	2300      	movs	r3, #0
 8007236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800723c:	4b79      	ldr	r3, [pc, #484]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 030c 	and.w	r3, r3, #12
 8007244:	2b08      	cmp	r3, #8
 8007246:	d00d      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0x40>
 8007248:	2b08      	cmp	r3, #8
 800724a:	f200 80e1 	bhi.w	8007410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0x34>
 8007252:	2b04      	cmp	r3, #4
 8007254:	d003      	beq.n	800725e <HAL_RCC_GetSysClockFreq+0x3a>
 8007256:	e0db      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007258:	4b73      	ldr	r3, [pc, #460]	; (8007428 <HAL_RCC_GetSysClockFreq+0x204>)
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800725c:	e0db      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800725e:	4b73      	ldr	r3, [pc, #460]	; (800742c <HAL_RCC_GetSysClockFreq+0x208>)
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007262:	e0d8      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007264:	4b6f      	ldr	r3, [pc, #444]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800726e:	4b6d      	ldr	r3, [pc, #436]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d063      	beq.n	8007342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727a:	4b6a      	ldr	r3, [pc, #424]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	099b      	lsrs	r3, r3, #6
 8007280:	2200      	movs	r2, #0
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
 8007284:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	633b      	str	r3, [r7, #48]	; 0x30
 800728e:	2300      	movs	r3, #0
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
 8007292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	f04f 0000 	mov.w	r0, #0
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	0159      	lsls	r1, r3, #5
 80072a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072a8:	0150      	lsls	r0, r2, #5
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4621      	mov	r1, r4
 80072b0:	1a51      	subs	r1, r2, r1
 80072b2:	6139      	str	r1, [r7, #16]
 80072b4:	4629      	mov	r1, r5
 80072b6:	eb63 0301 	sbc.w	r3, r3, r1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072c8:	4659      	mov	r1, fp
 80072ca:	018b      	lsls	r3, r1, #6
 80072cc:	4651      	mov	r1, sl
 80072ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072d2:	4651      	mov	r1, sl
 80072d4:	018a      	lsls	r2, r1, #6
 80072d6:	4651      	mov	r1, sl
 80072d8:	ebb2 0801 	subs.w	r8, r2, r1
 80072dc:	4659      	mov	r1, fp
 80072de:	eb63 0901 	sbc.w	r9, r3, r1
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072f6:	4690      	mov	r8, r2
 80072f8:	4699      	mov	r9, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	eb18 0303 	adds.w	r3, r8, r3
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	462b      	mov	r3, r5
 8007304:	eb49 0303 	adc.w	r3, r9, r3
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007316:	4629      	mov	r1, r5
 8007318:	024b      	lsls	r3, r1, #9
 800731a:	4621      	mov	r1, r4
 800731c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007320:	4621      	mov	r1, r4
 8007322:	024a      	lsls	r2, r1, #9
 8007324:	4610      	mov	r0, r2
 8007326:	4619      	mov	r1, r3
 8007328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732a:	2200      	movs	r2, #0
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
 800732e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007334:	f7f9 fba6 	bl	8000a84 <__aeabi_uldivmod>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4613      	mov	r3, r2
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007340:	e058      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007342:	4b38      	ldr	r3, [pc, #224]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	099b      	lsrs	r3, r3, #6
 8007348:	2200      	movs	r2, #0
 800734a:	4618      	mov	r0, r3
 800734c:	4611      	mov	r1, r2
 800734e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800735c:	4642      	mov	r2, r8
 800735e:	464b      	mov	r3, r9
 8007360:	f04f 0000 	mov.w	r0, #0
 8007364:	f04f 0100 	mov.w	r1, #0
 8007368:	0159      	lsls	r1, r3, #5
 800736a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800736e:	0150      	lsls	r0, r2, #5
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4641      	mov	r1, r8
 8007376:	ebb2 0a01 	subs.w	sl, r2, r1
 800737a:	4649      	mov	r1, r9
 800737c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800738c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007394:	ebb2 040a 	subs.w	r4, r2, sl
 8007398:	eb63 050b 	sbc.w	r5, r3, fp
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	00eb      	lsls	r3, r5, #3
 80073a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073aa:	00e2      	lsls	r2, r4, #3
 80073ac:	4614      	mov	r4, r2
 80073ae:	461d      	mov	r5, r3
 80073b0:	4643      	mov	r3, r8
 80073b2:	18e3      	adds	r3, r4, r3
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	464b      	mov	r3, r9
 80073b8:	eb45 0303 	adc.w	r3, r5, r3
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073ca:	4629      	mov	r1, r5
 80073cc:	028b      	lsls	r3, r1, #10
 80073ce:	4621      	mov	r1, r4
 80073d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073d4:	4621      	mov	r1, r4
 80073d6:	028a      	lsls	r2, r1, #10
 80073d8:	4610      	mov	r0, r2
 80073da:	4619      	mov	r1, r3
 80073dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073de:	2200      	movs	r2, #0
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	61fa      	str	r2, [r7, #28]
 80073e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073e8:	f7f9 fb4c 	bl	8000a84 <__aeabi_uldivmod>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4613      	mov	r3, r2
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	3301      	adds	r3, #1
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800740e:	e002      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <HAL_RCC_GetSysClockFreq+0x204>)
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007418:	4618      	mov	r0, r3
 800741a:	3750      	adds	r7, #80	; 0x50
 800741c:	46bd      	mov	sp, r7
 800741e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007422:	bf00      	nop
 8007424:	40023800 	.word	0x40023800
 8007428:	00f42400 	.word	0x00f42400
 800742c:	007a1200 	.word	0x007a1200

08007430 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007434:	4b03      	ldr	r3, [pc, #12]	; (8007444 <HAL_RCC_GetHCLKFreq+0x14>)
 8007436:	681b      	ldr	r3, [r3, #0]
}
 8007438:	4618      	mov	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000018 	.word	0x20000018

08007448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d012      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007470:	4b69      	ldr	r3, [pc, #420]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	4a68      	ldr	r2, [pc, #416]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800747a:	6093      	str	r3, [r2, #8]
 800747c:	4b66      	ldr	r3, [pc, #408]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	4964      	ldr	r1, [pc, #400]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007486:	4313      	orrs	r3, r2
 8007488:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007492:	2301      	movs	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d017      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074a2:	4b5d      	ldr	r3, [pc, #372]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	4959      	ldr	r1, [pc, #356]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c0:	d101      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80074c2:	2301      	movs	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80074ce:	2301      	movs	r3, #1
 80074d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d017      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074de:	4b4e      	ldr	r3, [pc, #312]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	494a      	ldr	r1, [pc, #296]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074fc:	d101      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80074fe:	2301      	movs	r3, #1
 8007500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800750a:	2301      	movs	r3, #1
 800750c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800751a:	2301      	movs	r3, #1
 800751c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 808b 	beq.w	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800752c:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	4a39      	ldr	r2, [pc, #228]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007536:	6413      	str	r3, [r2, #64]	; 0x40
 8007538:	4b37      	ldr	r3, [pc, #220]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007544:	4b35      	ldr	r3, [pc, #212]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a34      	ldr	r2, [pc, #208]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800754a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800754e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007550:	f7fa ff96 	bl	8002480 <HAL_GetTick>
 8007554:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007556:	e008      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007558:	f7fa ff92 	bl	8002480 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b64      	cmp	r3, #100	; 0x64
 8007564:	d901      	bls.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e357      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800756a:	4b2c      	ldr	r3, [pc, #176]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007576:	4b28      	ldr	r3, [pc, #160]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800757e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d035      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	429a      	cmp	r2, r3
 8007592:	d02e      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007594:	4b20      	ldr	r3, [pc, #128]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800759e:	4b1e      	ldr	r3, [pc, #120]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a1d      	ldr	r2, [pc, #116]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075bc:	4b16      	ldr	r3, [pc, #88]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d114      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fa ff5a 	bl	8002480 <HAL_GetTick>
 80075cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7fa ff56 	bl	8002480 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	; 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e319      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0ee      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fe:	d111      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800760e:	400b      	ands	r3, r1
 8007610:	4901      	ldr	r1, [pc, #4]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
 8007616:	e00b      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007618:	40023800 	.word	0x40023800
 800761c:	40007000 	.word	0x40007000
 8007620:	0ffffcff 	.word	0x0ffffcff
 8007624:	4baa      	ldr	r3, [pc, #680]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4aa9      	ldr	r2, [pc, #676]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800762a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800762e:	6093      	str	r3, [r2, #8]
 8007630:	4ba7      	ldr	r3, [pc, #668]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800763c:	49a4      	ldr	r1, [pc, #656]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800763e:	4313      	orrs	r3, r2
 8007640:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b00      	cmp	r3, #0
 800764c:	d010      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800764e:	4ba0      	ldr	r3, [pc, #640]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007654:	4a9e      	ldr	r2, [pc, #632]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800765a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800765e:	4b9c      	ldr	r3, [pc, #624]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007660:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	4999      	ldr	r1, [pc, #612]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800767c:	4b94      	ldr	r3, [pc, #592]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768a:	4991      	ldr	r1, [pc, #580]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800768c:	4313      	orrs	r3, r2
 800768e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800769e:	4b8c      	ldr	r3, [pc, #560]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ac:	4988      	ldr	r1, [pc, #544]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076c0:	4b83      	ldr	r3, [pc, #524]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ce:	4980      	ldr	r1, [pc, #512]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076e2:	4b7b      	ldr	r3, [pc, #492]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f0:	4977      	ldr	r1, [pc, #476]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007704:	4b72      	ldr	r3, [pc, #456]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	f023 0203 	bic.w	r2, r3, #3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007712:	496f      	ldr	r1, [pc, #444]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007726:	4b6a      	ldr	r3, [pc, #424]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772c:	f023 020c 	bic.w	r2, r3, #12
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007734:	4966      	ldr	r1, [pc, #408]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007748:	4b61      	ldr	r3, [pc, #388]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007756:	495e      	ldr	r1, [pc, #376]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007758:	4313      	orrs	r3, r2
 800775a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800776a:	4b59      	ldr	r3, [pc, #356]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	4955      	ldr	r1, [pc, #340]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800777a:	4313      	orrs	r3, r2
 800777c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800778c:	4b50      	ldr	r3, [pc, #320]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	494d      	ldr	r1, [pc, #308]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800779c:	4313      	orrs	r3, r2
 800779e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80077ae:	4b48      	ldr	r3, [pc, #288]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	4944      	ldr	r1, [pc, #272]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80077d0:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	493c      	ldr	r1, [pc, #240]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80077f2:	4b37      	ldr	r3, [pc, #220]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007800:	4933      	ldr	r1, [pc, #204]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007814:	4b2e      	ldr	r3, [pc, #184]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007822:	492b      	ldr	r1, [pc, #172]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d011      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007836:	4b26      	ldr	r3, [pc, #152]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007844:	4922      	ldr	r1, [pc, #136]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007854:	d101      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007856:	2301      	movs	r3, #1
 8007858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007876:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007884:	4912      	ldr	r1, [pc, #72]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007898:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a8:	4909      	ldr	r1, [pc, #36]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d006      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80d9 	beq.w	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a01      	ldr	r2, [pc, #4]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078ce:	e001      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80078d0:	40023800 	.word	0x40023800
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fa fdd3 	bl	8002480 <HAL_GetTick>
 80078da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078dc:	e008      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078de:	f7fa fdcf 	bl	8002480 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b64      	cmp	r3, #100	; 0x64
 80078ea:	d901      	bls.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e194      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078f0:	4b6c      	ldr	r3, [pc, #432]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f0      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d021      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11d      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007910:	4b64      	ldr	r3, [pc, #400]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007916:	0c1b      	lsrs	r3, r3, #16
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800791e:	4b61      	ldr	r3, [pc, #388]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	0e1b      	lsrs	r3, r3, #24
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	019a      	lsls	r2, r3, #6
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	431a      	orrs	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	061b      	lsls	r3, r3, #24
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	071b      	lsls	r3, r3, #28
 8007944:	4957      	ldr	r1, [pc, #348]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007960:	d00a      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800796a:	2b00      	cmp	r3, #0
 800796c:	d02e      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007976:	d129      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007978:	4b4a      	ldr	r3, [pc, #296]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797e:	0c1b      	lsrs	r3, r3, #16
 8007980:	f003 0303 	and.w	r3, r3, #3
 8007984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007986:	4b47      	ldr	r3, [pc, #284]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800798c:	0f1b      	lsrs	r3, r3, #28
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	019a      	lsls	r2, r3, #6
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	041b      	lsls	r3, r3, #16
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	061b      	lsls	r3, r3, #24
 80079a6:	431a      	orrs	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	071b      	lsls	r3, r3, #28
 80079ac:	493d      	ldr	r1, [pc, #244]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079b4:	4b3b      	ldr	r3, [pc, #236]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ba:	f023 021f 	bic.w	r2, r3, #31
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	3b01      	subs	r3, #1
 80079c4:	4937      	ldr	r1, [pc, #220]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01d      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079d8:	4b32      	ldr	r3, [pc, #200]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079de:	0e1b      	lsrs	r3, r3, #24
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079e6:	4b2f      	ldr	r3, [pc, #188]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ec:	0f1b      	lsrs	r3, r3, #28
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	019a      	lsls	r2, r3, #6
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	041b      	lsls	r3, r3, #16
 8007a00:	431a      	orrs	r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	061b      	lsls	r3, r3, #24
 8007a06:	431a      	orrs	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	071b      	lsls	r3, r3, #28
 8007a0c:	4925      	ldr	r1, [pc, #148]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	019a      	lsls	r2, r3, #6
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	071b      	lsls	r3, r3, #28
 8007a3c:	4919      	ldr	r1, [pc, #100]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a44:	4b17      	ldr	r3, [pc, #92]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a50:	f7fa fd16 	bl	8002480 <HAL_GetTick>
 8007a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a58:	f7fa fd12 	bl	8002480 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b64      	cmp	r3, #100	; 0x64
 8007a64:	d901      	bls.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e0d7      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a6a:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f040 80cd 	bne.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8a:	f7fa fcf9 	bl	8002480 <HAL_GetTick>
 8007a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a90:	e00a      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a92:	f7fa fcf5 	bl	8002480 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b64      	cmp	r3, #100	; 0x64
 8007a9e:	d903      	bls.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e0ba      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007aa4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007aa8:	4b5e      	ldr	r3, [pc, #376]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab4:	d0ed      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d02e      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d12a      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ade:	4b51      	ldr	r3, [pc, #324]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae4:	0c1b      	lsrs	r3, r3, #16
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007aec:	4b4d      	ldr	r3, [pc, #308]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af2:	0f1b      	lsrs	r3, r3, #28
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	019a      	lsls	r2, r3, #6
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	071b      	lsls	r3, r3, #28
 8007b12:	4944      	ldr	r1, [pc, #272]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007b1a:	4b42      	ldr	r3, [pc, #264]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	493d      	ldr	r1, [pc, #244]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d022      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b48:	d11d      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b4a:	4b36      	ldr	r3, [pc, #216]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b58:	4b32      	ldr	r3, [pc, #200]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5e:	0f1b      	lsrs	r3, r3, #28
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	019a      	lsls	r2, r3, #6
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	041b      	lsls	r3, r3, #16
 8007b72:	431a      	orrs	r2, r3
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	061b      	lsls	r3, r3, #24
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	071b      	lsls	r3, r3, #28
 8007b7e:	4929      	ldr	r1, [pc, #164]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d028      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b92:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b98:	0e1b      	lsrs	r3, r3, #24
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ba0:	4b20      	ldr	r3, [pc, #128]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	f003 0303 	and.w	r3, r3, #3
 8007bac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	019a      	lsls	r2, r3, #6
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	071b      	lsls	r3, r3, #28
 8007bc6:	4917      	ldr	r1, [pc, #92]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007bce:	4b15      	ldr	r3, [pc, #84]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4911      	ldr	r1, [pc, #68]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a0e      	ldr	r2, [pc, #56]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf0:	f7fa fc46 	bl	8002480 <HAL_GetTick>
 8007bf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bf8:	f7fa fc42 	bl	8002480 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b64      	cmp	r3, #100	; 0x64
 8007c04:	d901      	bls.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e007      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c0a:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d1ef      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40023800 	.word	0x40023800

08007c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e09d      	b.n	8007d76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d108      	bne.n	8007c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4a:	d009      	beq.n	8007c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	61da      	str	r2, [r3, #28]
 8007c52:	e005      	b.n	8007c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fa f994 	bl	8001fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ca0:	d902      	bls.n	8007ca8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e002      	b.n	8007cae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007cb6:	d007      	beq.n	8007cc8 <HAL_SPI_Init+0xa0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cc0:	d002      	beq.n	8007cc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0a:	ea42 0103 	orr.w	r1, r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	0c1b      	lsrs	r3, r3, #16
 8007d24:	f003 0204 	and.w	r2, r3, #4
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d44:	ea42 0103 	orr.w	r1, r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e16c      	b.n	800807a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007db6:	7dbb      	ldrb	r3, [r7, #22]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d00d      	beq.n	8007dd8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc2:	d106      	bne.n	8007dd2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8007dcc:	7dbb      	ldrb	r3, [r7, #22]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d002      	beq.n	8007dd8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dd6:	e14b      	b.n	8008070 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007de4:	887b      	ldrh	r3, [r7, #2]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dee:	e13f      	b.n	8008070 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d003      	beq.n	8007e04 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2205      	movs	r2, #5
 8007e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	887a      	ldrh	r2, [r7, #2]
 8007e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	887a      	ldrh	r2, [r7, #2]
 8007e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	887a      	ldrh	r2, [r7, #2]
 8007e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	887a      	ldrh	r2, [r7, #2]
 8007e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007e4c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e56:	d908      	bls.n	8007e6a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e66:	605a      	str	r2, [r3, #4]
 8007e68:	e06f      	b.n	8007f4a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e78:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e84:	d126      	bne.n	8007ed4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10f      	bne.n	8007eb2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ea0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007eb0:	e010      	b.n	8007ed4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ec0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	085b      	lsrs	r3, r3, #1
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3301      	adds	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ede:	d134      	bne.n	8007f4a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007eee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d111      	bne.n	8007f24 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007f22:	e012      	b.n	8007f4a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	085b      	lsrs	r3, r3, #1
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3301      	adds	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d108      	bne.n	8007f68 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5a:	4a4a      	ldr	r2, [pc, #296]	; (8008084 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f62:	4a49      	ldr	r2, [pc, #292]	; (8008088 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007f64:	63da      	str	r2, [r3, #60]	; 0x3c
 8007f66:	e007      	b.n	8007f78 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	4a47      	ldr	r2, [pc, #284]	; (800808c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f74:	4a46      	ldr	r2, [pc, #280]	; (8008090 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007f76:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7c:	4a45      	ldr	r2, [pc, #276]	; (8008094 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007f7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f84:	2200      	movs	r2, #0
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	4619      	mov	r1, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fa0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007fa2:	f7fa ff61 	bl	8002e68 <HAL_DMA_Start_IT>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00c      	beq.n	8007fc6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb0:	f043 0210 	orr.w	r2, r3, #16
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007fc4:	e054      	b.n	8008070 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0201 	orr.w	r2, r2, #1
 8007fd4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	2200      	movs	r2, #0
 8007fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fea:	2200      	movs	r2, #0
 8007fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffe:	4619      	mov	r1, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800800c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800800e:	f7fa ff2b 	bl	8002e68 <HAL_DMA_Start_IT>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800801c:	f043 0210 	orr.w	r2, r3, #16
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008030:	e01e      	b.n	8008070 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d007      	beq.n	8008050 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800804e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0220 	orr.w	r2, r2, #32
 800805e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0202 	orr.w	r2, r2, #2
 800806e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	08008225 	.word	0x08008225
 8008088:	080080e9 	.word	0x080080e9
 800808c:	08008241 	.word	0x08008241
 8008090:	08008193 	.word	0x08008193
 8008094:	0800825d 	.word	0x0800825d

08008098 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080f6:	f7fa f9c3 	bl	8002480 <HAL_GetTick>
 80080fa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810a:	d03c      	beq.n	8008186 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0220 	bic.w	r2, r2, #32
 800811a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10d      	bne.n	8008140 <SPI_DMAReceiveCplt+0x58>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800812c:	d108      	bne.n	8008140 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0203 	bic.w	r2, r2, #3
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	e007      	b.n	8008150 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	2164      	movs	r1, #100	; 0x64
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f9bf 	bl	80084d8 <SPI_EndRxTransaction>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2220      	movs	r2, #32
 8008164:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff ffa8 	bl	80080d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008184:	e002      	b.n	800818c <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff ff86 	bl	8008098 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081a0:	f7fa f96e 	bl	8002480 <HAL_GetTick>
 80081a4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b4:	d030      	beq.n	8008218 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0220 	bic.w	r2, r2, #32
 80081c4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	2164      	movs	r1, #100	; 0x64
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fa00 	bl	80085d0 <SPI_EndRxTxTransaction>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0203 	bic.w	r2, r2, #3
 80081f0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff ff5f 	bl	80080d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008216:	e002      	b.n	800821e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7f9 fb51 	bl	80018c0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008230:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff ff3a 	bl	80080ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ff36 	bl	80080c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0203 	bic.w	r2, r2, #3
 8008278:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827e:	f043 0210 	orr.w	r2, r3, #16
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff ff20 	bl	80080d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	4613      	mov	r3, r2
 80082aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082ac:	f7fa f8e8 	bl	8002480 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4413      	add	r3, r2
 80082ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082bc:	f7fa f8e0 	bl	8002480 <HAL_GetTick>
 80082c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082c2:	4b39      	ldr	r3, [pc, #228]	; (80083a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	015b      	lsls	r3, r3, #5
 80082c8:	0d1b      	lsrs	r3, r3, #20
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	fb02 f303 	mul.w	r3, r2, r3
 80082d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082d2:	e054      	b.n	800837e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082da:	d050      	beq.n	800837e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082dc:	f7fa f8d0 	bl	8002480 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d902      	bls.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d13d      	bne.n	800836e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800830a:	d111      	bne.n	8008330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008314:	d004      	beq.n	8008320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831e:	d107      	bne.n	8008330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800832e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008338:	d10f      	bne.n	800835a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e017      	b.n	800839e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	3b01      	subs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4013      	ands	r3, r2
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	429a      	cmp	r2, r3
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	429a      	cmp	r2, r3
 800839a:	d19b      	bne.n	80082d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000018 	.word	0x20000018

080083ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08a      	sub	sp, #40	; 0x28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083be:	f7fa f85f 	bl	8002480 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	4413      	add	r3, r2
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083ce:	f7fa f857 	bl	8002480 <HAL_GetTick>
 80083d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083dc:	4b3d      	ldr	r3, [pc, #244]	; (80084d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	00da      	lsls	r2, r3, #3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	0d1b      	lsrs	r3, r3, #20
 80083ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083f4:	e060      	b.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083fc:	d107      	bne.n	800840e <SPI_WaitFifoStateUntilTimeout+0x62>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800840c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008414:	d050      	beq.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008416:	f7fa f833 	bl	8002480 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008422:	429a      	cmp	r2, r3
 8008424:	d902      	bls.n	800842c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d13d      	bne.n	80084a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800843a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008444:	d111      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800844e:	d004      	beq.n	800845a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008458:	d107      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008468:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d10f      	bne.n	8008494 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008492:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e010      	b.n	80084ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d196      	bne.n	80083f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3728      	adds	r7, #40	; 0x28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000018 	.word	0x20000018

080084d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084ec:	d111      	bne.n	8008512 <SPI_EndRxTransaction+0x3a>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f6:	d004      	beq.n	8008502 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008500:	d107      	bne.n	8008512 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008510:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800851a:	d112      	bne.n	8008542 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	2180      	movs	r1, #128	; 0x80
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff feb8 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d021      	beq.n	8008576 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008536:	f043 0220 	orr.w	r2, r3, #32
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e03d      	b.n	80085be <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008542:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <SPI_EndRxTransaction+0xf0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a21      	ldr	r2, [pc, #132]	; (80085cc <SPI_EndRxTransaction+0xf4>)
 8008548:	fba2 2303 	umull	r2, r3, r2, r3
 800854c:	0d5b      	lsrs	r3, r3, #21
 800854e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008552:	fb02 f303 	mul.w	r3, r2, r3
 8008556:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	3b01      	subs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856e:	2b80      	cmp	r3, #128	; 0x80
 8008570:	d0f2      	beq.n	8008558 <SPI_EndRxTransaction+0x80>
 8008572:	e000      	b.n	8008576 <SPI_EndRxTransaction+0x9e>
        break;
 8008574:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800857e:	d11d      	bne.n	80085bc <SPI_EndRxTransaction+0xe4>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008588:	d004      	beq.n	8008594 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008592:	d113      	bne.n	80085bc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2200      	movs	r2, #0
 800859c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff ff03 	bl	80083ac <SPI_WaitFifoStateUntilTimeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b0:	f043 0220 	orr.w	r2, r3, #32
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e000      	b.n	80085be <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000018 	.word	0x20000018
 80085cc:	165e9f81 	.word	0x165e9f81

080085d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff fedf 	bl	80083ac <SPI_WaitFifoStateUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f8:	f043 0220 	orr.w	r2, r3, #32
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e046      	b.n	8008692 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008604:	4b25      	ldr	r3, [pc, #148]	; (800869c <SPI_EndRxTxTransaction+0xcc>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a25      	ldr	r2, [pc, #148]	; (80086a0 <SPI_EndRxTxTransaction+0xd0>)
 800860a:	fba2 2303 	umull	r2, r3, r2, r3
 800860e:	0d5b      	lsrs	r3, r3, #21
 8008610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008614:	fb02 f303 	mul.w	r3, r2, r3
 8008618:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008622:	d112      	bne.n	800864a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	2180      	movs	r1, #128	; 0x80
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff fe34 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d016      	beq.n	8008668 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e023      	b.n	8008692 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3b01      	subs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d0f2      	beq.n	800864a <SPI_EndRxTxTransaction+0x7a>
 8008664:	e000      	b.n	8008668 <SPI_EndRxTxTransaction+0x98>
        break;
 8008666:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2200      	movs	r2, #0
 8008670:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fe99 	bl	80083ac <SPI_WaitFifoStateUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008684:	f043 0220 	orr.w	r2, r3, #32
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e000      	b.n	8008692 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000018 	.word	0x20000018
 80086a0:	165e9f81 	.word	0x165e9f81

080086a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e049      	b.n	800874a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f9 fd18 	bl	8002100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f000 fe0a 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d001      	beq.n	800876c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e054      	b.n	8008816 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0201 	orr.w	r2, r2, #1
 8008782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a26      	ldr	r2, [pc, #152]	; (8008824 <HAL_TIM_Base_Start_IT+0xd0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d022      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d01d      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a22      	ldr	r2, [pc, #136]	; (8008828 <HAL_TIM_Base_Start_IT+0xd4>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d018      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a21      	ldr	r2, [pc, #132]	; (800882c <HAL_TIM_Base_Start_IT+0xd8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d013      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1f      	ldr	r2, [pc, #124]	; (8008830 <HAL_TIM_Base_Start_IT+0xdc>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00e      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a1e      	ldr	r2, [pc, #120]	; (8008834 <HAL_TIM_Base_Start_IT+0xe0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d009      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a1c      	ldr	r2, [pc, #112]	; (8008838 <HAL_TIM_Base_Start_IT+0xe4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x80>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a1b      	ldr	r2, [pc, #108]	; (800883c <HAL_TIM_Base_Start_IT+0xe8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d115      	bne.n	8008800 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	4b19      	ldr	r3, [pc, #100]	; (8008840 <HAL_TIM_Base_Start_IT+0xec>)
 80087dc:	4013      	ands	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b06      	cmp	r3, #6
 80087e4:	d015      	beq.n	8008812 <HAL_TIM_Base_Start_IT+0xbe>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ec:	d011      	beq.n	8008812 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0201 	orr.w	r2, r2, #1
 80087fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fe:	e008      	b.n	8008812 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0201 	orr.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e000      	b.n	8008814 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40010000 	.word	0x40010000
 8008828:	40000400 	.word	0x40000400
 800882c:	40000800 	.word	0x40000800
 8008830:	40000c00 	.word	0x40000c00
 8008834:	40010400 	.word	0x40010400
 8008838:	40014000 	.word	0x40014000
 800883c:	40001800 	.word	0x40001800
 8008840:	00010007 	.word	0x00010007

08008844 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e049      	b.n	80088ea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f841 	bl	80088f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f000 fd3a 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e049      	b.n	80089ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f841 	bl	80089b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3304      	adds	r3, #4
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f000 fcd9 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <HAL_TIM_PWM_Start+0x24>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e03c      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d109      	bne.n	8008a06 <HAL_TIM_PWM_Start+0x3e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e02f      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d109      	bne.n	8008a20 <HAL_TIM_PWM_Start+0x58>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	e022      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b0c      	cmp	r3, #12
 8008a24:	d109      	bne.n	8008a3a <HAL_TIM_PWM_Start+0x72>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	bf14      	ite	ne
 8008a32:	2301      	movne	r3, #1
 8008a34:	2300      	moveq	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	e015      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d109      	bne.n	8008a54 <HAL_TIM_PWM_Start+0x8c>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	e008      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	bf14      	ite	ne
 8008a60:	2301      	movne	r3, #1
 8008a62:	2300      	moveq	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e092      	b.n	8008b94 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <HAL_TIM_PWM_Start+0xb6>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a7c:	e023      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d104      	bne.n	8008a8e <HAL_TIM_PWM_Start+0xc6>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a8c:	e01b      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d104      	bne.n	8008a9e <HAL_TIM_PWM_Start+0xd6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a9c:	e013      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b0c      	cmp	r3, #12
 8008aa2:	d104      	bne.n	8008aae <HAL_TIM_PWM_Start+0xe6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aac:	e00b      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	d104      	bne.n	8008abe <HAL_TIM_PWM_Start+0xf6>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008abc:	e003      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2201      	movs	r2, #1
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 ffac 	bl	8009a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a30      	ldr	r2, [pc, #192]	; (8008b9c <HAL_TIM_PWM_Start+0x1d4>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d004      	beq.n	8008ae8 <HAL_TIM_PWM_Start+0x120>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a2f      	ldr	r2, [pc, #188]	; (8008ba0 <HAL_TIM_PWM_Start+0x1d8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d101      	bne.n	8008aec <HAL_TIM_PWM_Start+0x124>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <HAL_TIM_PWM_Start+0x126>
 8008aec:	2300      	movs	r3, #0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a25      	ldr	r2, [pc, #148]	; (8008b9c <HAL_TIM_PWM_Start+0x1d4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d022      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b14:	d01d      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a22      	ldr	r2, [pc, #136]	; (8008ba4 <HAL_TIM_PWM_Start+0x1dc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a20      	ldr	r2, [pc, #128]	; (8008ba8 <HAL_TIM_PWM_Start+0x1e0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1f      	ldr	r2, [pc, #124]	; (8008bac <HAL_TIM_PWM_Start+0x1e4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <HAL_TIM_PWM_Start+0x1d8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1b      	ldr	r2, [pc, #108]	; (8008bb0 <HAL_TIM_PWM_Start+0x1e8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x18a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <HAL_TIM_PWM_Start+0x1ec>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d115      	bne.n	8008b7e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	4b17      	ldr	r3, [pc, #92]	; (8008bb8 <HAL_TIM_PWM_Start+0x1f0>)
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b06      	cmp	r3, #6
 8008b62:	d015      	beq.n	8008b90 <HAL_TIM_PWM_Start+0x1c8>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6a:	d011      	beq.n	8008b90 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0201 	orr.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7c:	e008      	b.n	8008b90 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0201 	orr.w	r2, r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e000      	b.n	8008b92 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40010400 	.word	0x40010400
 8008ba4:	40000400 	.word	0x40000400
 8008ba8:	40000800 	.word	0x40000800
 8008bac:	40000c00 	.word	0x40000c00
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40001800 	.word	0x40001800
 8008bb8:	00010007 	.word	0x00010007

08008bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d122      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d11b      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0202 	mvn.w	r2, #2
 8008be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fb5e 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008c04:	e005      	b.n	8008c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fb50 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fb61 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d122      	bne.n	8008c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d11b      	bne.n	8008c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0204 	mvn.w	r2, #4
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fb34 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fb26 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fb37 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d122      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d11b      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0208 	mvn.w	r2, #8
 8008c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2204      	movs	r2, #4
 8008c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fb0a 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008cac:	e005      	b.n	8008cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fafc 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fb0d 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b10      	cmp	r3, #16
 8008ccc:	d122      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d11b      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0210 	mvn.w	r2, #16
 8008ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2208      	movs	r2, #8
 8008cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fae0 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008d00:	e005      	b.n	8008d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fad2 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fae3 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d10e      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d107      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0201 	mvn.w	r2, #1
 8008d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f8 fe44 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4a:	2b80      	cmp	r3, #128	; 0x80
 8008d4c:	d10e      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d58:	2b80      	cmp	r3, #128	; 0x80
 8008d5a:	d107      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 ff9c 	bl	8009ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7a:	d10e      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	d107      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 ff8f 	bl	8009cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da4:	2b40      	cmp	r3, #64	; 0x40
 8008da6:	d10e      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d107      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa91 	bl	80092e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d10e      	bne.n	8008df2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d107      	bne.n	8008df2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f06f 0220 	mvn.w	r2, #32
 8008dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 ff4f 	bl	8009c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e066      	b.n	8008ee8 <HAL_TIM_OC_ConfigChannel+0xec>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b14      	cmp	r3, #20
 8008e26:	d857      	bhi.n	8008ed8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008e28:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e85 	.word	0x08008e85
 8008e34:	08008ed9 	.word	0x08008ed9
 8008e38:	08008ed9 	.word	0x08008ed9
 8008e3c:	08008ed9 	.word	0x08008ed9
 8008e40:	08008e93 	.word	0x08008e93
 8008e44:	08008ed9 	.word	0x08008ed9
 8008e48:	08008ed9 	.word	0x08008ed9
 8008e4c:	08008ed9 	.word	0x08008ed9
 8008e50:	08008ea1 	.word	0x08008ea1
 8008e54:	08008ed9 	.word	0x08008ed9
 8008e58:	08008ed9 	.word	0x08008ed9
 8008e5c:	08008ed9 	.word	0x08008ed9
 8008e60:	08008eaf 	.word	0x08008eaf
 8008e64:	08008ed9 	.word	0x08008ed9
 8008e68:	08008ed9 	.word	0x08008ed9
 8008e6c:	08008ed9 	.word	0x08008ed9
 8008e70:	08008ebd 	.word	0x08008ebd
 8008e74:	08008ed9 	.word	0x08008ed9
 8008e78:	08008ed9 	.word	0x08008ed9
 8008e7c:	08008ed9 	.word	0x08008ed9
 8008e80:	08008ecb 	.word	0x08008ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fad6 	bl	800943c <TIM_OC1_SetConfig>
      break;
 8008e90:	e025      	b.n	8008ede <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fb41 	bl	8009520 <TIM_OC2_SetConfig>
      break;
 8008e9e:	e01e      	b.n	8008ede <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fbb2 	bl	8009610 <TIM_OC3_SetConfig>
      break;
 8008eac:	e017      	b.n	8008ede <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fc21 	bl	80096fc <TIM_OC4_SetConfig>
      break;
 8008eba:	e010      	b.n	8008ede <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fc72 	bl	80097ac <TIM_OC5_SetConfig>
      break;
 8008ec8:	e009      	b.n	8008ede <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fcbd 	bl	8009850 <TIM_OC6_SetConfig>
      break;
 8008ed6:	e002      	b.n	8008ede <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
      break;
 8008edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e0ff      	b.n	800910e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b14      	cmp	r3, #20
 8008f1a:	f200 80f0 	bhi.w	80090fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f1e:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008f79 	.word	0x08008f79
 8008f28:	080090ff 	.word	0x080090ff
 8008f2c:	080090ff 	.word	0x080090ff
 8008f30:	080090ff 	.word	0x080090ff
 8008f34:	08008fb9 	.word	0x08008fb9
 8008f38:	080090ff 	.word	0x080090ff
 8008f3c:	080090ff 	.word	0x080090ff
 8008f40:	080090ff 	.word	0x080090ff
 8008f44:	08008ffb 	.word	0x08008ffb
 8008f48:	080090ff 	.word	0x080090ff
 8008f4c:	080090ff 	.word	0x080090ff
 8008f50:	080090ff 	.word	0x080090ff
 8008f54:	0800903b 	.word	0x0800903b
 8008f58:	080090ff 	.word	0x080090ff
 8008f5c:	080090ff 	.word	0x080090ff
 8008f60:	080090ff 	.word	0x080090ff
 8008f64:	0800907d 	.word	0x0800907d
 8008f68:	080090ff 	.word	0x080090ff
 8008f6c:	080090ff 	.word	0x080090ff
 8008f70:	080090ff 	.word	0x080090ff
 8008f74:	080090bd 	.word	0x080090bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fa5c 	bl	800943c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0208 	orr.w	r2, r2, #8
 8008f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0204 	bic.w	r2, r2, #4
 8008fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6999      	ldr	r1, [r3, #24]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	619a      	str	r2, [r3, #24]
      break;
 8008fb6:	e0a5      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 faae 	bl	8009520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6999      	ldr	r1, [r3, #24]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	021a      	lsls	r2, r3, #8
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	619a      	str	r2, [r3, #24]
      break;
 8008ff8:	e084      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fb05 	bl	8009610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0208 	orr.w	r2, r2, #8
 8009014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0204 	bic.w	r2, r2, #4
 8009024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69d9      	ldr	r1, [r3, #28]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	691a      	ldr	r2, [r3, #16]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	61da      	str	r2, [r3, #28]
      break;
 8009038:	e064      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fb5b 	bl	80096fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69d9      	ldr	r1, [r3, #28]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	021a      	lsls	r2, r3, #8
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	61da      	str	r2, [r3, #28]
      break;
 800907a:	e043      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fb92 	bl	80097ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0208 	orr.w	r2, r2, #8
 8009096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f022 0204 	bic.w	r2, r2, #4
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	691a      	ldr	r2, [r3, #16]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090ba:	e023      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fbc4 	bl	8009850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	021a      	lsls	r2, r3, #8
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	430a      	orrs	r2, r1
 80090fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090fc:	e002      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	75fb      	strb	r3, [r7, #23]
      break;
 8009102:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800910c:	7dfb      	ldrb	r3, [r7, #23]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop

08009118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_TIM_ConfigClockSource+0x1c>
 8009130:	2302      	movs	r3, #2
 8009132:	e0b4      	b.n	800929e <HAL_TIM_ConfigClockSource+0x186>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	4b56      	ldr	r3, [pc, #344]	; (80092a8 <HAL_TIM_ConfigClockSource+0x190>)
 8009150:	4013      	ands	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800915a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800916c:	d03e      	beq.n	80091ec <HAL_TIM_ConfigClockSource+0xd4>
 800916e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009172:	f200 8087 	bhi.w	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 8009176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917a:	f000 8086 	beq.w	800928a <HAL_TIM_ConfigClockSource+0x172>
 800917e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009182:	d87f      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 8009184:	2b70      	cmp	r3, #112	; 0x70
 8009186:	d01a      	beq.n	80091be <HAL_TIM_ConfigClockSource+0xa6>
 8009188:	2b70      	cmp	r3, #112	; 0x70
 800918a:	d87b      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 800918c:	2b60      	cmp	r3, #96	; 0x60
 800918e:	d050      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x11a>
 8009190:	2b60      	cmp	r3, #96	; 0x60
 8009192:	d877      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 8009194:	2b50      	cmp	r3, #80	; 0x50
 8009196:	d03c      	beq.n	8009212 <HAL_TIM_ConfigClockSource+0xfa>
 8009198:	2b50      	cmp	r3, #80	; 0x50
 800919a:	d873      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d058      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x13a>
 80091a0:	2b40      	cmp	r3, #64	; 0x40
 80091a2:	d86f      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 80091a4:	2b30      	cmp	r3, #48	; 0x30
 80091a6:	d064      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091a8:	2b30      	cmp	r3, #48	; 0x30
 80091aa:	d86b      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d060      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d867      	bhi.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05c      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091b8:	2b10      	cmp	r3, #16
 80091ba:	d05a      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x15a>
 80091bc:	e062      	b.n	8009284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091ce:	f000 fc0d 	bl	80099ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	609a      	str	r2, [r3, #8]
      break;
 80091ea:	e04f      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091fc:	f000 fbf6 	bl	80099ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800920e:	609a      	str	r2, [r3, #8]
      break;
 8009210:	e03c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800921e:	461a      	mov	r2, r3
 8009220:	f000 fb6a 	bl	80098f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2150      	movs	r1, #80	; 0x50
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fbc3 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8009230:	e02c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800923e:	461a      	mov	r2, r3
 8009240:	f000 fb89 	bl	8009956 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2160      	movs	r1, #96	; 0x60
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fbb3 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8009250:	e01c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800925e:	461a      	mov	r2, r3
 8009260:	f000 fb4a 	bl	80098f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2140      	movs	r1, #64	; 0x40
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fba3 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8009270:	e00c      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f000 fb9a 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8009282:	e003      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
      break;
 8009288:	e000      	b.n	800928c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800928a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	fffeff88 	.word	0xfffeff88

080092ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a40      	ldr	r2, [pc, #256]	; (8009410 <TIM_Base_SetConfig+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d013      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931a:	d00f      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a3d      	ldr	r2, [pc, #244]	; (8009414 <TIM_Base_SetConfig+0x118>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00b      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a3c      	ldr	r2, [pc, #240]	; (8009418 <TIM_Base_SetConfig+0x11c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d007      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a3b      	ldr	r2, [pc, #236]	; (800941c <TIM_Base_SetConfig+0x120>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a3a      	ldr	r2, [pc, #232]	; (8009420 <TIM_Base_SetConfig+0x124>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d108      	bne.n	800934e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2f      	ldr	r2, [pc, #188]	; (8009410 <TIM_Base_SetConfig+0x114>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d02b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935c:	d027      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2c      	ldr	r2, [pc, #176]	; (8009414 <TIM_Base_SetConfig+0x118>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d023      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <TIM_Base_SetConfig+0x11c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01f      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a2a      	ldr	r2, [pc, #168]	; (800941c <TIM_Base_SetConfig+0x120>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a29      	ldr	r2, [pc, #164]	; (8009420 <TIM_Base_SetConfig+0x124>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d017      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a28      	ldr	r2, [pc, #160]	; (8009424 <TIM_Base_SetConfig+0x128>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a27      	ldr	r2, [pc, #156]	; (8009428 <TIM_Base_SetConfig+0x12c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00f      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a26      	ldr	r2, [pc, #152]	; (800942c <TIM_Base_SetConfig+0x130>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a25      	ldr	r2, [pc, #148]	; (8009430 <TIM_Base_SetConfig+0x134>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d007      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a24      	ldr	r2, [pc, #144]	; (8009434 <TIM_Base_SetConfig+0x138>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d003      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a23      	ldr	r2, [pc, #140]	; (8009438 <TIM_Base_SetConfig+0x13c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d108      	bne.n	80093c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <TIM_Base_SetConfig+0x114>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d003      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a0c      	ldr	r2, [pc, #48]	; (8009420 <TIM_Base_SetConfig+0x124>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d103      	bne.n	80093fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	615a      	str	r2, [r3, #20]
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40010000 	.word	0x40010000
 8009414:	40000400 	.word	0x40000400
 8009418:	40000800 	.word	0x40000800
 800941c:	40000c00 	.word	0x40000c00
 8009420:	40010400 	.word	0x40010400
 8009424:	40014000 	.word	0x40014000
 8009428:	40014400 	.word	0x40014400
 800942c:	40014800 	.word	0x40014800
 8009430:	40001800 	.word	0x40001800
 8009434:	40001c00 	.word	0x40001c00
 8009438:	40002000 	.word	0x40002000

0800943c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <TIM_OC1_SetConfig+0xd8>)
 8009468:	4013      	ands	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 0302 	bic.w	r3, r3, #2
 8009484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a21      	ldr	r2, [pc, #132]	; (8009518 <TIM_OC1_SetConfig+0xdc>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC1_SetConfig+0x64>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a20      	ldr	r2, [pc, #128]	; (800951c <TIM_OC1_SetConfig+0xe0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10c      	bne.n	80094ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 0308 	bic.w	r3, r3, #8
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f023 0304 	bic.w	r3, r3, #4
 80094b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <TIM_OC1_SetConfig+0xdc>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <TIM_OC1_SetConfig+0x8e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a15      	ldr	r2, [pc, #84]	; (800951c <TIM_OC1_SetConfig+0xe0>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d111      	bne.n	80094ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	621a      	str	r2, [r3, #32]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	fffeff8f 	.word	0xfffeff8f
 8009518:	40010000 	.word	0x40010000
 800951c:	40010400 	.word	0x40010400

08009520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0210 	bic.w	r2, r3, #16
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <TIM_OC2_SetConfig+0xe4>)
 800954c:	4013      	ands	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f023 0320 	bic.w	r3, r3, #32
 800956a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a23      	ldr	r2, [pc, #140]	; (8009608 <TIM_OC2_SetConfig+0xe8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d003      	beq.n	8009588 <TIM_OC2_SetConfig+0x68>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a22      	ldr	r2, [pc, #136]	; (800960c <TIM_OC2_SetConfig+0xec>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d10d      	bne.n	80095a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800958e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a18      	ldr	r2, [pc, #96]	; (8009608 <TIM_OC2_SetConfig+0xe8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_OC2_SetConfig+0x94>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a17      	ldr	r2, [pc, #92]	; (800960c <TIM_OC2_SetConfig+0xec>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d113      	bne.n	80095dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	621a      	str	r2, [r3, #32]
}
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	feff8fff 	.word	0xfeff8fff
 8009608:	40010000 	.word	0x40010000
 800960c:	40010400 	.word	0x40010400

08009610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4b2d      	ldr	r3, [pc, #180]	; (80096f0 <TIM_OC3_SetConfig+0xe0>)
 800963c:	4013      	ands	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a22      	ldr	r2, [pc, #136]	; (80096f4 <TIM_OC3_SetConfig+0xe4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d003      	beq.n	8009676 <TIM_OC3_SetConfig+0x66>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a21      	ldr	r2, [pc, #132]	; (80096f8 <TIM_OC3_SetConfig+0xe8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d10d      	bne.n	8009692 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800967c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a17      	ldr	r2, [pc, #92]	; (80096f4 <TIM_OC3_SetConfig+0xe4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d003      	beq.n	80096a2 <TIM_OC3_SetConfig+0x92>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a16      	ldr	r2, [pc, #88]	; (80096f8 <TIM_OC3_SetConfig+0xe8>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d113      	bne.n	80096ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	621a      	str	r2, [r3, #32]
}
 80096e4:	bf00      	nop
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	fffeff8f 	.word	0xfffeff8f
 80096f4:	40010000 	.word	0x40010000
 80096f8:	40010400 	.word	0x40010400

080096fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4b1e      	ldr	r3, [pc, #120]	; (80097a0 <TIM_OC4_SetConfig+0xa4>)
 8009728:	4013      	ands	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	021b      	lsls	r3, r3, #8
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	031b      	lsls	r3, r3, #12
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a13      	ldr	r2, [pc, #76]	; (80097a4 <TIM_OC4_SetConfig+0xa8>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d003      	beq.n	8009764 <TIM_OC4_SetConfig+0x68>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a12      	ldr	r2, [pc, #72]	; (80097a8 <TIM_OC4_SetConfig+0xac>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d109      	bne.n	8009778 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800976a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	019b      	lsls	r3, r3, #6
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	4313      	orrs	r3, r2
 8009776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	621a      	str	r2, [r3, #32]
}
 8009792:	bf00      	nop
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	feff8fff 	.word	0xfeff8fff
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400

080097ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4b1b      	ldr	r3, [pc, #108]	; (8009844 <TIM_OC5_SetConfig+0x98>)
 80097d8:	4013      	ands	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80097ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	041b      	lsls	r3, r3, #16
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a12      	ldr	r2, [pc, #72]	; (8009848 <TIM_OC5_SetConfig+0x9c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d003      	beq.n	800980a <TIM_OC5_SetConfig+0x5e>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a11      	ldr	r2, [pc, #68]	; (800984c <TIM_OC5_SetConfig+0xa0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d109      	bne.n	800981e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009810:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	4313      	orrs	r3, r2
 800981c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	621a      	str	r2, [r3, #32]
}
 8009838:	bf00      	nop
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	fffeff8f 	.word	0xfffeff8f
 8009848:	40010000 	.word	0x40010000
 800984c:	40010400 	.word	0x40010400

08009850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4b1c      	ldr	r3, [pc, #112]	; (80098ec <TIM_OC6_SetConfig+0x9c>)
 800987c:	4013      	ands	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	051b      	lsls	r3, r3, #20
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4313      	orrs	r3, r2
 800989e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a13      	ldr	r2, [pc, #76]	; (80098f0 <TIM_OC6_SetConfig+0xa0>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC6_SetConfig+0x60>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <TIM_OC6_SetConfig+0xa4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d109      	bne.n	80098c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	029b      	lsls	r3, r3, #10
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	621a      	str	r2, [r3, #32]
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	feff8fff 	.word	0xfeff8fff
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40010400 	.word	0x40010400

080098f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f023 0201 	bic.w	r2, r3, #1
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	011b      	lsls	r3, r3, #4
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	4313      	orrs	r3, r2
 800992c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f023 030a 	bic.w	r3, r3, #10
 8009934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	621a      	str	r2, [r3, #32]
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009956:	b480      	push	{r7}
 8009958:	b087      	sub	sp, #28
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	f023 0210 	bic.w	r2, r3, #16
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	031b      	lsls	r3, r3, #12
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	621a      	str	r2, [r3, #32]
}
 80099aa:	bf00      	nop
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	f043 0307 	orr.w	r3, r3, #7
 80099d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	609a      	str	r2, [r3, #8]
}
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	021a      	lsls	r2, r3, #8
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	609a      	str	r2, [r3, #8]
}
 8009a20:	bf00      	nop
 8009a22:	371c      	adds	r7, #28
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f003 031f 	and.w	r3, r3, #31
 8009a3e:	2201      	movs	r2, #1
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a1a      	ldr	r2, [r3, #32]
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	43db      	mvns	r3, r3
 8009a4e:	401a      	ands	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	fa01 f303 	lsl.w	r3, r1, r3
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	621a      	str	r2, [r3, #32]
}
 8009a6a:	bf00      	nop
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
	...

08009a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e06d      	b.n	8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a30      	ldr	r2, [pc, #192]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a2f      	ldr	r2, [pc, #188]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d108      	bne.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009aca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009adc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a20      	ldr	r2, [pc, #128]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d022      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b02:	d01d      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d018      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d013      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1a      	ldr	r2, [pc, #104]	; (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d00e      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a15      	ldr	r2, [pc, #84]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a15      	ldr	r2, [pc, #84]	; (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10c      	bne.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40010400 	.word	0x40010400
 8009b80:	40000400 	.word	0x40000400
 8009b84:	40000800 	.word	0x40000800
 8009b88:	40000c00 	.word	0x40000c00
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40001800 	.word	0x40001800

08009b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e065      	b.n	8009c7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	041b      	lsls	r3, r3, #16
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a16      	ldr	r2, [pc, #88]	; (8009c88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d004      	beq.n	8009c3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a14      	ldr	r2, [pc, #80]	; (8009c8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d115      	bne.n	8009c6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	051b      	lsls	r3, r3, #20
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	40010000 	.word	0x40010000
 8009c8c:	40010400 	.word	0x40010400

08009c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ccc:	b084      	sub	sp, #16
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	f107 001c 	add.w	r0, r7, #28
 8009cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d120      	bne.n	8009d26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <USB_CoreInit+0xac>)
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d105      	bne.n	8009d1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 fbee 	bl	800b4fc <USB_CoreReset>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
 8009d24:	e010      	b.n	8009d48 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fbe2 	bl	800b4fc <USB_CoreReset>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d10b      	bne.n	8009d66 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f043 0206 	orr.w	r2, r3, #6
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f043 0220 	orr.w	r2, r3, #32
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d72:	b004      	add	sp, #16
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	ffbdffbf 	.word	0xffbdffbf

08009d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	4613      	mov	r3, r2
 8009d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d8a:	79fb      	ldrb	r3, [r7, #7]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d165      	bne.n	8009e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4a41      	ldr	r2, [pc, #260]	; (8009e98 <USB_SetTurnaroundTime+0x11c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d906      	bls.n	8009da6 <USB_SetTurnaroundTime+0x2a>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4a40      	ldr	r2, [pc, #256]	; (8009e9c <USB_SetTurnaroundTime+0x120>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d202      	bcs.n	8009da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009da0:	230f      	movs	r3, #15
 8009da2:	617b      	str	r3, [r7, #20]
 8009da4:	e062      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4a3c      	ldr	r2, [pc, #240]	; (8009e9c <USB_SetTurnaroundTime+0x120>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d306      	bcc.n	8009dbc <USB_SetTurnaroundTime+0x40>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4a3b      	ldr	r2, [pc, #236]	; (8009ea0 <USB_SetTurnaroundTime+0x124>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d202      	bcs.n	8009dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009db6:	230e      	movs	r3, #14
 8009db8:	617b      	str	r3, [r7, #20]
 8009dba:	e057      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4a38      	ldr	r2, [pc, #224]	; (8009ea0 <USB_SetTurnaroundTime+0x124>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d306      	bcc.n	8009dd2 <USB_SetTurnaroundTime+0x56>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4a37      	ldr	r2, [pc, #220]	; (8009ea4 <USB_SetTurnaroundTime+0x128>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d202      	bcs.n	8009dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009dcc:	230d      	movs	r3, #13
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	e04c      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4a33      	ldr	r2, [pc, #204]	; (8009ea4 <USB_SetTurnaroundTime+0x128>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d306      	bcc.n	8009de8 <USB_SetTurnaroundTime+0x6c>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	4a32      	ldr	r2, [pc, #200]	; (8009ea8 <USB_SetTurnaroundTime+0x12c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d802      	bhi.n	8009de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009de2:	230c      	movs	r3, #12
 8009de4:	617b      	str	r3, [r7, #20]
 8009de6:	e041      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4a2f      	ldr	r2, [pc, #188]	; (8009ea8 <USB_SetTurnaroundTime+0x12c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d906      	bls.n	8009dfe <USB_SetTurnaroundTime+0x82>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4a2e      	ldr	r2, [pc, #184]	; (8009eac <USB_SetTurnaroundTime+0x130>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d802      	bhi.n	8009dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009df8:	230b      	movs	r3, #11
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e036      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	4a2a      	ldr	r2, [pc, #168]	; (8009eac <USB_SetTurnaroundTime+0x130>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d906      	bls.n	8009e14 <USB_SetTurnaroundTime+0x98>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	4a29      	ldr	r2, [pc, #164]	; (8009eb0 <USB_SetTurnaroundTime+0x134>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d802      	bhi.n	8009e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009e0e:	230a      	movs	r3, #10
 8009e10:	617b      	str	r3, [r7, #20]
 8009e12:	e02b      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4a26      	ldr	r2, [pc, #152]	; (8009eb0 <USB_SetTurnaroundTime+0x134>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d906      	bls.n	8009e2a <USB_SetTurnaroundTime+0xae>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	4a25      	ldr	r2, [pc, #148]	; (8009eb4 <USB_SetTurnaroundTime+0x138>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d202      	bcs.n	8009e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009e24:	2309      	movs	r3, #9
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	e020      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	4a21      	ldr	r2, [pc, #132]	; (8009eb4 <USB_SetTurnaroundTime+0x138>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d306      	bcc.n	8009e40 <USB_SetTurnaroundTime+0xc4>
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4a20      	ldr	r2, [pc, #128]	; (8009eb8 <USB_SetTurnaroundTime+0x13c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d802      	bhi.n	8009e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009e3a:	2308      	movs	r3, #8
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	e015      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <USB_SetTurnaroundTime+0x13c>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d906      	bls.n	8009e56 <USB_SetTurnaroundTime+0xda>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	4a1c      	ldr	r2, [pc, #112]	; (8009ebc <USB_SetTurnaroundTime+0x140>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d202      	bcs.n	8009e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009e50:	2307      	movs	r3, #7
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	e00a      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009e56:	2306      	movs	r3, #6
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	e007      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009e62:	2309      	movs	r3, #9
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	e001      	b.n	8009e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e68:	2309      	movs	r3, #9
 8009e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	029b      	lsls	r3, r3, #10
 8009e80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009e84:	431a      	orrs	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	371c      	adds	r7, #28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	00d8acbf 	.word	0x00d8acbf
 8009e9c:	00e4e1c0 	.word	0x00e4e1c0
 8009ea0:	00f42400 	.word	0x00f42400
 8009ea4:	01067380 	.word	0x01067380
 8009ea8:	011a499f 	.word	0x011a499f
 8009eac:	01312cff 	.word	0x01312cff
 8009eb0:	014ca43f 	.word	0x014ca43f
 8009eb4:	016e3600 	.word	0x016e3600
 8009eb8:	01a6ab1f 	.word	0x01a6ab1f
 8009ebc:	01e84800 	.word	0x01e84800

08009ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f043 0201 	orr.w	r2, r3, #1
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f023 0201 	bic.w	r2, r3, #1
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d115      	bne.n	8009f52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f32:	2001      	movs	r0, #1
 8009f34:	f7f8 fab0 	bl	8002498 <HAL_Delay>
      ms++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fa4b 	bl	800b3da <USB_GetMode>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d01e      	beq.n	8009f88 <USB_SetCurrentMode+0x84>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b31      	cmp	r3, #49	; 0x31
 8009f4e:	d9f0      	bls.n	8009f32 <USB_SetCurrentMode+0x2e>
 8009f50:	e01a      	b.n	8009f88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d115      	bne.n	8009f84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f64:	2001      	movs	r0, #1
 8009f66:	f7f8 fa97 	bl	8002498 <HAL_Delay>
      ms++;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fa32 	bl	800b3da <USB_GetMode>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <USB_SetCurrentMode+0x84>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b31      	cmp	r3, #49	; 0x31
 8009f80:	d9f0      	bls.n	8009f64 <USB_SetCurrentMode+0x60>
 8009f82:	e001      	b.n	8009f88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e005      	b.n	8009f94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b32      	cmp	r3, #50	; 0x32
 8009f8c:	d101      	bne.n	8009f92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	e009      	b.n	8009fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	3340      	adds	r3, #64	; 0x40
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b0e      	cmp	r3, #14
 8009fd4:	d9f2      	bls.n	8009fbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d11c      	bne.n	800a016 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fea:	f043 0302 	orr.w	r3, r3, #2
 8009fee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	e005      	b.n	800a022 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a028:	461a      	mov	r2, r3
 800a02a:	2300      	movs	r3, #0
 800a02c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a034:	4619      	mov	r1, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03c:	461a      	mov	r2, r3
 800a03e:	680b      	ldr	r3, [r1, #0]
 800a040:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	2b01      	cmp	r3, #1
 800a046:	d10c      	bne.n	800a062 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a04e:	2100      	movs	r1, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f965 	bl	800a320 <USB_SetDevSpeed>
 800a056:	e008      	b.n	800a06a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a058:	2101      	movs	r1, #1
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f960 	bl	800a320 <USB_SetDevSpeed>
 800a060:	e003      	b.n	800a06a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a062:	2103      	movs	r1, #3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f95b 	bl	800a320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a06a:	2110      	movs	r1, #16
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f8f3 	bl	800a258 <USB_FlushTxFifo>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f91f 	bl	800a2c0 <USB_FlushRxFifo>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a092:	461a      	mov	r2, r3
 800a094:	2300      	movs	r3, #0
 800a096:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09e:	461a      	mov	r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	e043      	b.n	800a13e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0cc:	d118      	bne.n	800a100 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	e013      	b.n	800a112 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	e008      	b.n	800a112 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	461a      	mov	r2, r3
 800a10e:	2300      	movs	r3, #0
 800a110:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	461a      	mov	r2, r3
 800a120:	2300      	movs	r3, #0
 800a122:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a130:	461a      	mov	r2, r3
 800a132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	3301      	adds	r3, #1
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	d3b7      	bcc.n	800a0b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a146:	2300      	movs	r3, #0
 800a148:	613b      	str	r3, [r7, #16]
 800a14a:	e043      	b.n	800a1d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a15e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a162:	d118      	bne.n	800a196 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a176:	461a      	mov	r2, r3
 800a178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	e013      	b.n	800a1a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18c:	461a      	mov	r2, r3
 800a18e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	e008      	b.n	800a1a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d3b7      	bcc.n	800a14c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a1fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	2b00      	cmp	r3, #0
 800a202:	d105      	bne.n	800a210 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	f043 0210 	orr.w	r2, r3, #16
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	699a      	ldr	r2, [r3, #24]
 800a214:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <USB_DevInit+0x2b4>)
 800a216:	4313      	orrs	r3, r2
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d005      	beq.n	800a22e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f043 0208 	orr.w	r2, r3, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d105      	bne.n	800a240 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <USB_DevInit+0x2b8>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a24c:	b004      	add	sp, #16
 800a24e:	4770      	bx	lr
 800a250:	803c3800 	.word	0x803c3800
 800a254:	40000004 	.word	0x40000004

0800a258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3301      	adds	r3, #1
 800a26a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4a13      	ldr	r2, [pc, #76]	; (800a2bc <USB_FlushTxFifo+0x64>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d901      	bls.n	800a278 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e01b      	b.n	800a2b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	daf2      	bge.n	800a266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	019b      	lsls	r3, r3, #6
 800a288:	f043 0220 	orr.w	r2, r3, #32
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3301      	adds	r3, #1
 800a294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <USB_FlushTxFifo+0x64>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d901      	bls.n	800a2a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e006      	b.n	800a2b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d0f0      	beq.n	800a290 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	00030d40 	.word	0x00030d40

0800a2c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	4a11      	ldr	r2, [pc, #68]	; (800a31c <USB_FlushRxFifo+0x5c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d901      	bls.n	800a2de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e018      	b.n	800a310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	daf2      	bge.n	800a2cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2210      	movs	r2, #16
 800a2ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4a08      	ldr	r2, [pc, #32]	; (800a31c <USB_FlushRxFifo+0x5c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d901      	bls.n	800a302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e006      	b.n	800a310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f003 0310 	and.w	r3, r3, #16
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	d0f0      	beq.n	800a2f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	00030d40 	.word	0x00030d40

0800a320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a340:	4313      	orrs	r3, r2
 800a342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a352:	b480      	push	{r7}
 800a354:	b087      	sub	sp, #28
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f003 0306 	and.w	r3, r3, #6
 800a36a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a372:	2300      	movs	r3, #0
 800a374:	75fb      	strb	r3, [r7, #23]
 800a376:	e00a      	b.n	800a38e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d002      	beq.n	800a384 <USB_GetDevSpeed+0x32>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b06      	cmp	r3, #6
 800a382:	d102      	bne.n	800a38a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a384:	2302      	movs	r3, #2
 800a386:	75fb      	strb	r3, [r7, #23]
 800a388:	e001      	b.n	800a38e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a38a:	230f      	movs	r3, #15
 800a38c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a390:	4618      	mov	r0, r3
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d139      	bne.n	800a42c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3be:	69da      	ldr	r2, [r3, #28]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f003 030f 	and.w	r3, r3, #15
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	68f9      	ldr	r1, [r7, #12]
 800a3d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d153      	bne.n	800a498 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	791b      	ldrb	r3, [r3, #4]
 800a40a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a40c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	059b      	lsls	r3, r3, #22
 800a412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a414:	431a      	orrs	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	0159      	lsls	r1, r3, #5
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	440b      	add	r3, r1
 800a41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a422:	4619      	mov	r1, r3
 800a424:	4b20      	ldr	r3, [pc, #128]	; (800a4a8 <USB_ActivateEndpoint+0x10c>)
 800a426:	4313      	orrs	r3, r2
 800a428:	600b      	str	r3, [r1, #0]
 800a42a:	e035      	b.n	800a498 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a432:	69da      	ldr	r2, [r3, #28]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 030f 	and.w	r3, r3, #15
 800a43c:	2101      	movs	r1, #1
 800a43e:	fa01 f303 	lsl.w	r3, r1, r3
 800a442:	041b      	lsls	r3, r3, #16
 800a444:	68f9      	ldr	r1, [r7, #12]
 800a446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a44a:	4313      	orrs	r3, r2
 800a44c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4413      	add	r3, r2
 800a456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d119      	bne.n	800a498 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	791b      	ldrb	r3, [r3, #4]
 800a47e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a480:	430b      	orrs	r3, r1
 800a482:	431a      	orrs	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	0159      	lsls	r1, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	440b      	add	r3, r1
 800a48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a490:	4619      	mov	r1, r3
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <USB_ActivateEndpoint+0x10c>)
 800a494:	4313      	orrs	r3, r2
 800a496:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	10008000 	.word	0x10008000

0800a4ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	785b      	ldrb	r3, [r3, #1]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d161      	bne.n	800a58c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4de:	d11f      	bne.n	800a520 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	0151      	lsls	r1, r2, #5
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	440a      	add	r2, r1
 800a516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a51a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a51e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	2101      	movs	r1, #1
 800a532:	fa01 f303 	lsl.w	r3, r1, r3
 800a536:	b29b      	uxth	r3, r3
 800a538:	43db      	mvns	r3, r3
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a540:	4013      	ands	r3, r2
 800a542:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f003 030f 	and.w	r3, r3, #15
 800a554:	2101      	movs	r1, #1
 800a556:	fa01 f303 	lsl.w	r3, r1, r3
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	43db      	mvns	r3, r3
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a564:	4013      	ands	r3, r2
 800a566:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	0159      	lsls	r1, r3, #5
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	440b      	add	r3, r1
 800a57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a582:	4619      	mov	r1, r3
 800a584:	4b35      	ldr	r3, [pc, #212]	; (800a65c <USB_DeactivateEndpoint+0x1b0>)
 800a586:	4013      	ands	r3, r2
 800a588:	600b      	str	r3, [r1, #0]
 800a58a:	e060      	b.n	800a64e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a59e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a2:	d11f      	bne.n	800a5e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	0151      	lsls	r1, r2, #5
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	0151      	lsls	r1, r2, #5
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	440a      	add	r2, r1
 800a5da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	f003 030f 	and.w	r3, r3, #15
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fa:	041b      	lsls	r3, r3, #16
 800a5fc:	43db      	mvns	r3, r3
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a604:	4013      	ands	r3, r2
 800a606:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a60e:	69da      	ldr	r2, [r3, #28]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	2101      	movs	r1, #1
 800a61a:	fa01 f303 	lsl.w	r3, r1, r3
 800a61e:	041b      	lsls	r3, r3, #16
 800a620:	43db      	mvns	r3, r3
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a628:	4013      	ands	r3, r2
 800a62a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	0159      	lsls	r1, r3, #5
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	440b      	add	r3, r1
 800a642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a646:	4619      	mov	r1, r3
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <USB_DeactivateEndpoint+0x1b4>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	ec337800 	.word	0xec337800
 800a660:	eff37800 	.word	0xeff37800

0800a664 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af02      	add	r7, sp, #8
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	4613      	mov	r3, r2
 800a670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	2b01      	cmp	r3, #1
 800a682:	f040 8163 	bne.w	800a94c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d132      	bne.n	800a6f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69a:	691a      	ldr	r2, [r3, #16]
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	0159      	lsls	r1, r3, #5
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	440b      	add	r3, r1
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4ba5      	ldr	r3, [pc, #660]	; (800a940 <USB_EPStartXfer+0x2dc>)
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6dc:	691a      	ldr	r2, [r3, #16]
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	0159      	lsls	r1, r3, #5
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	440b      	add	r3, r1
 800a6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4b95      	ldr	r3, [pc, #596]	; (800a944 <USB_EPStartXfer+0x2e0>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	610b      	str	r3, [r1, #16]
 800a6f2:	e074      	b.n	800a7de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a700:	691a      	ldr	r2, [r3, #16]
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	0159      	lsls	r1, r3, #5
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	440b      	add	r3, r1
 800a70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70e:	4619      	mov	r1, r3
 800a710:	4b8c      	ldr	r3, [pc, #560]	; (800a944 <USB_EPStartXfer+0x2e0>)
 800a712:	4013      	ands	r3, r2
 800a714:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a722:	691a      	ldr	r2, [r3, #16]
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	0159      	lsls	r1, r3, #5
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	440b      	add	r3, r1
 800a72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a730:	4619      	mov	r1, r3
 800a732:	4b83      	ldr	r3, [pc, #524]	; (800a940 <USB_EPStartXfer+0x2dc>)
 800a734:	4013      	ands	r3, r2
 800a736:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a744:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	6999      	ldr	r1, [r3, #24]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	440b      	add	r3, r1
 800a750:	1e59      	subs	r1, r3, #1
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	fbb1 f3f3 	udiv	r3, r1, r3
 800a75a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a75c:	4b7a      	ldr	r3, [pc, #488]	; (800a948 <USB_EPStartXfer+0x2e4>)
 800a75e:	400b      	ands	r3, r1
 800a760:	69b9      	ldr	r1, [r7, #24]
 800a762:	0148      	lsls	r0, r1, #5
 800a764:	69f9      	ldr	r1, [r7, #28]
 800a766:	4401      	add	r1, r0
 800a768:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a76c:	4313      	orrs	r3, r2
 800a76e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77c:	691a      	ldr	r2, [r3, #16]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a786:	69b9      	ldr	r1, [r7, #24]
 800a788:	0148      	lsls	r0, r1, #5
 800a78a:	69f9      	ldr	r1, [r7, #28]
 800a78c:	4401      	add	r1, r0
 800a78e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a792:	4313      	orrs	r3, r2
 800a794:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d11f      	bne.n	800a7de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	0151      	lsls	r1, r2, #5
 800a7b0:	69fa      	ldr	r2, [r7, #28]
 800a7b2:	440a      	add	r2, r1
 800a7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a7bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	69ba      	ldr	r2, [r7, #24]
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d14b      	bne.n	800a87c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d009      	beq.n	800a800 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	791b      	ldrb	r3, [r3, #4]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d128      	bne.n	800a85a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a814:	2b00      	cmp	r3, #0
 800a816:	d110      	bne.n	800a83a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	e00f      	b.n	800a85a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	4413      	add	r3, r2
 800a842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	0151      	lsls	r1, r2, #5
 800a84c:	69fa      	ldr	r2, [r7, #28]
 800a84e:	440a      	add	r2, r1
 800a850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a858:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e137      	b.n	800aaec <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	440a      	add	r2, r1
 800a892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a89a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	791b      	ldrb	r3, [r3, #4]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d015      	beq.n	800a8d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 811f 	beq.w	800aaec <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	2101      	movs	r1, #1
 800a8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c4:	69f9      	ldr	r1, [r7, #28]
 800a8c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	634b      	str	r3, [r1, #52]	; 0x34
 800a8ce:	e10d      	b.n	800aaec <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d110      	bne.n	800a902 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	e00f      	b.n	800a922 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	0151      	lsls	r1, r2, #5
 800a914:	69fa      	ldr	r2, [r7, #28]
 800a916:	440a      	add	r2, r1
 800a918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a91c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a920:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	6919      	ldr	r1, [r3, #16]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	781a      	ldrb	r2, [r3, #0]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	b298      	uxth	r0, r3
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	4603      	mov	r3, r0
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 faea 	bl	800af10 <USB_WritePacket>
 800a93c:	e0d6      	b.n	800aaec <USB_EPStartXfer+0x488>
 800a93e:	bf00      	nop
 800a940:	e007ffff 	.word	0xe007ffff
 800a944:	fff80000 	.word	0xfff80000
 800a948:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a958:	691a      	ldr	r2, [r3, #16]
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	0159      	lsls	r1, r3, #5
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	440b      	add	r3, r1
 800a962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a966:	4619      	mov	r1, r3
 800a968:	4b63      	ldr	r3, [pc, #396]	; (800aaf8 <USB_EPStartXfer+0x494>)
 800a96a:	4013      	ands	r3, r2
 800a96c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	691a      	ldr	r2, [r3, #16]
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	0159      	lsls	r1, r3, #5
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	440b      	add	r3, r1
 800a984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a988:	4619      	mov	r1, r3
 800a98a:	4b5c      	ldr	r3, [pc, #368]	; (800aafc <USB_EPStartXfer+0x498>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d123      	bne.n	800a9e0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	691a      	ldr	r2, [r3, #16]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9ae:	69b9      	ldr	r1, [r7, #24]
 800a9b0:	0148      	lsls	r0, r1, #5
 800a9b2:	69f9      	ldr	r1, [r7, #28]
 800a9b4:	4401      	add	r1, r0
 800a9b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	0151      	lsls	r1, r2, #5
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9dc:	6113      	str	r3, [r2, #16]
 800a9de:	e037      	b.n	800aa50 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	699a      	ldr	r2, [r3, #24]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	1e5a      	subs	r2, r3, #1
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	8afa      	ldrh	r2, [r7, #22]
 800a9fc:	fb03 f202 	mul.w	r2, r3, r2
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa10:	691a      	ldr	r2, [r3, #16]
 800aa12:	8afb      	ldrh	r3, [r7, #22]
 800aa14:	04d9      	lsls	r1, r3, #19
 800aa16:	4b3a      	ldr	r3, [pc, #232]	; (800ab00 <USB_EPStartXfer+0x49c>)
 800aa18:	400b      	ands	r3, r1
 800aa1a:	69b9      	ldr	r1, [r7, #24]
 800aa1c:	0148      	lsls	r0, r1, #5
 800aa1e:	69f9      	ldr	r1, [r7, #28]
 800aa20:	4401      	add	r1, r0
 800aa22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa26:	4313      	orrs	r3, r2
 800aa28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa36:	691a      	ldr	r2, [r3, #16]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa40:	69b9      	ldr	r1, [r7, #24]
 800aa42:	0148      	lsls	r0, r1, #5
 800aa44:	69f9      	ldr	r1, [r7, #28]
 800aa46:	4401      	add	r1, r0
 800aa48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d10d      	bne.n	800aa72 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d009      	beq.n	800aa72 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	6919      	ldr	r1, [r3, #16]
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6e:	460a      	mov	r2, r1
 800aa70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	791b      	ldrb	r3, [r3, #4]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d128      	bne.n	800aacc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d110      	bne.n	800aaac <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	4413      	add	r3, r2
 800aa92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	0151      	lsls	r1, r2, #5
 800aa9c:	69fa      	ldr	r2, [r7, #28]
 800aa9e:	440a      	add	r2, r1
 800aaa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	e00f      	b.n	800aacc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	0151      	lsls	r1, r2, #5
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	440a      	add	r2, r1
 800aac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	0151      	lsls	r1, r2, #5
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	440a      	add	r2, r1
 800aae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aaea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3720      	adds	r7, #32
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	fff80000 	.word	0xfff80000
 800aafc:	e007ffff 	.word	0xe007ffff
 800ab00:	1ff80000 	.word	0x1ff80000

0800ab04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	785b      	ldrb	r3, [r3, #1]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	f040 80ce 	bne.w	800acc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d132      	bne.n	800ab94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	0159      	lsls	r1, r3, #5
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	440b      	add	r3, r1
 800ab44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4b9a      	ldr	r3, [pc, #616]	; (800adb4 <USB_EP0StartXfer+0x2b0>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	0151      	lsls	r1, r2, #5
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	440a      	add	r2, r1
 800ab66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	691a      	ldr	r2, [r3, #16]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	0159      	lsls	r1, r3, #5
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	440b      	add	r3, r1
 800ab86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4b8a      	ldr	r3, [pc, #552]	; (800adb8 <USB_EP0StartXfer+0x2b4>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	610b      	str	r3, [r1, #16]
 800ab92:	e04e      	b.n	800ac32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba0:	691a      	ldr	r2, [r3, #16]
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	0159      	lsls	r1, r3, #5
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	440b      	add	r3, r1
 800abaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abae:	4619      	mov	r1, r3
 800abb0:	4b81      	ldr	r3, [pc, #516]	; (800adb8 <USB_EP0StartXfer+0x2b4>)
 800abb2:	4013      	ands	r3, r2
 800abb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	0159      	lsls	r1, r3, #5
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	440b      	add	r3, r1
 800abcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd0:	4619      	mov	r1, r3
 800abd2:	4b78      	ldr	r3, [pc, #480]	; (800adb4 <USB_EP0StartXfer+0x2b0>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	699a      	ldr	r2, [r3, #24]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d903      	bls.n	800abec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	0151      	lsls	r1, r2, #5
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	440a      	add	r2, r1
 800ac02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac18:	691a      	ldr	r2, [r3, #16]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac22:	6939      	ldr	r1, [r7, #16]
 800ac24:	0148      	lsls	r0, r1, #5
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	4401      	add	r1, r0
 800ac2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d11e      	bne.n	800ac76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d009      	beq.n	800ac54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	0151      	lsls	r1, r2, #5
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	440a      	add	r2, r1
 800ac6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	e097      	b.n	800ada6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 8083 	beq.w	800ada6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f003 030f 	and.w	r3, r3, #15
 800acb0:	2101      	movs	r1, #1
 800acb2:	fa01 f303 	lsl.w	r3, r1, r3
 800acb6:	6979      	ldr	r1, [r7, #20]
 800acb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acbc:	4313      	orrs	r3, r2
 800acbe:	634b      	str	r3, [r1, #52]	; 0x34
 800acc0:	e071      	b.n	800ada6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acce:	691a      	ldr	r2, [r3, #16]
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	0159      	lsls	r1, r3, #5
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acdc:	4619      	mov	r1, r3
 800acde:	4b36      	ldr	r3, [pc, #216]	; (800adb8 <USB_EP0StartXfer+0x2b4>)
 800ace0:	4013      	ands	r3, r2
 800ace2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf0:	691a      	ldr	r2, [r3, #16]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	0159      	lsls	r1, r3, #5
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	440b      	add	r3, r1
 800acfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfe:	4619      	mov	r1, r3
 800ad00:	4b2c      	ldr	r3, [pc, #176]	; (800adb4 <USB_EP0StartXfer+0x2b0>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	0151      	lsls	r1, r2, #5
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	440a      	add	r2, r1
 800ad34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4a:	691a      	ldr	r2, [r3, #16]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad54:	6939      	ldr	r1, [r7, #16]
 800ad56:	0148      	lsls	r0, r1, #5
 800ad58:	6979      	ldr	r1, [r7, #20]
 800ad5a:	4401      	add	r1, r0
 800ad5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad60:	4313      	orrs	r3, r2
 800ad62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d10d      	bne.n	800ad86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	6919      	ldr	r1, [r3, #16]
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad82:	460a      	mov	r2, r1
 800ad84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	0151      	lsls	r1, r2, #5
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	440a      	add	r2, r1
 800ad9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ada4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	371c      	adds	r7, #28
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	e007ffff 	.word	0xe007ffff
 800adb8:	fff80000 	.word	0xfff80000

0800adbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d14a      	bne.n	800ae70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adf2:	f040 8086 	bne.w	800af02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	7812      	ldrb	r2, [r2, #0]
 800ae0a:	0151      	lsls	r1, r2, #5
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	440a      	add	r2, r1
 800ae10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	7812      	ldrb	r2, [r2, #0]
 800ae2e:	0151      	lsls	r1, r2, #5
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	440a      	add	r2, r1
 800ae34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3301      	adds	r3, #1
 800ae42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f242 7210 	movw	r2, #10000	; 0x2710
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d902      	bls.n	800ae54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	75fb      	strb	r3, [r7, #23]
          break;
 800ae52:	e056      	b.n	800af02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae6c:	d0e7      	beq.n	800ae3e <USB_EPStopXfer+0x82>
 800ae6e:	e048      	b.n	800af02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae88:	d13b      	bne.n	800af02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	7812      	ldrb	r2, [r2, #0]
 800ae9e:	0151      	lsls	r1, r2, #5
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	440a      	add	r2, r1
 800aea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aeac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	7812      	ldrb	r2, [r2, #0]
 800aec2:	0151      	lsls	r1, r2, #5
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	440a      	add	r2, r1
 800aec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f242 7210 	movw	r2, #10000	; 0x2710
 800aede:	4293      	cmp	r3, r2
 800aee0:	d902      	bls.n	800aee8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]
          break;
 800aee6:	e00c      	b.n	800af02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aefc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af00:	d0e7      	beq.n	800aed2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800af02:	7dfb      	ldrb	r3, [r7, #23]
}
 800af04:	4618      	mov	r0, r3
 800af06:	371c      	adds	r7, #28
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800af10:	b480      	push	{r7}
 800af12:	b089      	sub	sp, #36	; 0x24
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4611      	mov	r1, r2
 800af1c:	461a      	mov	r2, r3
 800af1e:	460b      	mov	r3, r1
 800af20:	71fb      	strb	r3, [r7, #7]
 800af22:	4613      	mov	r3, r2
 800af24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800af2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af32:	2b00      	cmp	r3, #0
 800af34:	d123      	bne.n	800af7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af36:	88bb      	ldrh	r3, [r7, #4]
 800af38:	3303      	adds	r3, #3
 800af3a:	089b      	lsrs	r3, r3, #2
 800af3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af3e:	2300      	movs	r3, #0
 800af40:	61bb      	str	r3, [r7, #24]
 800af42:	e018      	b.n	800af76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	031a      	lsls	r2, r3, #12
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af50:	461a      	mov	r2, r3
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	3301      	adds	r3, #1
 800af5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	3301      	adds	r3, #1
 800af62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	3301      	adds	r3, #1
 800af68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	3301      	adds	r3, #1
 800af6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	3301      	adds	r3, #1
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3e2      	bcc.n	800af44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3724      	adds	r7, #36	; 0x24
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b08b      	sub	sp, #44	; 0x2c
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4613      	mov	r3, r2
 800af98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	089b      	lsrs	r3, r3, #2
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	f003 0303 	and.w	r3, r3, #3
 800afb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800afb2:	2300      	movs	r3, #0
 800afb4:	623b      	str	r3, [r7, #32]
 800afb6:	e014      	b.n	800afe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	601a      	str	r2, [r3, #0]
    pDest++;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	3301      	adds	r3, #1
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	3301      	adds	r3, #1
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	3301      	adds	r3, #1
 800afd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	3301      	adds	r3, #1
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	3301      	adds	r3, #1
 800afe0:	623b      	str	r3, [r7, #32]
 800afe2:	6a3a      	ldr	r2, [r7, #32]
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d3e6      	bcc.n	800afb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afea:	8bfb      	ldrh	r3, [r7, #30]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01e      	beq.n	800b02e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affa:	461a      	mov	r2, r3
 800affc:	f107 0310 	add.w	r3, r7, #16
 800b000:	6812      	ldr	r2, [r2, #0]
 800b002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	fa22 f303 	lsr.w	r3, r2, r3
 800b010:	b2da      	uxtb	r2, r3
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	701a      	strb	r2, [r3, #0]
      i++;
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	3301      	adds	r3, #1
 800b01a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	3301      	adds	r3, #1
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b022:	8bfb      	ldrh	r3, [r7, #30]
 800b024:	3b01      	subs	r3, #1
 800b026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b028:	8bfb      	ldrh	r3, [r7, #30]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1ea      	bne.n	800b004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b030:	4618      	mov	r0, r3
 800b032:	372c      	adds	r7, #44	; 0x2c
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d12c      	bne.n	800b0b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	db12      	blt.n	800b090 <USB_EPSetStall+0x54>
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00f      	beq.n	800b090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	0151      	lsls	r1, r2, #5
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	440a      	add	r2, r1
 800b086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b08a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b08e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	0151      	lsls	r1, r2, #5
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	440a      	add	r2, r1
 800b0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	e02b      	b.n	800b10a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	db12      	blt.n	800b0ea <USB_EPSetStall+0xae>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00f      	beq.n	800b0ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	0151      	lsls	r1, r2, #5
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	440a      	add	r2, r1
 800b0e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	015a      	lsls	r2, r3, #5
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	0151      	lsls	r1, r2, #5
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	440a      	add	r2, r1
 800b100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	785b      	ldrb	r3, [r3, #1]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d128      	bne.n	800b186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	0151      	lsls	r1, r2, #5
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	440a      	add	r2, r1
 800b14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	791b      	ldrb	r3, [r3, #4]
 800b158:	2b03      	cmp	r3, #3
 800b15a:	d003      	beq.n	800b164 <USB_EPClearStall+0x4c>
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	791b      	ldrb	r3, [r3, #4]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d138      	bne.n	800b1d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	0151      	lsls	r1, r2, #5
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	440a      	add	r2, r1
 800b17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b17e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	e027      	b.n	800b1d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	015a      	lsls	r2, r3, #5
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	0151      	lsls	r1, r2, #5
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	440a      	add	r2, r1
 800b19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	791b      	ldrb	r3, [r3, #4]
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d003      	beq.n	800b1b6 <USB_EPClearStall+0x9e>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	791b      	ldrb	r3, [r3, #4]
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d10f      	bne.n	800b1d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	0151      	lsls	r1, r2, #5
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	440a      	add	r2, r1
 800b1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b218:	68f9      	ldr	r1, [r7, #12]
 800b21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b21e:	4313      	orrs	r3, r2
 800b220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b24a:	f023 0303 	bic.w	r3, r3, #3
 800b24e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b25e:	f023 0302 	bic.w	r3, r3, #2
 800b262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2a0:	f043 0302 	orr.w	r3, r3, #2
 800b2a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b085      	sub	sp, #20
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	0c1b      	lsrs	r3, r3, #16
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b30e:	b480      	push	{r7}
 800b310:	b085      	sub	sp, #20
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	4013      	ands	r3, r2
 800b330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	b29b      	uxth	r3, r3
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	460b      	mov	r3, r1
 800b34c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b352:	78fb      	ldrb	r3, [r7, #3]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	4013      	ands	r3, r2
 800b36e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b370:	68bb      	ldr	r3, [r7, #8]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b37e:	b480      	push	{r7}
 800b380:	b087      	sub	sp, #28
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	460b      	mov	r3, r1
 800b388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b3a2:	78fb      	ldrb	r3, [r7, #3]
 800b3a4:	f003 030f 	and.w	r3, r3, #15
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ae:	01db      	lsls	r3, r3, #7
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b083      	sub	sp, #12
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	f003 0301 	and.w	r3, r3, #1
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b412:	4619      	mov	r1, r3
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <USB_ActivateSetup+0x44>)
 800b416:	4013      	ands	r3, r2
 800b418:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b42c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	fffff800 	.word	0xfffff800

0800b440 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	460b      	mov	r3, r1
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	333c      	adds	r3, #60	; 0x3c
 800b456:	3304      	adds	r3, #4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	4a26      	ldr	r2, [pc, #152]	; (800b4f8 <USB_EP0_OutStart+0xb8>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d90a      	bls.n	800b47a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b474:	d101      	bne.n	800b47a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	e037      	b.n	800b4ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b480:	461a      	mov	r2, r3
 800b482:	2300      	movs	r3, #0
 800b484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4a8:	f043 0318 	orr.w	r3, r3, #24
 800b4ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b4c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b4c2:	7afb      	ldrb	r3, [r7, #11]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d10f      	bne.n	800b4e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b4e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	371c      	adds	r7, #28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	4f54300a 	.word	0x4f54300a

0800b4fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3301      	adds	r3, #1
 800b50c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	4a13      	ldr	r2, [pc, #76]	; (800b560 <USB_CoreReset+0x64>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d901      	bls.n	800b51a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e01b      	b.n	800b552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	daf2      	bge.n	800b508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	f043 0201 	orr.w	r2, r3, #1
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3301      	adds	r3, #1
 800b536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	4a09      	ldr	r2, [pc, #36]	; (800b560 <USB_CoreReset+0x64>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d901      	bls.n	800b544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e006      	b.n	800b552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d0f0      	beq.n	800b532 <USB_CoreReset+0x36>

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	00030d40 	.word	0x00030d40

0800b564 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b570:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b574:	f002 fdf0 	bl	800e158 <malloc>
 800b578:	4603      	mov	r3, r0
 800b57a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d109      	bne.n	800b596 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	32b0      	adds	r2, #176	; 0xb0
 800b58c:	2100      	movs	r1, #0
 800b58e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b592:	2302      	movs	r3, #2
 800b594:	e0d4      	b.n	800b740 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b596:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b59a:	2100      	movs	r1, #0
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f002 fe97 	bl	800e2d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	32b0      	adds	r2, #176	; 0xb0
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	32b0      	adds	r2, #176	; 0xb0
 800b5bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7c1b      	ldrb	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d138      	bne.n	800b640 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b5ce:	4b5e      	ldr	r3, [pc, #376]	; (800b748 <USBD_CDC_Init+0x1e4>)
 800b5d0:	7819      	ldrb	r1, [r3, #0]
 800b5d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f002 fc1a 	bl	800de12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b5de:	4b5a      	ldr	r3, [pc, #360]	; (800b748 <USBD_CDC_Init+0x1e4>)
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	f003 020f 	and.w	r2, r3, #15
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	3324      	adds	r3, #36	; 0x24
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b5f8:	4b54      	ldr	r3, [pc, #336]	; (800b74c <USBD_CDC_Init+0x1e8>)
 800b5fa:	7819      	ldrb	r1, [r3, #0]
 800b5fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b600:	2202      	movs	r2, #2
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f002 fc05 	bl	800de12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b608:	4b50      	ldr	r3, [pc, #320]	; (800b74c <USBD_CDC_Init+0x1e8>)
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	f003 020f 	and.w	r2, r3, #15
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4613      	mov	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	440b      	add	r3, r1
 800b61c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b620:	2201      	movs	r2, #1
 800b622:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b624:	4b4a      	ldr	r3, [pc, #296]	; (800b750 <USBD_CDC_Init+0x1ec>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	f003 020f 	and.w	r2, r3, #15
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	3326      	adds	r3, #38	; 0x26
 800b63a:	2210      	movs	r2, #16
 800b63c:	801a      	strh	r2, [r3, #0]
 800b63e:	e035      	b.n	800b6ac <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b640:	4b41      	ldr	r3, [pc, #260]	; (800b748 <USBD_CDC_Init+0x1e4>)
 800b642:	7819      	ldrb	r1, [r3, #0]
 800b644:	2340      	movs	r3, #64	; 0x40
 800b646:	2202      	movs	r2, #2
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f002 fbe2 	bl	800de12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b64e:	4b3e      	ldr	r3, [pc, #248]	; (800b748 <USBD_CDC_Init+0x1e4>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	f003 020f 	and.w	r2, r3, #15
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	440b      	add	r3, r1
 800b662:	3324      	adds	r3, #36	; 0x24
 800b664:	2201      	movs	r2, #1
 800b666:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b668:	4b38      	ldr	r3, [pc, #224]	; (800b74c <USBD_CDC_Init+0x1e8>)
 800b66a:	7819      	ldrb	r1, [r3, #0]
 800b66c:	2340      	movs	r3, #64	; 0x40
 800b66e:	2202      	movs	r2, #2
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f002 fbce 	bl	800de12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b676:	4b35      	ldr	r3, [pc, #212]	; (800b74c <USBD_CDC_Init+0x1e8>)
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	f003 020f 	and.w	r2, r3, #15
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b68e:	2201      	movs	r2, #1
 800b690:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b692:	4b2f      	ldr	r3, [pc, #188]	; (800b750 <USBD_CDC_Init+0x1ec>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	f003 020f 	and.w	r2, r3, #15
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	440b      	add	r3, r1
 800b6a6:	3326      	adds	r3, #38	; 0x26
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b6ac:	4b28      	ldr	r3, [pc, #160]	; (800b750 <USBD_CDC_Init+0x1ec>)
 800b6ae:	7819      	ldrb	r1, [r3, #0]
 800b6b0:	2308      	movs	r3, #8
 800b6b2:	2203      	movs	r2, #3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f002 fbac 	bl	800de12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b6ba:	4b25      	ldr	r3, [pc, #148]	; (800b750 <USBD_CDC_Init+0x1ec>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	f003 020f 	and.w	r2, r3, #15
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	440b      	add	r3, r1
 800b6ce:	3324      	adds	r3, #36	; 0x24
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	33b0      	adds	r3, #176	; 0xb0
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b70a:	2302      	movs	r3, #2
 800b70c:	e018      	b.n	800b740 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	7c1b      	ldrb	r3, [r3, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b716:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <USBD_CDC_Init+0x1e8>)
 800b718:	7819      	ldrb	r1, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b720:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f002 fc63 	bl	800dff0 <USBD_LL_PrepareReceive>
 800b72a:	e008      	b.n	800b73e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b72c:	4b07      	ldr	r3, [pc, #28]	; (800b74c <USBD_CDC_Init+0x1e8>)
 800b72e:	7819      	ldrb	r1, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b736:	2340      	movs	r3, #64	; 0x40
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f002 fc59 	bl	800dff0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	200000ab 	.word	0x200000ab
 800b74c:	200000ac 	.word	0x200000ac
 800b750:	200000ad 	.word	0x200000ad

0800b754 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b760:	4b3a      	ldr	r3, [pc, #232]	; (800b84c <USBD_CDC_DeInit+0xf8>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f002 fb79 	bl	800de5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b76c:	4b37      	ldr	r3, [pc, #220]	; (800b84c <USBD_CDC_DeInit+0xf8>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	f003 020f 	and.w	r2, r3, #15
 800b774:	6879      	ldr	r1, [r7, #4]
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	3324      	adds	r3, #36	; 0x24
 800b782:	2200      	movs	r2, #0
 800b784:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b786:	4b32      	ldr	r3, [pc, #200]	; (800b850 <USBD_CDC_DeInit+0xfc>)
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f002 fb66 	bl	800de5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b792:	4b2f      	ldr	r3, [pc, #188]	; (800b850 <USBD_CDC_DeInit+0xfc>)
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f003 020f 	and.w	r2, r3, #15
 800b79a:	6879      	ldr	r1, [r7, #4]
 800b79c:	4613      	mov	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	440b      	add	r3, r1
 800b7a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b7ae:	4b29      	ldr	r3, [pc, #164]	; (800b854 <USBD_CDC_DeInit+0x100>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f002 fb52 	bl	800de5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b7ba:	4b26      	ldr	r3, [pc, #152]	; (800b854 <USBD_CDC_DeInit+0x100>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f003 020f 	and.w	r2, r3, #15
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	440b      	add	r3, r1
 800b7ce:	3324      	adds	r3, #36	; 0x24
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b7d4:	4b1f      	ldr	r3, [pc, #124]	; (800b854 <USBD_CDC_DeInit+0x100>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 020f 	and.w	r2, r3, #15
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	440b      	add	r3, r1
 800b7e8:	3326      	adds	r3, #38	; 0x26
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	32b0      	adds	r2, #176	; 0xb0
 800b7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01f      	beq.n	800b840 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	33b0      	adds	r3, #176	; 0xb0
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	32b0      	adds	r2, #176	; 0xb0
 800b81e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b822:	4618      	mov	r0, r3
 800b824:	f002 fca0 	bl	800e168 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	32b0      	adds	r2, #176	; 0xb0
 800b832:	2100      	movs	r1, #0
 800b834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200000ab 	.word	0x200000ab
 800b850:	200000ac 	.word	0x200000ac
 800b854:	200000ad 	.word	0x200000ad

0800b858 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	32b0      	adds	r2, #176	; 0xb0
 800b86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b870:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b884:	2303      	movs	r3, #3
 800b886:	e0bf      	b.n	800ba08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b890:	2b00      	cmp	r3, #0
 800b892:	d050      	beq.n	800b936 <USBD_CDC_Setup+0xde>
 800b894:	2b20      	cmp	r3, #32
 800b896:	f040 80af 	bne.w	800b9f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	88db      	ldrh	r3, [r3, #6]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d03a      	beq.n	800b918 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b25b      	sxtb	r3, r3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da1b      	bge.n	800b8e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	33b0      	adds	r3, #176	; 0xb0
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b8c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	88d2      	ldrh	r2, [r2, #6]
 800b8c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	88db      	ldrh	r3, [r3, #6]
 800b8ce:	2b07      	cmp	r3, #7
 800b8d0:	bf28      	it	cs
 800b8d2:	2307      	movcs	r3, #7
 800b8d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	89fa      	ldrh	r2, [r7, #14]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f001 fdad 	bl	800d43c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b8e2:	e090      	b.n	800ba06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	785a      	ldrb	r2, [r3, #1]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	88db      	ldrh	r3, [r3, #6]
 800b8f2:	2b3f      	cmp	r3, #63	; 0x3f
 800b8f4:	d803      	bhi.n	800b8fe <USBD_CDC_Setup+0xa6>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	88db      	ldrh	r3, [r3, #6]
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	e000      	b.n	800b900 <USBD_CDC_Setup+0xa8>
 800b8fe:	2240      	movs	r2, #64	; 0x40
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b906:	6939      	ldr	r1, [r7, #16]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b90e:	461a      	mov	r2, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f001 fdbf 	bl	800d494 <USBD_CtlPrepareRx>
      break;
 800b916:	e076      	b.n	800ba06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	33b0      	adds	r3, #176	; 0xb0
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	7850      	ldrb	r0, [r2, #1]
 800b92e:	2200      	movs	r2, #0
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	4798      	blx	r3
      break;
 800b934:	e067      	b.n	800ba06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	785b      	ldrb	r3, [r3, #1]
 800b93a:	2b0b      	cmp	r3, #11
 800b93c:	d851      	bhi.n	800b9e2 <USBD_CDC_Setup+0x18a>
 800b93e:	a201      	add	r2, pc, #4	; (adr r2, 800b944 <USBD_CDC_Setup+0xec>)
 800b940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b944:	0800b975 	.word	0x0800b975
 800b948:	0800b9f1 	.word	0x0800b9f1
 800b94c:	0800b9e3 	.word	0x0800b9e3
 800b950:	0800b9e3 	.word	0x0800b9e3
 800b954:	0800b9e3 	.word	0x0800b9e3
 800b958:	0800b9e3 	.word	0x0800b9e3
 800b95c:	0800b9e3 	.word	0x0800b9e3
 800b960:	0800b9e3 	.word	0x0800b9e3
 800b964:	0800b9e3 	.word	0x0800b9e3
 800b968:	0800b9e3 	.word	0x0800b9e3
 800b96c:	0800b99f 	.word	0x0800b99f
 800b970:	0800b9c9 	.word	0x0800b9c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d107      	bne.n	800b990 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b980:	f107 030a 	add.w	r3, r7, #10
 800b984:	2202      	movs	r2, #2
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 fd57 	bl	800d43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b98e:	e032      	b.n	800b9f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f001 fce1 	bl	800d35a <USBD_CtlError>
            ret = USBD_FAIL;
 800b998:	2303      	movs	r3, #3
 800b99a:	75fb      	strb	r3, [r7, #23]
          break;
 800b99c:	e02b      	b.n	800b9f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d107      	bne.n	800b9ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b9aa:	f107 030d 	add.w	r3, r7, #13
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 fd42 	bl	800d43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9b8:	e01d      	b.n	800b9f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 fccc 	bl	800d35a <USBD_CtlError>
            ret = USBD_FAIL;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b9c6:	e016      	b.n	800b9f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d00f      	beq.n	800b9f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 fcbf 	bl	800d35a <USBD_CtlError>
            ret = USBD_FAIL;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b9e0:	e008      	b.n	800b9f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f001 fcb8 	bl	800d35a <USBD_CtlError>
          ret = USBD_FAIL;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b9ee:	e002      	b.n	800b9f6 <USBD_CDC_Setup+0x19e>
          break;
 800b9f0:	bf00      	nop
 800b9f2:	e008      	b.n	800ba06 <USBD_CDC_Setup+0x1ae>
          break;
 800b9f4:	bf00      	nop
      }
      break;
 800b9f6:	e006      	b.n	800ba06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f001 fcad 	bl	800d35a <USBD_CtlError>
      ret = USBD_FAIL;
 800ba00:	2303      	movs	r3, #3
 800ba02:	75fb      	strb	r3, [r7, #23]
      break;
 800ba04:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	32b0      	adds	r2, #176	; 0xb0
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e065      	b.n	800bb06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	32b0      	adds	r2, #176	; 0xb0
 800ba44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	f003 020f 	and.w	r2, r3, #15
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3318      	adds	r3, #24
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d02f      	beq.n	800bac4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ba64:	78fb      	ldrb	r3, [r7, #3]
 800ba66:	f003 020f 	and.w	r2, r3, #15
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	440b      	add	r3, r1
 800ba76:	3318      	adds	r3, #24
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	f003 010f 	and.w	r1, r3, #15
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	460b      	mov	r3, r1
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	440b      	add	r3, r1
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4403      	add	r3, r0
 800ba8c:	3348      	adds	r3, #72	; 0x48
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba94:	fb01 f303 	mul.w	r3, r1, r3
 800ba98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d112      	bne.n	800bac4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ba9e:	78fb      	ldrb	r3, [r7, #3]
 800baa0:	f003 020f 	and.w	r2, r3, #15
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	440b      	add	r3, r1
 800bab0:	3318      	adds	r3, #24
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bab6:	78f9      	ldrb	r1, [r7, #3]
 800bab8:	2300      	movs	r3, #0
 800baba:	2200      	movs	r2, #0
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f002 fa76 	bl	800dfae <USBD_LL_Transmit>
 800bac2:	e01f      	b.n	800bb04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	33b0      	adds	r3, #176	; 0xb0
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d010      	beq.n	800bb04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	33b0      	adds	r3, #176	; 0xb0
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	32b0      	adds	r2, #176	; 0xb0
 800bb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	32b0      	adds	r2, #176	; 0xb0
 800bb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d101      	bne.n	800bb40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e01a      	b.n	800bb76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f002 fa74 	bl	800e032 <USBD_LL_GetRxDataSize>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	33b0      	adds	r3, #176	; 0xb0
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bb70:	4611      	mov	r1, r2
 800bb72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	32b0      	adds	r2, #176	; 0xb0
 800bb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e025      	b.n	800bbec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	33b0      	adds	r3, #176	; 0xb0
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01a      	beq.n	800bbea <USBD_CDC_EP0_RxReady+0x6c>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bbba:	2bff      	cmp	r3, #255	; 0xff
 800bbbc:	d015      	beq.n	800bbea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	33b0      	adds	r3, #176	; 0xb0
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bbd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bbde:	b292      	uxth	r2, r2
 800bbe0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bbfc:	2182      	movs	r1, #130	; 0x82
 800bbfe:	4818      	ldr	r0, [pc, #96]	; (800bc60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc00:	f000 fd49 	bl	800c696 <USBD_GetEpDesc>
 800bc04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc06:	2101      	movs	r1, #1
 800bc08:	4815      	ldr	r0, [pc, #84]	; (800bc60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc0a:	f000 fd44 	bl	800c696 <USBD_GetEpDesc>
 800bc0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc10:	2181      	movs	r1, #129	; 0x81
 800bc12:	4813      	ldr	r0, [pc, #76]	; (800bc60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc14:	f000 fd3f 	bl	800c696 <USBD_GetEpDesc>
 800bc18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2210      	movs	r2, #16
 800bc24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d006      	beq.n	800bc3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc34:	711a      	strb	r2, [r3, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d006      	beq.n	800bc4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc48:	711a      	strb	r2, [r3, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2243      	movs	r2, #67	; 0x43
 800bc52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	20000068 	.word	0x20000068

0800bc64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc6c:	2182      	movs	r1, #130	; 0x82
 800bc6e:	4818      	ldr	r0, [pc, #96]	; (800bcd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc70:	f000 fd11 	bl	800c696 <USBD_GetEpDesc>
 800bc74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc76:	2101      	movs	r1, #1
 800bc78:	4815      	ldr	r0, [pc, #84]	; (800bcd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc7a:	f000 fd0c 	bl	800c696 <USBD_GetEpDesc>
 800bc7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc80:	2181      	movs	r1, #129	; 0x81
 800bc82:	4813      	ldr	r0, [pc, #76]	; (800bcd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bc84:	f000 fd07 	bl	800c696 <USBD_GetEpDesc>
 800bc88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2210      	movs	r2, #16
 800bc94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d006      	beq.n	800bcaa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	711a      	strb	r2, [r3, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f042 0202 	orr.w	r2, r2, #2
 800bca8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d006      	beq.n	800bcbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	711a      	strb	r2, [r3, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f042 0202 	orr.w	r2, r2, #2
 800bcbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2243      	movs	r2, #67	; 0x43
 800bcc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bcc4:	4b02      	ldr	r3, [pc, #8]	; (800bcd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000068 	.word	0x20000068

0800bcd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bcdc:	2182      	movs	r1, #130	; 0x82
 800bcde:	4818      	ldr	r0, [pc, #96]	; (800bd40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bce0:	f000 fcd9 	bl	800c696 <USBD_GetEpDesc>
 800bce4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bce6:	2101      	movs	r1, #1
 800bce8:	4815      	ldr	r0, [pc, #84]	; (800bd40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcea:	f000 fcd4 	bl	800c696 <USBD_GetEpDesc>
 800bcee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcf0:	2181      	movs	r1, #129	; 0x81
 800bcf2:	4813      	ldr	r0, [pc, #76]	; (800bd40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bcf4:	f000 fccf 	bl	800c696 <USBD_GetEpDesc>
 800bcf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2210      	movs	r2, #16
 800bd04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d006      	beq.n	800bd1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd14:	711a      	strb	r2, [r3, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d006      	beq.n	800bd2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd28:	711a      	strb	r2, [r3, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2243      	movs	r2, #67	; 0x43
 800bd32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000068 	.word	0x20000068

0800bd44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	220a      	movs	r2, #10
 800bd50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd52:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20000024 	.word	0x20000024

0800bd64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd74:	2303      	movs	r3, #3
 800bd76:	e009      	b.n	800bd8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	33b0      	adds	r3, #176	; 0xb0
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b087      	sub	sp, #28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	32b0      	adds	r2, #176	; 0xb0
 800bdae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	e008      	b.n	800bdd0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	371c      	adds	r7, #28
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	32b0      	adds	r2, #176	; 0xb0
 800bdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e004      	b.n	800be0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
	...

0800be18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	32b0      	adds	r2, #176	; 0xb0
 800be2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800be30:	2301      	movs	r3, #1
 800be32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e025      	b.n	800be8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be44:	2b00      	cmp	r3, #0
 800be46:	d11f      	bne.n	800be88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800be50:	4b10      	ldr	r3, [pc, #64]	; (800be94 <USBD_CDC_TransmitPacket+0x7c>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	f003 020f 	and.w	r2, r3, #15
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	4613      	mov	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4403      	add	r3, r0
 800be6a:	3318      	adds	r3, #24
 800be6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800be6e:	4b09      	ldr	r3, [pc, #36]	; (800be94 <USBD_CDC_TransmitPacket+0x7c>)
 800be70:	7819      	ldrb	r1, [r3, #0]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f002 f895 	bl	800dfae <USBD_LL_Transmit>

    ret = USBD_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800be88:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	200000ab 	.word	0x200000ab

0800be98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	32b0      	adds	r2, #176	; 0xb0
 800beaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	32b0      	adds	r2, #176	; 0xb0
 800beba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e018      	b.n	800bef8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	7c1b      	ldrb	r3, [r3, #16]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bece:	4b0c      	ldr	r3, [pc, #48]	; (800bf00 <USBD_CDC_ReceivePacket+0x68>)
 800bed0:	7819      	ldrb	r1, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f002 f887 	bl	800dff0 <USBD_LL_PrepareReceive>
 800bee2:	e008      	b.n	800bef6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bee4:	4b06      	ldr	r3, [pc, #24]	; (800bf00 <USBD_CDC_ReceivePacket+0x68>)
 800bee6:	7819      	ldrb	r1, [r3, #0]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800beee:	2340      	movs	r3, #64	; 0x40
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f002 f87d 	bl	800dff0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	200000ac 	.word	0x200000ac

0800bf04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e01f      	b.n	800bf5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	79fa      	ldrb	r2, [r7, #7]
 800bf4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f001 fef7 	bl	800dd44 <USBD_LL_Init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e025      	b.n	800bfc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	32ae      	adds	r2, #174	; 0xae
 800bf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00f      	beq.n	800bfb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	32ae      	adds	r2, #174	; 0xae
 800bfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa8:	f107 020e 	add.w	r2, r7, #14
 800bfac:	4610      	mov	r0, r2
 800bfae:	4798      	blx	r3
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 feff 	bl	800dddc <USBD_LL_Start>
 800bfde:	4603      	mov	r3, r0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bff0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c014:	2b00      	cmp	r3, #0
 800c016:	d009      	beq.n	800c02c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	4611      	mov	r1, r2
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	4798      	blx	r3
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	460b      	mov	r3, r1
 800c040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	78fa      	ldrb	r2, [r7, #3]
 800c050:	4611      	mov	r1, r2
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f001 f932 	bl	800d2e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c090:	461a      	mov	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c09e:	f003 031f 	and.w	r3, r3, #31
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d01a      	beq.n	800c0dc <USBD_LL_SetupStage+0x72>
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d822      	bhi.n	800c0f0 <USBD_LL_SetupStage+0x86>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <USBD_LL_SetupStage+0x4a>
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d00a      	beq.n	800c0c8 <USBD_LL_SetupStage+0x5e>
 800c0b2:	e01d      	b.n	800c0f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fb5f 	bl	800c780 <USBD_StdDevReq>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c6:	e020      	b.n	800c10a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fbc7 	bl	800c864 <USBD_StdItfReq>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0da:	e016      	b.n	800c10a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fc29 	bl	800c93c <USBD_StdEPReq>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ee:	e00c      	b.n	800c10a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c0f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 fecc 	bl	800de9c <USBD_LL_StallEP>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]
      break;
 800c108:	bf00      	nop
  }

  return ret;
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	460b      	mov	r3, r1
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c126:	7afb      	ldrb	r3, [r7, #11]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d16e      	bne.n	800c20a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c132:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	f040 8098 	bne.w	800c270 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d913      	bls.n	800c174 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	689a      	ldr	r2, [r3, #8]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	1ad2      	subs	r2, r2, r3
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	68da      	ldr	r2, [r3, #12]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	4293      	cmp	r3, r2
 800c164:	bf28      	it	cs
 800c166:	4613      	movcs	r3, r2
 800c168:	461a      	mov	r2, r3
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f001 f9ae 	bl	800d4ce <USBD_CtlContinueRx>
 800c172:	e07d      	b.n	800c270 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c17a:	f003 031f 	and.w	r3, r3, #31
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d014      	beq.n	800c1ac <USBD_LL_DataOutStage+0x98>
 800c182:	2b02      	cmp	r3, #2
 800c184:	d81d      	bhi.n	800c1c2 <USBD_LL_DataOutStage+0xae>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <USBD_LL_DataOutStage+0x7c>
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d003      	beq.n	800c196 <USBD_LL_DataOutStage+0x82>
 800c18e:	e018      	b.n	800c1c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	75bb      	strb	r3, [r7, #22]
            break;
 800c194:	e018      	b.n	800c1c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	4619      	mov	r1, r3
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 fa5e 	bl	800c662 <USBD_CoreFindIF>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	75bb      	strb	r3, [r7, #22]
            break;
 800c1aa:	e00d      	b.n	800c1c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 fa60 	bl	800c67c <USBD_CoreFindEP>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	75bb      	strb	r3, [r7, #22]
            break;
 800c1c0:	e002      	b.n	800c1c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	75bb      	strb	r3, [r7, #22]
            break;
 800c1c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c1c8:	7dbb      	ldrb	r3, [r7, #22]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d119      	bne.n	800c202 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d113      	bne.n	800c202 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c1da:	7dba      	ldrb	r2, [r7, #22]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	32ae      	adds	r2, #174	; 0xae
 800c1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00b      	beq.n	800c202 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c1ea:	7dba      	ldrb	r2, [r7, #22]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c1f2:	7dba      	ldrb	r2, [r7, #22]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	32ae      	adds	r2, #174	; 0xae
 800c1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f001 f974 	bl	800d4f0 <USBD_CtlSendStatus>
 800c208:	e032      	b.n	800c270 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c20a:	7afb      	ldrb	r3, [r7, #11]
 800c20c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c210:	b2db      	uxtb	r3, r3
 800c212:	4619      	mov	r1, r3
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 fa31 	bl	800c67c <USBD_CoreFindEP>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c21e:	7dbb      	ldrb	r3, [r7, #22]
 800c220:	2bff      	cmp	r3, #255	; 0xff
 800c222:	d025      	beq.n	800c270 <USBD_LL_DataOutStage+0x15c>
 800c224:	7dbb      	ldrb	r3, [r7, #22]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d122      	bne.n	800c270 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b03      	cmp	r3, #3
 800c234:	d117      	bne.n	800c266 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c236:	7dba      	ldrb	r2, [r7, #22]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	32ae      	adds	r2, #174	; 0xae
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00f      	beq.n	800c266 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c246:	7dba      	ldrb	r2, [r7, #22]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c24e:	7dba      	ldrb	r2, [r7, #22]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	32ae      	adds	r2, #174	; 0xae
 800c254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	7afa      	ldrb	r2, [r7, #11]
 800c25c:	4611      	mov	r1, r2
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	4798      	blx	r3
 800c262:	4603      	mov	r3, r0
 800c264:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	e000      	b.n	800c272 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	460b      	mov	r3, r1
 800c284:	607a      	str	r2, [r7, #4]
 800c286:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c288:	7afb      	ldrb	r3, [r7, #11]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d16f      	bne.n	800c36e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3314      	adds	r3, #20
 800c292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d15a      	bne.n	800c354 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	689a      	ldr	r2, [r3, #8]
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d914      	bls.n	800c2d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	1ad2      	subs	r2, r2, r3
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f001 f8d6 	bl	800d472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f001 fe8f 	bl	800dff0 <USBD_LL_PrepareReceive>
 800c2d2:	e03f      	b.n	800c354 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	68da      	ldr	r2, [r3, #12]
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d11c      	bne.n	800c31a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d316      	bcc.n	800c31a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d20f      	bcs.n	800c31a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f001 f8b7 	bl	800d472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c30c:	2300      	movs	r3, #0
 800c30e:	2200      	movs	r2, #0
 800c310:	2100      	movs	r1, #0
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f001 fe6c 	bl	800dff0 <USBD_LL_PrepareReceive>
 800c318:	e01c      	b.n	800c354 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b03      	cmp	r3, #3
 800c324:	d10f      	bne.n	800c346 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d009      	beq.n	800c346 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c346:	2180      	movs	r1, #128	; 0x80
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f001 fda7 	bl	800de9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f001 f8e1 	bl	800d516 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d03a      	beq.n	800c3d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff fe42 	bl	800bfe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c36c:	e032      	b.n	800c3d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c36e:	7afb      	ldrb	r3, [r7, #11]
 800c370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c374:	b2db      	uxtb	r3, r3
 800c376:	4619      	mov	r1, r3
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 f97f 	bl	800c67c <USBD_CoreFindEP>
 800c37e:	4603      	mov	r3, r0
 800c380:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	2bff      	cmp	r3, #255	; 0xff
 800c386:	d025      	beq.n	800c3d4 <USBD_LL_DataInStage+0x15a>
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d122      	bne.n	800c3d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b03      	cmp	r3, #3
 800c398:	d11c      	bne.n	800c3d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c39a:	7dfa      	ldrb	r2, [r7, #23]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	32ae      	adds	r2, #174	; 0xae
 800c3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d014      	beq.n	800c3d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c3aa:	7dfa      	ldrb	r2, [r7, #23]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c3b2:	7dfa      	ldrb	r2, [r7, #23]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	32ae      	adds	r2, #174	; 0xae
 800c3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	7afa      	ldrb	r2, [r7, #11]
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	4798      	blx	r3
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c3ca:	7dbb      	ldrb	r3, [r7, #22]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c3d0:	7dbb      	ldrb	r3, [r7, #22]
 800c3d2:	e000      	b.n	800c3d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d014      	beq.n	800c444 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00e      	beq.n	800c444 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	6852      	ldr	r2, [r2, #4]
 800c432:	b2d2      	uxtb	r2, r2
 800c434:	4611      	mov	r1, r2
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	4798      	blx	r3
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c440:	2303      	movs	r3, #3
 800c442:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c444:	2340      	movs	r3, #64	; 0x40
 800c446:	2200      	movs	r2, #0
 800c448:	2100      	movs	r1, #0
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fce1 	bl	800de12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2240      	movs	r2, #64	; 0x40
 800c45c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c460:	2340      	movs	r3, #64	; 0x40
 800c462:	2200      	movs	r2, #0
 800c464:	2180      	movs	r1, #128	; 0x80
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fcd3 	bl	800de12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2240      	movs	r2, #64	; 0x40
 800c476:	621a      	str	r2, [r3, #32]

  return ret;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	460b      	mov	r3, r1
 800c48c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	78fa      	ldrb	r2, [r7, #3]
 800c492:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2204      	movs	r2, #4
 800c4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	d106      	bne.n	800c4f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	370c      	adds	r7, #12
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d110      	bne.n	800c534 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d005      	beq.n	800c534 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	460b      	mov	r3, r1
 800c548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	32ae      	adds	r2, #174	; 0xae
 800c554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e01c      	b.n	800c59a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d115      	bne.n	800c598 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	32ae      	adds	r2, #174	; 0xae
 800c576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	32ae      	adds	r2, #174	; 0xae
 800c58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	78fa      	ldrb	r2, [r7, #3]
 800c592:	4611      	mov	r1, r2
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	32ae      	adds	r2, #174	; 0xae
 800c5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e01c      	b.n	800c5fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d115      	bne.n	800c5fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	32ae      	adds	r2, #174	; 0xae
 800c5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00b      	beq.n	800c5fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	32ae      	adds	r2, #174	; 0xae
 800c5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f4:	78fa      	ldrb	r2, [r7, #3]
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00e      	beq.n	800c658 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6852      	ldr	r2, [r2, #4]
 800c646:	b2d2      	uxtb	r2, r2
 800c648:	4611      	mov	r1, r2
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	4798      	blx	r3
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c654:	2303      	movs	r3, #3
 800c656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c658:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	460b      	mov	r3, r1
 800c66c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c66e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c688:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b086      	sub	sp, #24
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	885b      	ldrh	r3, [r3, #2]
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d920      	bls.n	800c700 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c6c6:	e013      	b.n	800c6f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c6c8:	f107 030a 	add.w	r3, r7, #10
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6978      	ldr	r0, [r7, #20]
 800c6d0:	f000 f81b 	bl	800c70a <USBD_GetNextDesc>
 800c6d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	785b      	ldrb	r3, [r3, #1]
 800c6da:	2b05      	cmp	r3, #5
 800c6dc:	d108      	bne.n	800c6f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	789b      	ldrb	r3, [r3, #2]
 800c6e6:	78fa      	ldrb	r2, [r7, #3]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d008      	beq.n	800c6fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	885b      	ldrh	r3, [r3, #2]
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	897b      	ldrh	r3, [r7, #10]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d8e5      	bhi.n	800c6c8 <USBD_GetEpDesc+0x32>
 800c6fc:	e000      	b.n	800c700 <USBD_GetEpDesc+0x6a>
          break;
 800c6fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c700:	693b      	ldr	r3, [r7, #16]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b085      	sub	sp, #20
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	881a      	ldrh	r2, [r3, #0]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	b29b      	uxth	r3, r3
 800c722:	4413      	add	r3, r2
 800c724:	b29a      	uxth	r2, r3
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c736:	68fb      	ldr	r3, [r7, #12]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3714      	adds	r7, #20
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c744:	b480      	push	{r7}
 800c746:	b087      	sub	sp, #28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	3301      	adds	r3, #1
 800c75a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c762:	8a3b      	ldrh	r3, [r7, #16]
 800c764:	021b      	lsls	r3, r3, #8
 800c766:	b21a      	sxth	r2, r3
 800c768:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	b21b      	sxth	r3, r3
 800c770:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c772:	89fb      	ldrh	r3, [r7, #14]
}
 800c774:	4618      	mov	r0, r3
 800c776:	371c      	adds	r7, #28
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c796:	2b40      	cmp	r3, #64	; 0x40
 800c798:	d005      	beq.n	800c7a6 <USBD_StdDevReq+0x26>
 800c79a:	2b40      	cmp	r3, #64	; 0x40
 800c79c:	d857      	bhi.n	800c84e <USBD_StdDevReq+0xce>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00f      	beq.n	800c7c2 <USBD_StdDevReq+0x42>
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d153      	bne.n	800c84e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	32ae      	adds	r2, #174	; 0xae
 800c7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	4798      	blx	r3
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c0:	e04a      	b.n	800c858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	d83b      	bhi.n	800c842 <USBD_StdDevReq+0xc2>
 800c7ca:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <USBD_StdDevReq+0x50>)
 800c7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d0:	0800c825 	.word	0x0800c825
 800c7d4:	0800c839 	.word	0x0800c839
 800c7d8:	0800c843 	.word	0x0800c843
 800c7dc:	0800c82f 	.word	0x0800c82f
 800c7e0:	0800c843 	.word	0x0800c843
 800c7e4:	0800c803 	.word	0x0800c803
 800c7e8:	0800c7f9 	.word	0x0800c7f9
 800c7ec:	0800c843 	.word	0x0800c843
 800c7f0:	0800c81b 	.word	0x0800c81b
 800c7f4:	0800c80d 	.word	0x0800c80d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fa3c 	bl	800cc78 <USBD_GetDescriptor>
          break;
 800c800:	e024      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fbcb 	bl	800cfa0 <USBD_SetAddress>
          break;
 800c80a:	e01f      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fc0a 	bl	800d028 <USBD_SetConfig>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
          break;
 800c818:	e018      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fcad 	bl	800d17c <USBD_GetConfig>
          break;
 800c822:	e013      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fcde 	bl	800d1e8 <USBD_GetStatus>
          break;
 800c82c:	e00e      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fd0d 	bl	800d250 <USBD_SetFeature>
          break;
 800c836:	e009      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c838:	6839      	ldr	r1, [r7, #0]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fd31 	bl	800d2a2 <USBD_ClrFeature>
          break;
 800c840:	e004      	b.n	800c84c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fd88 	bl	800d35a <USBD_CtlError>
          break;
 800c84a:	bf00      	nop
      }
      break;
 800c84c:	e004      	b.n	800c858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fd82 	bl	800d35a <USBD_CtlError>
      break;
 800c856:	bf00      	nop
  }

  return ret;
 800c858:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop

0800c864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c87a:	2b40      	cmp	r3, #64	; 0x40
 800c87c:	d005      	beq.n	800c88a <USBD_StdItfReq+0x26>
 800c87e:	2b40      	cmp	r3, #64	; 0x40
 800c880:	d852      	bhi.n	800c928 <USBD_StdItfReq+0xc4>
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <USBD_StdItfReq+0x26>
 800c886:	2b20      	cmp	r3, #32
 800c888:	d14e      	bne.n	800c928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c890:	b2db      	uxtb	r3, r3
 800c892:	3b01      	subs	r3, #1
 800c894:	2b02      	cmp	r3, #2
 800c896:	d840      	bhi.n	800c91a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	889b      	ldrh	r3, [r3, #4]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d836      	bhi.n	800c910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	889b      	ldrh	r3, [r3, #4]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff fed9 	bl	800c662 <USBD_CoreFindIF>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	2bff      	cmp	r3, #255	; 0xff
 800c8b8:	d01d      	beq.n	800c8f6 <USBD_StdItfReq+0x92>
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d11a      	bne.n	800c8f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c8c0:	7bba      	ldrb	r2, [r7, #14]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	32ae      	adds	r2, #174	; 0xae
 800c8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00f      	beq.n	800c8f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c8d0:	7bba      	ldrb	r2, [r7, #14]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8d8:	7bba      	ldrb	r2, [r7, #14]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	32ae      	adds	r2, #174	; 0xae
 800c8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8ee:	e004      	b.n	800c8fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8f4:	e001      	b.n	800c8fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	88db      	ldrh	r3, [r3, #6]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d110      	bne.n	800c924 <USBD_StdItfReq+0xc0>
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10d      	bne.n	800c924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fdf1 	bl	800d4f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c90e:	e009      	b.n	800c924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fd21 	bl	800d35a <USBD_CtlError>
          break;
 800c918:	e004      	b.n	800c924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fd1c 	bl	800d35a <USBD_CtlError>
          break;
 800c922:	e000      	b.n	800c926 <USBD_StdItfReq+0xc2>
          break;
 800c924:	bf00      	nop
      }
      break;
 800c926:	e004      	b.n	800c932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c928:	6839      	ldr	r1, [r7, #0]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fd15 	bl	800d35a <USBD_CtlError>
      break;
 800c930:	bf00      	nop
  }

  return ret;
 800c932:	7bfb      	ldrb	r3, [r7, #15]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	889b      	ldrh	r3, [r3, #4]
 800c94e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c958:	2b40      	cmp	r3, #64	; 0x40
 800c95a:	d007      	beq.n	800c96c <USBD_StdEPReq+0x30>
 800c95c:	2b40      	cmp	r3, #64	; 0x40
 800c95e:	f200 817f 	bhi.w	800cc60 <USBD_StdEPReq+0x324>
 800c962:	2b00      	cmp	r3, #0
 800c964:	d02a      	beq.n	800c9bc <USBD_StdEPReq+0x80>
 800c966:	2b20      	cmp	r3, #32
 800c968:	f040 817a 	bne.w	800cc60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff fe83 	bl	800c67c <USBD_CoreFindEP>
 800c976:	4603      	mov	r3, r0
 800c978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c97a:	7b7b      	ldrb	r3, [r7, #13]
 800c97c:	2bff      	cmp	r3, #255	; 0xff
 800c97e:	f000 8174 	beq.w	800cc6a <USBD_StdEPReq+0x32e>
 800c982:	7b7b      	ldrb	r3, [r7, #13]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f040 8170 	bne.w	800cc6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c98a:	7b7a      	ldrb	r2, [r7, #13]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c992:	7b7a      	ldrb	r2, [r7, #13]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	32ae      	adds	r2, #174	; 0xae
 800c998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 8163 	beq.w	800cc6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c9a4:	7b7a      	ldrb	r2, [r7, #13]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	32ae      	adds	r2, #174	; 0xae
 800c9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	4798      	blx	r3
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9ba:	e156      	b.n	800cc6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d008      	beq.n	800c9d6 <USBD_StdEPReq+0x9a>
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	f300 8145 	bgt.w	800cc54 <USBD_StdEPReq+0x318>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 809b 	beq.w	800cb06 <USBD_StdEPReq+0x1ca>
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d03c      	beq.n	800ca4e <USBD_StdEPReq+0x112>
 800c9d4:	e13e      	b.n	800cc54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d002      	beq.n	800c9e8 <USBD_StdEPReq+0xac>
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d016      	beq.n	800ca14 <USBD_StdEPReq+0xd8>
 800c9e6:	e02c      	b.n	800ca42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00d      	beq.n	800ca0a <USBD_StdEPReq+0xce>
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	2b80      	cmp	r3, #128	; 0x80
 800c9f2:	d00a      	beq.n	800ca0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 fa4f 	bl	800de9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9fe:	2180      	movs	r1, #128	; 0x80
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f001 fa4b 	bl	800de9c <USBD_LL_StallEP>
 800ca06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca08:	e020      	b.n	800ca4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fca4 	bl	800d35a <USBD_CtlError>
              break;
 800ca12:	e01b      	b.n	800ca4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	885b      	ldrh	r3, [r3, #2]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10e      	bne.n	800ca3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00b      	beq.n	800ca3a <USBD_StdEPReq+0xfe>
 800ca22:	7bbb      	ldrb	r3, [r7, #14]
 800ca24:	2b80      	cmp	r3, #128	; 0x80
 800ca26:	d008      	beq.n	800ca3a <USBD_StdEPReq+0xfe>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	88db      	ldrh	r3, [r3, #6]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d104      	bne.n	800ca3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 fa31 	bl	800de9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fd58 	bl	800d4f0 <USBD_CtlSendStatus>

              break;
 800ca40:	e004      	b.n	800ca4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fc88 	bl	800d35a <USBD_CtlError>
              break;
 800ca4a:	bf00      	nop
          }
          break;
 800ca4c:	e107      	b.n	800cc5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d002      	beq.n	800ca60 <USBD_StdEPReq+0x124>
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d016      	beq.n	800ca8c <USBD_StdEPReq+0x150>
 800ca5e:	e04b      	b.n	800caf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca60:	7bbb      	ldrb	r3, [r7, #14]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00d      	beq.n	800ca82 <USBD_StdEPReq+0x146>
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	2b80      	cmp	r3, #128	; 0x80
 800ca6a:	d00a      	beq.n	800ca82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f001 fa13 	bl	800de9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca76:	2180      	movs	r1, #128	; 0x80
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f001 fa0f 	bl	800de9c <USBD_LL_StallEP>
 800ca7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca80:	e040      	b.n	800cb04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fc68 	bl	800d35a <USBD_CtlError>
              break;
 800ca8a:	e03b      	b.n	800cb04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	885b      	ldrh	r3, [r3, #2]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d136      	bne.n	800cb02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	4619      	mov	r1, r3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 fa19 	bl	800deda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fd21 	bl	800d4f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fde2 	bl	800c67c <USBD_CoreFindEP>
 800cab8:	4603      	mov	r3, r0
 800caba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cabc:	7b7b      	ldrb	r3, [r7, #13]
 800cabe:	2bff      	cmp	r3, #255	; 0xff
 800cac0:	d01f      	beq.n	800cb02 <USBD_StdEPReq+0x1c6>
 800cac2:	7b7b      	ldrb	r3, [r7, #13]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d11c      	bne.n	800cb02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cac8:	7b7a      	ldrb	r2, [r7, #13]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cad0:	7b7a      	ldrb	r2, [r7, #13]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	32ae      	adds	r2, #174	; 0xae
 800cad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d010      	beq.n	800cb02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cae0:	7b7a      	ldrb	r2, [r7, #13]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	32ae      	adds	r2, #174	; 0xae
 800cae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	4798      	blx	r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800caf6:	e004      	b.n	800cb02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fc2d 	bl	800d35a <USBD_CtlError>
              break;
 800cb00:	e000      	b.n	800cb04 <USBD_StdEPReq+0x1c8>
              break;
 800cb02:	bf00      	nop
          }
          break;
 800cb04:	e0ab      	b.n	800cc5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d002      	beq.n	800cb18 <USBD_StdEPReq+0x1dc>
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d032      	beq.n	800cb7c <USBD_StdEPReq+0x240>
 800cb16:	e097      	b.n	800cc48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d007      	beq.n	800cb2e <USBD_StdEPReq+0x1f2>
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
 800cb20:	2b80      	cmp	r3, #128	; 0x80
 800cb22:	d004      	beq.n	800cb2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fc17 	bl	800d35a <USBD_CtlError>
                break;
 800cb2c:	e091      	b.n	800cc52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	da0b      	bge.n	800cb4e <USBD_StdEPReq+0x212>
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
 800cb38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	3310      	adds	r3, #16
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	4413      	add	r3, r2
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	e00b      	b.n	800cb66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb54:	4613      	mov	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	4413      	add	r3, r2
 800cb64:	3304      	adds	r3, #4
 800cb66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2202      	movs	r2, #2
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fc61 	bl	800d43c <USBD_CtlSendData>
              break;
 800cb7a:	e06a      	b.n	800cc52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	da11      	bge.n	800cba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	f003 020f 	and.w	r2, r3, #15
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	3324      	adds	r3, #36	; 0x24
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d117      	bne.n	800cbce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fbda 	bl	800d35a <USBD_CtlError>
                  break;
 800cba6:	e054      	b.n	800cc52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	f003 020f 	and.w	r2, r3, #15
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	440b      	add	r3, r1
 800cbba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d104      	bne.n	800cbce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fbc7 	bl	800d35a <USBD_CtlError>
                  break;
 800cbcc:	e041      	b.n	800cc52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	da0b      	bge.n	800cbee <USBD_StdEPReq+0x2b2>
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
 800cbd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	3310      	adds	r3, #16
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	4413      	add	r3, r2
 800cbea:	3304      	adds	r3, #4
 800cbec:	e00b      	b.n	800cc06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	4413      	add	r3, r2
 800cc04:	3304      	adds	r3, #4
 800cc06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <USBD_StdEPReq+0x2d8>
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	2b80      	cmp	r3, #128	; 0x80
 800cc12:	d103      	bne.n	800cc1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	e00e      	b.n	800cc3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f001 f979 	bl	800df18 <USBD_LL_IsStallEP>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	e002      	b.n	800cc3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fbfb 	bl	800d43c <USBD_CtlSendData>
              break;
 800cc46:	e004      	b.n	800cc52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fb85 	bl	800d35a <USBD_CtlError>
              break;
 800cc50:	bf00      	nop
          }
          break;
 800cc52:	e004      	b.n	800cc5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fb7f 	bl	800d35a <USBD_CtlError>
          break;
 800cc5c:	bf00      	nop
      }
      break;
 800cc5e:	e005      	b.n	800cc6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fb79 	bl	800d35a <USBD_CtlError>
      break;
 800cc68:	e000      	b.n	800cc6c <USBD_StdEPReq+0x330>
      break;
 800cc6a:	bf00      	nop
  }

  return ret;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	885b      	ldrh	r3, [r3, #2]
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	3b01      	subs	r3, #1
 800cc98:	2b0e      	cmp	r3, #14
 800cc9a:	f200 8152 	bhi.w	800cf42 <USBD_GetDescriptor+0x2ca>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <USBD_GetDescriptor+0x2c>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800cd15 	.word	0x0800cd15
 800cca8:	0800cd2d 	.word	0x0800cd2d
 800ccac:	0800cd6d 	.word	0x0800cd6d
 800ccb0:	0800cf43 	.word	0x0800cf43
 800ccb4:	0800cf43 	.word	0x0800cf43
 800ccb8:	0800cee3 	.word	0x0800cee3
 800ccbc:	0800cf0f 	.word	0x0800cf0f
 800ccc0:	0800cf43 	.word	0x0800cf43
 800ccc4:	0800cf43 	.word	0x0800cf43
 800ccc8:	0800cf43 	.word	0x0800cf43
 800cccc:	0800cf43 	.word	0x0800cf43
 800ccd0:	0800cf43 	.word	0x0800cf43
 800ccd4:	0800cf43 	.word	0x0800cf43
 800ccd8:	0800cf43 	.word	0x0800cf43
 800ccdc:	0800cce1 	.word	0x0800cce1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cce6:	69db      	ldr	r3, [r3, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf2:	69db      	ldr	r3, [r3, #28]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	7c12      	ldrb	r2, [r2, #16]
 800ccf8:	f107 0108 	add.w	r1, r7, #8
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4798      	blx	r3
 800cd00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd02:	e126      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fb27 	bl	800d35a <USBD_CtlError>
        err++;
 800cd0c:	7afb      	ldrb	r3, [r7, #11]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	72fb      	strb	r3, [r7, #11]
      break;
 800cd12:	e11e      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	7c12      	ldrb	r2, [r2, #16]
 800cd20:	f107 0108 	add.w	r1, r7, #8
 800cd24:	4610      	mov	r0, r2
 800cd26:	4798      	blx	r3
 800cd28:	60f8      	str	r0, [r7, #12]
      break;
 800cd2a:	e112      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7c1b      	ldrb	r3, [r3, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10d      	bne.n	800cd50 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	f107 0208 	add.w	r2, r7, #8
 800cd40:	4610      	mov	r0, r2
 800cd42:	4798      	blx	r3
 800cd44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd4e:	e100      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	f107 0208 	add.w	r2, r7, #8
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	2202      	movs	r2, #2
 800cd68:	701a      	strb	r2, [r3, #0]
      break;
 800cd6a:	e0f2      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	885b      	ldrh	r3, [r3, #2]
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	f200 80ac 	bhi.w	800ced0 <USBD_GetDescriptor+0x258>
 800cd78:	a201      	add	r2, pc, #4	; (adr r2, 800cd80 <USBD_GetDescriptor+0x108>)
 800cd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7e:	bf00      	nop
 800cd80:	0800cd99 	.word	0x0800cd99
 800cd84:	0800cdcd 	.word	0x0800cdcd
 800cd88:	0800ce01 	.word	0x0800ce01
 800cd8c:	0800ce35 	.word	0x0800ce35
 800cd90:	0800ce69 	.word	0x0800ce69
 800cd94:	0800ce9d 	.word	0x0800ce9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	7c12      	ldrb	r2, [r2, #16]
 800cdb0:	f107 0108 	add.w	r1, r7, #8
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3
 800cdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdba:	e091      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 facb 	bl	800d35a <USBD_CtlError>
            err++;
 800cdc4:	7afb      	ldrb	r3, [r7, #11]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdca:	e089      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	7c12      	ldrb	r2, [r2, #16]
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdee:	e077      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fab1 	bl	800d35a <USBD_CtlError>
            err++;
 800cdf8:	7afb      	ldrb	r3, [r7, #11]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800cdfe:	e06f      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	7c12      	ldrb	r2, [r2, #16]
 800ce18:	f107 0108 	add.w	r1, r7, #8
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	4798      	blx	r3
 800ce20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce22:	e05d      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fa97 	bl	800d35a <USBD_CtlError>
            err++;
 800ce2c:	7afb      	ldrb	r3, [r7, #11]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	72fb      	strb	r3, [r7, #11]
          break;
 800ce32:	e055      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00b      	beq.n	800ce58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	7c12      	ldrb	r2, [r2, #16]
 800ce4c:	f107 0108 	add.w	r1, r7, #8
 800ce50:	4610      	mov	r0, r2
 800ce52:	4798      	blx	r3
 800ce54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce56:	e043      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fa7d 	bl	800d35a <USBD_CtlError>
            err++;
 800ce60:	7afb      	ldrb	r3, [r7, #11]
 800ce62:	3301      	adds	r3, #1
 800ce64:	72fb      	strb	r3, [r7, #11]
          break;
 800ce66:	e03b      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00b      	beq.n	800ce8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	7c12      	ldrb	r2, [r2, #16]
 800ce80:	f107 0108 	add.w	r1, r7, #8
 800ce84:	4610      	mov	r0, r2
 800ce86:	4798      	blx	r3
 800ce88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce8a:	e029      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa63 	bl	800d35a <USBD_CtlError>
            err++;
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	3301      	adds	r3, #1
 800ce98:	72fb      	strb	r3, [r7, #11]
          break;
 800ce9a:	e021      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00b      	beq.n	800cec0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	7c12      	ldrb	r2, [r2, #16]
 800ceb4:	f107 0108 	add.w	r1, r7, #8
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4798      	blx	r3
 800cebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cebe:	e00f      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fa49 	bl	800d35a <USBD_CtlError>
            err++;
 800cec8:	7afb      	ldrb	r3, [r7, #11]
 800ceca:	3301      	adds	r3, #1
 800cecc:	72fb      	strb	r3, [r7, #11]
          break;
 800cece:	e007      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ced0:	6839      	ldr	r1, [r7, #0]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 fa41 	bl	800d35a <USBD_CtlError>
          err++;
 800ced8:	7afb      	ldrb	r3, [r7, #11]
 800ceda:	3301      	adds	r3, #1
 800cedc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cede:	bf00      	nop
      }
      break;
 800cee0:	e037      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	7c1b      	ldrb	r3, [r3, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d109      	bne.n	800cefe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	f107 0208 	add.w	r2, r7, #8
 800cef6:	4610      	mov	r0, r2
 800cef8:	4798      	blx	r3
 800cefa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cefc:	e029      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fa2a 	bl	800d35a <USBD_CtlError>
        err++;
 800cf06:	7afb      	ldrb	r3, [r7, #11]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf0c:	e021      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7c1b      	ldrb	r3, [r3, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10d      	bne.n	800cf32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1e:	f107 0208 	add.w	r2, r7, #8
 800cf22:	4610      	mov	r0, r2
 800cf24:	4798      	blx	r3
 800cf26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	2207      	movs	r2, #7
 800cf2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf30:	e00f      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf32:	6839      	ldr	r1, [r7, #0]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 fa10 	bl	800d35a <USBD_CtlError>
        err++;
 800cf3a:	7afb      	ldrb	r3, [r7, #11]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf40:	e007      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fa08 	bl	800d35a <USBD_CtlError>
      err++;
 800cf4a:	7afb      	ldrb	r3, [r7, #11]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf50:	bf00      	nop
  }

  if (err != 0U)
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d11e      	bne.n	800cf96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	88db      	ldrh	r3, [r3, #6]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d016      	beq.n	800cf8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cf60:	893b      	ldrh	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00e      	beq.n	800cf84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	88da      	ldrh	r2, [r3, #6]
 800cf6a:	893b      	ldrh	r3, [r7, #8]
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	bf28      	it	cs
 800cf70:	4613      	movcs	r3, r2
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf76:	893b      	ldrh	r3, [r7, #8]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68f9      	ldr	r1, [r7, #12]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fa5d 	bl	800d43c <USBD_CtlSendData>
 800cf82:	e009      	b.n	800cf98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f9e7 	bl	800d35a <USBD_CtlError>
 800cf8c:	e004      	b.n	800cf98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 faae 	bl	800d4f0 <USBD_CtlSendStatus>
 800cf94:	e000      	b.n	800cf98 <USBD_GetDescriptor+0x320>
    return;
 800cf96:	bf00      	nop
  }
}
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop

0800cfa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	889b      	ldrh	r3, [r3, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d131      	bne.n	800d016 <USBD_SetAddress+0x76>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	88db      	ldrh	r3, [r3, #6]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d12d      	bne.n	800d016 <USBD_SetAddress+0x76>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	885b      	ldrh	r3, [r3, #2]
 800cfbe:	2b7f      	cmp	r3, #127	; 0x7f
 800cfc0:	d829      	bhi.n	800d016 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	885b      	ldrh	r3, [r3, #2]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d104      	bne.n	800cfe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f9bc 	bl	800d35a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe2:	e01d      	b.n	800d020 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7bfa      	ldrb	r2, [r7, #15]
 800cfe8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cfec:	7bfb      	ldrb	r3, [r7, #15]
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 ffbd 	bl	800df70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fa7a 	bl	800d4f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d004      	beq.n	800d00c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2202      	movs	r2, #2
 800d006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d00a:	e009      	b.n	800d020 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d014:	e004      	b.n	800d020 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 f99e 	bl	800d35a <USBD_CtlError>
  }
}
 800d01e:	bf00      	nop
 800d020:	bf00      	nop
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	885b      	ldrh	r3, [r3, #2]
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	4b4e      	ldr	r3, [pc, #312]	; (800d178 <USBD_SetConfig+0x150>)
 800d03e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d040:	4b4d      	ldr	r3, [pc, #308]	; (800d178 <USBD_SetConfig+0x150>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d905      	bls.n	800d054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 f985 	bl	800d35a <USBD_CtlError>
    return USBD_FAIL;
 800d050:	2303      	movs	r3, #3
 800d052:	e08c      	b.n	800d16e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d002      	beq.n	800d066 <USBD_SetConfig+0x3e>
 800d060:	2b03      	cmp	r3, #3
 800d062:	d029      	beq.n	800d0b8 <USBD_SetConfig+0x90>
 800d064:	e075      	b.n	800d152 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d066:	4b44      	ldr	r3, [pc, #272]	; (800d178 <USBD_SetConfig+0x150>)
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d020      	beq.n	800d0b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d06e:	4b42      	ldr	r3, [pc, #264]	; (800d178 <USBD_SetConfig+0x150>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d078:	4b3f      	ldr	r3, [pc, #252]	; (800d178 <USBD_SetConfig+0x150>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7fe ffbd 	bl	800bffe <USBD_SetClassConfig>
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d088:	7bfb      	ldrb	r3, [r7, #15]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d008      	beq.n	800d0a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f962 	bl	800d35a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2202      	movs	r2, #2
 800d09a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d09e:	e065      	b.n	800d16c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fa25 	bl	800d4f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2203      	movs	r2, #3
 800d0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0ae:	e05d      	b.n	800d16c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fa1d 	bl	800d4f0 <USBD_CtlSendStatus>
      break;
 800d0b6:	e059      	b.n	800d16c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0b8:	4b2f      	ldr	r3, [pc, #188]	; (800d178 <USBD_SetConfig+0x150>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d112      	bne.n	800d0e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d0c8:	4b2b      	ldr	r3, [pc, #172]	; (800d178 <USBD_SetConfig+0x150>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0d2:	4b29      	ldr	r3, [pc, #164]	; (800d178 <USBD_SetConfig+0x150>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7fe ffac 	bl	800c036 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fa06 	bl	800d4f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0e4:	e042      	b.n	800d16c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d0e6:	4b24      	ldr	r3, [pc, #144]	; (800d178 <USBD_SetConfig+0x150>)
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d02a      	beq.n	800d14a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7fe ff9a 	bl	800c036 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d102:	4b1d      	ldr	r3, [pc, #116]	; (800d178 <USBD_SetConfig+0x150>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d10c:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <USBD_SetConfig+0x150>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7fe ff73 	bl	800bffe <USBD_SetClassConfig>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00f      	beq.n	800d142 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f918 	bl	800d35a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	4619      	mov	r1, r3
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7fe ff7f 	bl	800c036 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2202      	movs	r2, #2
 800d13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d140:	e014      	b.n	800d16c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f9d4 	bl	800d4f0 <USBD_CtlSendStatus>
      break;
 800d148:	e010      	b.n	800d16c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 f9d0 	bl	800d4f0 <USBD_CtlSendStatus>
      break;
 800d150:	e00c      	b.n	800d16c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f900 	bl	800d35a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d15a:	4b07      	ldr	r3, [pc, #28]	; (800d178 <USBD_SetConfig+0x150>)
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7fe ff68 	bl	800c036 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d166:	2303      	movs	r3, #3
 800d168:	73fb      	strb	r3, [r7, #15]
      break;
 800d16a:	bf00      	nop
  }

  return ret;
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	200004f0 	.word	0x200004f0

0800d17c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	88db      	ldrh	r3, [r3, #6]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d004      	beq.n	800d198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f8e2 	bl	800d35a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d196:	e023      	b.n	800d1e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	dc02      	bgt.n	800d1aa <USBD_GetConfig+0x2e>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dc03      	bgt.n	800d1b0 <USBD_GetConfig+0x34>
 800d1a8:	e015      	b.n	800d1d6 <USBD_GetConfig+0x5a>
 800d1aa:	2b03      	cmp	r3, #3
 800d1ac:	d00b      	beq.n	800d1c6 <USBD_GetConfig+0x4a>
 800d1ae:	e012      	b.n	800d1d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	3308      	adds	r3, #8
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	4619      	mov	r1, r3
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f93c 	bl	800d43c <USBD_CtlSendData>
        break;
 800d1c4:	e00c      	b.n	800d1e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f934 	bl	800d43c <USBD_CtlSendData>
        break;
 800d1d4:	e004      	b.n	800d1e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f8be 	bl	800d35a <USBD_CtlError>
        break;
 800d1de:	bf00      	nop
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d81e      	bhi.n	800d23e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	88db      	ldrh	r3, [r3, #6]
 800d204:	2b02      	cmp	r3, #2
 800d206:	d004      	beq.n	800d212 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f8a5 	bl	800d35a <USBD_CtlError>
        break;
 800d210:	e01a      	b.n	800d248 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d005      	beq.n	800d22e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	f043 0202 	orr.w	r2, r3, #2
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	330c      	adds	r3, #12
 800d232:	2202      	movs	r2, #2
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f900 	bl	800d43c <USBD_CtlSendData>
      break;
 800d23c:	e004      	b.n	800d248 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f88a 	bl	800d35a <USBD_CtlError>
      break;
 800d246:	bf00      	nop
  }
}
 800d248:	bf00      	nop
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	885b      	ldrh	r3, [r3, #2]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d107      	bne.n	800d272 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2201      	movs	r2, #1
 800d266:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f940 	bl	800d4f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d270:	e013      	b.n	800d29a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	885b      	ldrh	r3, [r3, #2]
 800d276:	2b02      	cmp	r3, #2
 800d278:	d10b      	bne.n	800d292 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	889b      	ldrh	r3, [r3, #4]
 800d27e:	0a1b      	lsrs	r3, r3, #8
 800d280:	b29b      	uxth	r3, r3
 800d282:	b2da      	uxtb	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f930 	bl	800d4f0 <USBD_CtlSendStatus>
}
 800d290:	e003      	b.n	800d29a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f860 	bl	800d35a <USBD_CtlError>
}
 800d29a:	bf00      	nop
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d80b      	bhi.n	800d2d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	885b      	ldrh	r3, [r3, #2]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d10c      	bne.n	800d2dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f910 	bl	800d4f0 <USBD_CtlSendStatus>
      }
      break;
 800d2d0:	e004      	b.n	800d2dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f840 	bl	800d35a <USBD_CtlError>
      break;
 800d2da:	e000      	b.n	800d2de <USBD_ClrFeature+0x3c>
      break;
 800d2dc:	bf00      	nop
  }
}
 800d2de:	bf00      	nop
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	781a      	ldrb	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	3301      	adds	r3, #1
 800d300:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	781a      	ldrb	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	3301      	adds	r3, #1
 800d30e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f7ff fa17 	bl	800c744 <SWAPBYTE>
 800d316:	4603      	mov	r3, r0
 800d318:	461a      	mov	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3301      	adds	r3, #1
 800d322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f7ff fa0a 	bl	800c744 <SWAPBYTE>
 800d330:	4603      	mov	r3, r0
 800d332:	461a      	mov	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	3301      	adds	r3, #1
 800d33c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff f9fd 	bl	800c744 <SWAPBYTE>
 800d34a:	4603      	mov	r3, r0
 800d34c:	461a      	mov	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	80da      	strh	r2, [r3, #6]
}
 800d352:	bf00      	nop
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d364:	2180      	movs	r1, #128	; 0x80
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 fd98 	bl	800de9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d36c:	2100      	movs	r1, #0
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fd94 	bl	800de9c <USBD_LL_StallEP>
}
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d036      	beq.n	800d400 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d396:	6938      	ldr	r0, [r7, #16]
 800d398:	f000 f836 	bl	800d408 <USBD_GetLen>
 800d39c:	4603      	mov	r3, r0
 800d39e:	3301      	adds	r3, #1
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	7812      	ldrb	r2, [r2, #0]
 800d3b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d3cc:	e013      	b.n	800d3f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	7812      	ldrb	r2, [r2, #0]
 800d3d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	613b      	str	r3, [r7, #16]
    idx++;
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1e7      	bne.n	800d3ce <USBD_GetString+0x52>
 800d3fe:	e000      	b.n	800d402 <USBD_GetString+0x86>
    return;
 800d400:	bf00      	nop
  }
}
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d418:	e005      	b.n	800d426 <USBD_GetLen+0x1e>
  {
    len++;
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
 800d41c:	3301      	adds	r3, #1
 800d41e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	3301      	adds	r3, #1
 800d424:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1f5      	bne.n	800d41a <USBD_GetLen+0x12>
  }

  return len;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2202      	movs	r2, #2
 800d44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	2100      	movs	r1, #0
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f000 fda3 	bl	800dfae <USBD_LL_Transmit>

  return USBD_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b084      	sub	sp, #16
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	2100      	movs	r1, #0
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 fd92 	bl	800dfae <USBD_LL_Transmit>

  return USBD_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2203      	movs	r2, #3
 800d4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 fd96 	bl	800dff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	2100      	movs	r1, #0
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 fd85 	bl	800dff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2204      	movs	r2, #4
 800d4fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d500:	2300      	movs	r3, #0
 800d502:	2200      	movs	r2, #0
 800d504:	2100      	movs	r1, #0
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 fd51 	bl	800dfae <USBD_LL_Transmit>

  return USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2205      	movs	r2, #5
 800d522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d526:	2300      	movs	r3, #0
 800d528:	2200      	movs	r2, #0
 800d52a:	2100      	movs	r1, #0
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fd5f 	bl	800dff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d540:	2200      	movs	r2, #0
 800d542:	4912      	ldr	r1, [pc, #72]	; (800d58c <MX_USB_DEVICE_Init+0x50>)
 800d544:	4812      	ldr	r0, [pc, #72]	; (800d590 <MX_USB_DEVICE_Init+0x54>)
 800d546:	f7fe fcdd 	bl	800bf04 <USBD_Init>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d001      	beq.n	800d554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d550:	f7f4 fbe8 	bl	8001d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d554:	490f      	ldr	r1, [pc, #60]	; (800d594 <MX_USB_DEVICE_Init+0x58>)
 800d556:	480e      	ldr	r0, [pc, #56]	; (800d590 <MX_USB_DEVICE_Init+0x54>)
 800d558:	f7fe fd04 	bl	800bf64 <USBD_RegisterClass>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d562:	f7f4 fbdf 	bl	8001d24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d566:	490c      	ldr	r1, [pc, #48]	; (800d598 <MX_USB_DEVICE_Init+0x5c>)
 800d568:	4809      	ldr	r0, [pc, #36]	; (800d590 <MX_USB_DEVICE_Init+0x54>)
 800d56a:	f7fe fbfb 	bl	800bd64 <USBD_CDC_RegisterInterface>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d574:	f7f4 fbd6 	bl	8001d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d578:	4805      	ldr	r0, [pc, #20]	; (800d590 <MX_USB_DEVICE_Init+0x54>)
 800d57a:	f7fe fd29 	bl	800bfd0 <USBD_Start>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d584:	f7f4 fbce 	bl	8001d24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d588:	bf00      	nop
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	200000c4 	.word	0x200000c4
 800d590:	200004f4 	.word	0x200004f4
 800d594:	20000030 	.word	0x20000030
 800d598:	200000b0 	.word	0x200000b0

0800d59c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	4905      	ldr	r1, [pc, #20]	; (800d5b8 <CDC_Init_FS+0x1c>)
 800d5a4:	4805      	ldr	r0, [pc, #20]	; (800d5bc <CDC_Init_FS+0x20>)
 800d5a6:	f7fe fbf7 	bl	800bd98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5aa:	4905      	ldr	r1, [pc, #20]	; (800d5c0 <CDC_Init_FS+0x24>)
 800d5ac:	4803      	ldr	r0, [pc, #12]	; (800d5bc <CDC_Init_FS+0x20>)
 800d5ae:	f7fe fc15 	bl	800bddc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20000fe8 	.word	0x20000fe8
 800d5bc:	200004f4 	.word	0x200004f4
 800d5c0:	200007e8 	.word	0x200007e8

0800d5c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d5c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	6039      	str	r1, [r7, #0]
 800d5de:	71fb      	strb	r3, [r7, #7]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */

  switch(cmd)
 800d5e4:	79fb      	ldrb	r3, [r7, #7]
 800d5e6:	2b23      	cmp	r3, #35	; 0x23
 800d5e8:	f200 808c 	bhi.w	800d704 <CDC_Control_FS+0x130>
 800d5ec:	a201      	add	r2, pc, #4	; (adr r2, 800d5f4 <CDC_Control_FS+0x20>)
 800d5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f2:	bf00      	nop
 800d5f4:	0800d705 	.word	0x0800d705
 800d5f8:	0800d705 	.word	0x0800d705
 800d5fc:	0800d705 	.word	0x0800d705
 800d600:	0800d705 	.word	0x0800d705
 800d604:	0800d705 	.word	0x0800d705
 800d608:	0800d705 	.word	0x0800d705
 800d60c:	0800d705 	.word	0x0800d705
 800d610:	0800d705 	.word	0x0800d705
 800d614:	0800d705 	.word	0x0800d705
 800d618:	0800d705 	.word	0x0800d705
 800d61c:	0800d705 	.word	0x0800d705
 800d620:	0800d705 	.word	0x0800d705
 800d624:	0800d705 	.word	0x0800d705
 800d628:	0800d705 	.word	0x0800d705
 800d62c:	0800d705 	.word	0x0800d705
 800d630:	0800d705 	.word	0x0800d705
 800d634:	0800d705 	.word	0x0800d705
 800d638:	0800d705 	.word	0x0800d705
 800d63c:	0800d705 	.word	0x0800d705
 800d640:	0800d705 	.word	0x0800d705
 800d644:	0800d705 	.word	0x0800d705
 800d648:	0800d705 	.word	0x0800d705
 800d64c:	0800d705 	.word	0x0800d705
 800d650:	0800d705 	.word	0x0800d705
 800d654:	0800d705 	.word	0x0800d705
 800d658:	0800d705 	.word	0x0800d705
 800d65c:	0800d705 	.word	0x0800d705
 800d660:	0800d705 	.word	0x0800d705
 800d664:	0800d705 	.word	0x0800d705
 800d668:	0800d705 	.word	0x0800d705
 800d66c:	0800d705 	.word	0x0800d705
 800d670:	0800d705 	.word	0x0800d705
 800d674:	0800d685 	.word	0x0800d685
 800d678:	0800d6bf 	.word	0x0800d6bf
 800d67c:	0800d705 	.word	0x0800d705
 800d680:	0800d705 	.word	0x0800d705
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0]=pbuf[0];
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	781a      	ldrb	r2, [r3, #0]
 800d688:	4b22      	ldr	r3, [pc, #136]	; (800d714 <CDC_Control_FS+0x140>)
 800d68a:	701a      	strb	r2, [r3, #0]
    	buf[1]=pbuf[1];
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	785a      	ldrb	r2, [r3, #1]
 800d690:	4b20      	ldr	r3, [pc, #128]	; (800d714 <CDC_Control_FS+0x140>)
 800d692:	705a      	strb	r2, [r3, #1]
	    buf[2]=pbuf[2];
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	789a      	ldrb	r2, [r3, #2]
 800d698:	4b1e      	ldr	r3, [pc, #120]	; (800d714 <CDC_Control_FS+0x140>)
 800d69a:	709a      	strb	r2, [r3, #2]
	    buf[3]=pbuf[3];
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	78da      	ldrb	r2, [r3, #3]
 800d6a0:	4b1c      	ldr	r3, [pc, #112]	; (800d714 <CDC_Control_FS+0x140>)
 800d6a2:	70da      	strb	r2, [r3, #3]
	    buf[4]=pbuf[4];
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	791a      	ldrb	r2, [r3, #4]
 800d6a8:	4b1a      	ldr	r3, [pc, #104]	; (800d714 <CDC_Control_FS+0x140>)
 800d6aa:	711a      	strb	r2, [r3, #4]
	    buf[5]=pbuf[5];
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	795a      	ldrb	r2, [r3, #5]
 800d6b0:	4b18      	ldr	r3, [pc, #96]	; (800d714 <CDC_Control_FS+0x140>)
 800d6b2:	715a      	strb	r2, [r3, #5]
	    buf[6]=pbuf[6];
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	799a      	ldrb	r2, [r3, #6]
 800d6b8:	4b16      	ldr	r3, [pc, #88]	; (800d714 <CDC_Control_FS+0x140>)
 800d6ba:	719a      	strb	r2, [r3, #6]
    break;
 800d6bc:	e023      	b.n	800d706 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=buf[0];
 800d6be:	4b15      	ldr	r3, [pc, #84]	; (800d714 <CDC_Control_FS+0x140>)
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buf[1];
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	4a12      	ldr	r2, [pc, #72]	; (800d714 <CDC_Control_FS+0x140>)
 800d6cc:	7852      	ldrb	r2, [r2, #1]
 800d6ce:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buf[2];
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	3302      	adds	r3, #2
 800d6d4:	4a0f      	ldr	r2, [pc, #60]	; (800d714 <CDC_Control_FS+0x140>)
 800d6d6:	7892      	ldrb	r2, [r2, #2]
 800d6d8:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buf[3];
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	3303      	adds	r3, #3
 800d6de:	4a0d      	ldr	r2, [pc, #52]	; (800d714 <CDC_Control_FS+0x140>)
 800d6e0:	78d2      	ldrb	r2, [r2, #3]
 800d6e2:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buf[4];
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4a0a      	ldr	r2, [pc, #40]	; (800d714 <CDC_Control_FS+0x140>)
 800d6ea:	7912      	ldrb	r2, [r2, #4]
 800d6ec:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buf[5];
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	3305      	adds	r3, #5
 800d6f2:	4a08      	ldr	r2, [pc, #32]	; (800d714 <CDC_Control_FS+0x140>)
 800d6f4:	7952      	ldrb	r2, [r2, #5]
 800d6f6:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buf[6];
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	3306      	adds	r3, #6
 800d6fc:	4a05      	ldr	r2, [pc, #20]	; (800d714 <CDC_Control_FS+0x140>)
 800d6fe:	7992      	ldrb	r2, [r2, #6]
 800d700:	701a      	strb	r2, [r3, #0]

    break;
 800d702:	e000      	b.n	800d706 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d704:	bf00      	nop
  }

  return (USBD_OK);
 800d706:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d708:	4618      	mov	r0, r3
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	200007d0 	.word	0x200007d0

0800d718 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d722:	6879      	ldr	r1, [r7, #4]
 800d724:	481c      	ldr	r0, [pc, #112]	; (800d798 <CDC_Receive_FS+0x80>)
 800d726:	f7fe fb59 	bl	800bddc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d72a:	481b      	ldr	r0, [pc, #108]	; (800d798 <CDC_Receive_FS+0x80>)
 800d72c:	f7fe fbb4 	bl	800be98 <USBD_CDC_ReceivePacket>
//  uint16_t len = *Len;
//  CDC_Transmit_FS (Buf, len);
  RX_TempBuf[rxtempcounter] = Buf[rxtempcounter];
 800d730:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <CDC_Receive_FS+0x84>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	461a      	mov	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4413      	add	r3, r2
 800d73a:	4a18      	ldr	r2, [pc, #96]	; (800d79c <CDC_Receive_FS+0x84>)
 800d73c:	7812      	ldrb	r2, [r2, #0]
 800d73e:	7819      	ldrb	r1, [r3, #0]
 800d740:	4b17      	ldr	r3, [pc, #92]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d742:	5499      	strb	r1, [r3, r2]
  rxtempcounter++;
 800d744:	4b15      	ldr	r3, [pc, #84]	; (800d79c <CDC_Receive_FS+0x84>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	3301      	adds	r3, #1
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	4b13      	ldr	r3, [pc, #76]	; (800d79c <CDC_Receive_FS+0x84>)
 800d74e:	701a      	strb	r2, [r3, #0]
  if(rxtempcounter == 6)
 800d750:	4b12      	ldr	r3, [pc, #72]	; (800d79c <CDC_Receive_FS+0x84>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b06      	cmp	r3, #6
 800d756:	d11a      	bne.n	800d78e <CDC_Receive_FS+0x76>
  {
	  USB_RX_Buf[0] = RX_TempBuf[0];
 800d758:	4b11      	ldr	r3, [pc, #68]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d75a:	781a      	ldrb	r2, [r3, #0]
 800d75c:	4b11      	ldr	r3, [pc, #68]	; (800d7a4 <CDC_Receive_FS+0x8c>)
 800d75e:	701a      	strb	r2, [r3, #0]
	  USB_RX_Buf[1] = RX_TempBuf[1];
 800d760:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d762:	785a      	ldrb	r2, [r3, #1]
 800d764:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <CDC_Receive_FS+0x8c>)
 800d766:	705a      	strb	r2, [r3, #1]
	  USB_RX_Buf[2] = RX_TempBuf[2];
 800d768:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d76a:	789a      	ldrb	r2, [r3, #2]
 800d76c:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <CDC_Receive_FS+0x8c>)
 800d76e:	709a      	strb	r2, [r3, #2]
	  USB_RX_Buf[3] = RX_TempBuf[3];
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d772:	78da      	ldrb	r2, [r3, #3]
 800d774:	4b0b      	ldr	r3, [pc, #44]	; (800d7a4 <CDC_Receive_FS+0x8c>)
 800d776:	70da      	strb	r2, [r3, #3]
	  USB_RX_Buf[4] = RX_TempBuf[4];
 800d778:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d77a:	791a      	ldrb	r2, [r3, #4]
 800d77c:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <CDC_Receive_FS+0x8c>)
 800d77e:	711a      	strb	r2, [r3, #4]
	  USB_RX_Buf[5] = RX_TempBuf[5];
 800d780:	4b07      	ldr	r3, [pc, #28]	; (800d7a0 <CDC_Receive_FS+0x88>)
 800d782:	795a      	ldrb	r2, [r3, #5]
 800d784:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <CDC_Receive_FS+0x8c>)
 800d786:	715a      	strb	r2, [r3, #5]

	  rxtempcounter = 0;
 800d788:	4b04      	ldr	r3, [pc, #16]	; (800d79c <CDC_Receive_FS+0x84>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800d78e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	200004f4 	.word	0x200004f4
 800d79c:	200007e6 	.word	0x200007e6
 800d7a0:	200007e0 	.word	0x200007e0
 800d7a4:	200007d8 	.word	0x200007d8

0800d7a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d7b8:	4b0d      	ldr	r3, [pc, #52]	; (800d7f0 <CDC_Transmit_FS+0x48>)
 800d7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d001      	beq.n	800d7ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e00b      	b.n	800d7e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d7ce:	887b      	ldrh	r3, [r7, #2]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	6879      	ldr	r1, [r7, #4]
 800d7d4:	4806      	ldr	r0, [pc, #24]	; (800d7f0 <CDC_Transmit_FS+0x48>)
 800d7d6:	f7fe fadf 	bl	800bd98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d7da:	4805      	ldr	r0, [pc, #20]	; (800d7f0 <CDC_Transmit_FS+0x48>)
 800d7dc:	f7fe fb1c 	bl	800be18 <USBD_CDC_TransmitPacket>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	200004f4 	.word	0x200004f4

0800d7f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	4613      	mov	r3, r2
 800d800:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
	...

0800d818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	6039      	str	r1, [r7, #0]
 800d822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2212      	movs	r2, #18
 800d828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d82a:	4b03      	ldr	r3, [pc, #12]	; (800d838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr
 800d838:	200000e4 	.word	0x200000e4

0800d83c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
 800d842:	4603      	mov	r3, r0
 800d844:	6039      	str	r1, [r7, #0]
 800d846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2204      	movs	r2, #4
 800d84c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d84e:	4b03      	ldr	r3, [pc, #12]	; (800d85c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d850:	4618      	mov	r0, r3
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	20000104 	.word	0x20000104

0800d860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	6039      	str	r1, [r7, #0]
 800d86a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d86c:	79fb      	ldrb	r3, [r7, #7]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d105      	bne.n	800d87e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	4907      	ldr	r1, [pc, #28]	; (800d894 <USBD_FS_ProductStrDescriptor+0x34>)
 800d876:	4808      	ldr	r0, [pc, #32]	; (800d898 <USBD_FS_ProductStrDescriptor+0x38>)
 800d878:	f7ff fd80 	bl	800d37c <USBD_GetString>
 800d87c:	e004      	b.n	800d888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	4904      	ldr	r1, [pc, #16]	; (800d894 <USBD_FS_ProductStrDescriptor+0x34>)
 800d882:	4805      	ldr	r0, [pc, #20]	; (800d898 <USBD_FS_ProductStrDescriptor+0x38>)
 800d884:	f7ff fd7a 	bl	800d37c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d888:	4b02      	ldr	r3, [pc, #8]	; (800d894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	200017e8 	.word	0x200017e8
 800d898:	0800e408 	.word	0x0800e408

0800d89c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	4904      	ldr	r1, [pc, #16]	; (800d8bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d8ac:	4804      	ldr	r0, [pc, #16]	; (800d8c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8ae:	f7ff fd65 	bl	800d37c <USBD_GetString>
  return USBD_StrDesc;
 800d8b2:	4b02      	ldr	r3, [pc, #8]	; (800d8bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	200017e8 	.word	0x200017e8
 800d8c0:	0800e420 	.word	0x0800e420

0800d8c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	6039      	str	r1, [r7, #0]
 800d8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	221a      	movs	r2, #26
 800d8d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d8d6:	f000 f855 	bl	800d984 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d8da:	4b02      	ldr	r3, [pc, #8]	; (800d8e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20000108 	.word	0x20000108

0800d8e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	6039      	str	r1, [r7, #0]
 800d8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d105      	bne.n	800d906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	4907      	ldr	r1, [pc, #28]	; (800d91c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d8fe:	4808      	ldr	r0, [pc, #32]	; (800d920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d900:	f7ff fd3c 	bl	800d37c <USBD_GetString>
 800d904:	e004      	b.n	800d910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	4904      	ldr	r1, [pc, #16]	; (800d91c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d90a:	4805      	ldr	r0, [pc, #20]	; (800d920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d90c:	f7ff fd36 	bl	800d37c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d910:	4b02      	ldr	r3, [pc, #8]	; (800d91c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	200017e8 	.word	0x200017e8
 800d920:	0800e434 	.word	0x0800e434

0800d924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	6039      	str	r1, [r7, #0]
 800d92e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d105      	bne.n	800d942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	4907      	ldr	r1, [pc, #28]	; (800d958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d93a:	4808      	ldr	r0, [pc, #32]	; (800d95c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d93c:	f7ff fd1e 	bl	800d37c <USBD_GetString>
 800d940:	e004      	b.n	800d94c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	4904      	ldr	r1, [pc, #16]	; (800d958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d946:	4805      	ldr	r0, [pc, #20]	; (800d95c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d948:	f7ff fd18 	bl	800d37c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d94c:	4b02      	ldr	r3, [pc, #8]	; (800d958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	200017e8 	.word	0x200017e8
 800d95c:	0800e440 	.word	0x0800e440

0800d960 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	6039      	str	r1, [r7, #0]
 800d96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	220c      	movs	r2, #12
 800d970:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d972:	4b03      	ldr	r3, [pc, #12]	; (800d980 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d974:	4618      	mov	r0, r3
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	200000f8 	.word	0x200000f8

0800d984 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d98a:	4b0f      	ldr	r3, [pc, #60]	; (800d9c8 <Get_SerialNum+0x44>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d990:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <Get_SerialNum+0x48>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d996:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <Get_SerialNum+0x4c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d009      	beq.n	800d9be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9aa:	2208      	movs	r2, #8
 800d9ac:	4909      	ldr	r1, [pc, #36]	; (800d9d4 <Get_SerialNum+0x50>)
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f000 f814 	bl	800d9dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9b4:	2204      	movs	r2, #4
 800d9b6:	4908      	ldr	r1, [pc, #32]	; (800d9d8 <Get_SerialNum+0x54>)
 800d9b8:	68b8      	ldr	r0, [r7, #8]
 800d9ba:	f000 f80f 	bl	800d9dc <IntToUnicode>
  }
}
 800d9be:	bf00      	nop
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	1ff0f420 	.word	0x1ff0f420
 800d9cc:	1ff0f424 	.word	0x1ff0f424
 800d9d0:	1ff0f428 	.word	0x1ff0f428
 800d9d4:	2000010a 	.word	0x2000010a
 800d9d8:	2000011a 	.word	0x2000011a

0800d9dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b087      	sub	sp, #28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	75fb      	strb	r3, [r7, #23]
 800d9f2:	e027      	b.n	800da44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	0f1b      	lsrs	r3, r3, #28
 800d9f8:	2b09      	cmp	r3, #9
 800d9fa:	d80b      	bhi.n	800da14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	0f1b      	lsrs	r3, r3, #28
 800da00:	b2da      	uxtb	r2, r3
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	4619      	mov	r1, r3
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	440b      	add	r3, r1
 800da0c:	3230      	adds	r2, #48	; 0x30
 800da0e:	b2d2      	uxtb	r2, r2
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	e00a      	b.n	800da2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	0f1b      	lsrs	r3, r3, #28
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	4619      	mov	r1, r3
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	440b      	add	r3, r1
 800da24:	3237      	adds	r2, #55	; 0x37
 800da26:	b2d2      	uxtb	r2, r2
 800da28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	011b      	lsls	r3, r3, #4
 800da2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	3301      	adds	r3, #1
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	4413      	add	r3, r2
 800da3a:	2200      	movs	r2, #0
 800da3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da3e:	7dfb      	ldrb	r3, [r7, #23]
 800da40:	3301      	adds	r3, #1
 800da42:	75fb      	strb	r3, [r7, #23]
 800da44:	7dfa      	ldrb	r2, [r7, #23]
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d3d3      	bcc.n	800d9f4 <IntToUnicode+0x18>
  }
}
 800da4c:	bf00      	nop
 800da4e:	bf00      	nop
 800da50:	371c      	adds	r7, #28
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
	...

0800da5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b0ac      	sub	sp, #176	; 0xb0
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800da68:	2200      	movs	r2, #0
 800da6a:	601a      	str	r2, [r3, #0]
 800da6c:	605a      	str	r2, [r3, #4]
 800da6e:	609a      	str	r2, [r3, #8]
 800da70:	60da      	str	r2, [r3, #12]
 800da72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da74:	f107 0318 	add.w	r3, r7, #24
 800da78:	2284      	movs	r2, #132	; 0x84
 800da7a:	2100      	movs	r1, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f000 fc27 	bl	800e2d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da8a:	d161      	bne.n	800db50 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800da8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800da90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800da92:	2300      	movs	r3, #0
 800da94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da98:	f107 0318 	add.w	r3, r7, #24
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f9 fcd3 	bl	8007448 <HAL_RCCEx_PeriphCLKConfig>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800daa8:	f7f4 f93c 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800daac:	4b2a      	ldr	r3, [pc, #168]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800daae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab0:	4a29      	ldr	r2, [pc, #164]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800dab2:	f043 0301 	orr.w	r3, r3, #1
 800dab6:	6313      	str	r3, [r2, #48]	; 0x30
 800dab8:	4b27      	ldr	r3, [pc, #156]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800daba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabc:	f003 0301 	and.w	r3, r3, #1
 800dac0:	617b      	str	r3, [r7, #20]
 800dac2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800dac4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800dac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dacc:	2302      	movs	r3, #2
 800dace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dad8:	2303      	movs	r3, #3
 800dada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dade:	230a      	movs	r3, #10
 800dae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dae4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800dae8:	4619      	mov	r1, r3
 800daea:	481c      	ldr	r0, [pc, #112]	; (800db5c <HAL_PCD_MspInit+0x100>)
 800daec:	f7f5 fcb6 	bl	800345c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800daf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800daf8:	2300      	movs	r3, #0
 800dafa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dafe:	2300      	movs	r3, #0
 800db00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800db04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800db08:	4619      	mov	r1, r3
 800db0a:	4814      	ldr	r0, [pc, #80]	; (800db5c <HAL_PCD_MspInit+0x100>)
 800db0c:	f7f5 fca6 	bl	800345c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db10:	4b11      	ldr	r3, [pc, #68]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800db12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db14:	4a10      	ldr	r2, [pc, #64]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800db16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db1a:	6353      	str	r3, [r2, #52]	; 0x34
 800db1c:	4b0e      	ldr	r3, [pc, #56]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800db1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db24:	613b      	str	r3, [r7, #16]
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	4b0b      	ldr	r3, [pc, #44]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800db2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db2c:	4a0a      	ldr	r2, [pc, #40]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800db2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db32:	6453      	str	r3, [r2, #68]	; 0x44
 800db34:	4b08      	ldr	r3, [pc, #32]	; (800db58 <HAL_PCD_MspInit+0xfc>)
 800db36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db3c:	60fb      	str	r3, [r7, #12]
 800db3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db40:	2200      	movs	r2, #0
 800db42:	2100      	movs	r1, #0
 800db44:	2043      	movs	r0, #67	; 0x43
 800db46:	f7f5 f83a 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db4a:	2043      	movs	r0, #67	; 0x43
 800db4c:	f7f5 f853 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db50:	bf00      	nop
 800db52:	37b0      	adds	r7, #176	; 0xb0
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	40023800 	.word	0x40023800
 800db5c:	40020000 	.word	0x40020000

0800db60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800db74:	4619      	mov	r1, r3
 800db76:	4610      	mov	r0, r2
 800db78:	f7fe fa77 	bl	800c06a <USBD_LL_SetupStage>
}
 800db7c:	bf00      	nop
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	460b      	mov	r3, r1
 800db8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800db96:	78fa      	ldrb	r2, [r7, #3]
 800db98:	6879      	ldr	r1, [r7, #4]
 800db9a:	4613      	mov	r3, r2
 800db9c:	00db      	lsls	r3, r3, #3
 800db9e:	4413      	add	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	440b      	add	r3, r1
 800dba4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	78fb      	ldrb	r3, [r7, #3]
 800dbac:	4619      	mov	r1, r3
 800dbae:	f7fe fab1 	bl	800c114 <USBD_LL_DataOutStage>
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800dbcc:	78fa      	ldrb	r2, [r7, #3]
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	334c      	adds	r3, #76	; 0x4c
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	78fb      	ldrb	r3, [r7, #3]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	f7fe fb4a 	bl	800c27a <USBD_LL_DataInStage>
}
 800dbe6:	bf00      	nop
 800dbe8:	3708      	adds	r7, #8
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe fc7e 	bl	800c4fe <USBD_LL_SOF>
}
 800dc02:	bf00      	nop
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dc12:	2301      	movs	r3, #1
 800dc14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d102      	bne.n	800dc24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]
 800dc22:	e008      	b.n	800dc36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d102      	bne.n	800dc32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	73fb      	strb	r3, [r7, #15]
 800dc30:	e001      	b.n	800dc36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dc32:	f7f4 f877 	bl	8001d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc3c:	7bfa      	ldrb	r2, [r7, #15]
 800dc3e:	4611      	mov	r1, r2
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fc1e 	bl	800c482 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fe fbc6 	bl	800c3de <USBD_LL_Reset>
}
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
	...

0800dc5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fc19 	bl	800c4a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	6812      	ldr	r2, [r2, #0]
 800dc7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc82:	f043 0301 	orr.w	r3, r3, #1
 800dc86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a1b      	ldr	r3, [r3, #32]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc90:	4b04      	ldr	r3, [pc, #16]	; (800dca4 <HAL_PCD_SuspendCallback+0x48>)
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	4a03      	ldr	r2, [pc, #12]	; (800dca4 <HAL_PCD_SuspendCallback+0x48>)
 800dc96:	f043 0306 	orr.w	r3, r3, #6
 800dc9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	e000ed00 	.word	0xe000ed00

0800dca8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe fc09 	bl	800c4ce <USBD_LL_Resume>
}
 800dcbc:	bf00      	nop
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dcd6:	78fa      	ldrb	r2, [r7, #3]
 800dcd8:	4611      	mov	r1, r2
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe fc61 	bl	800c5a2 <USBD_LL_IsoOUTIncomplete>
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dcfa:	78fa      	ldrb	r2, [r7, #3]
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fc1d 	bl	800c53e <USBD_LL_IsoINIncomplete>
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fe fc73 	bl	800c606 <USBD_LL_DevConnected>
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe fc70 	bl	800c61c <USBD_LL_DevDisconnected>
}
 800dd3c:	bf00      	nop
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d13c      	bne.n	800ddce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dd54:	4a20      	ldr	r2, [pc, #128]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a1e      	ldr	r2, [pc, #120]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd60:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd64:	4b1c      	ldr	r3, [pc, #112]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dd6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dd6c:	4b1a      	ldr	r3, [pc, #104]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd6e:	2206      	movs	r2, #6
 800dd70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd72:	4b19      	ldr	r3, [pc, #100]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd74:	2202      	movs	r2, #2
 800dd76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd78:	4b17      	ldr	r3, [pc, #92]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd7e:	4b16      	ldr	r3, [pc, #88]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd80:	2202      	movs	r2, #2
 800dd82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dd84:	4b14      	ldr	r3, [pc, #80]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dd8a:	4b13      	ldr	r3, [pc, #76]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dd90:	4b11      	ldr	r3, [pc, #68]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dd96:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dd9c:	4b0e      	ldr	r3, [pc, #56]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dda2:	480d      	ldr	r0, [pc, #52]	; (800ddd8 <USBD_LL_Init+0x94>)
 800dda4:	f7f7 fb95 	bl	80054d2 <HAL_PCD_Init>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ddae:	f7f3 ffb9 	bl	8001d24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ddb2:	2180      	movs	r1, #128	; 0x80
 800ddb4:	4808      	ldr	r0, [pc, #32]	; (800ddd8 <USBD_LL_Init+0x94>)
 800ddb6:	f7f8 fe10 	bl	80069da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ddba:	2240      	movs	r2, #64	; 0x40
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	4806      	ldr	r0, [pc, #24]	; (800ddd8 <USBD_LL_Init+0x94>)
 800ddc0:	f7f8 fdc4 	bl	800694c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ddc4:	2280      	movs	r2, #128	; 0x80
 800ddc6:	2101      	movs	r1, #1
 800ddc8:	4803      	ldr	r0, [pc, #12]	; (800ddd8 <USBD_LL_Init+0x94>)
 800ddca:	f7f8 fdbf 	bl	800694c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	200019e8 	.word	0x200019e8

0800dddc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f7 fc91 	bl	800571a <HAL_PCD_Start>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 f97e 	bl	800e100 <USBD_Get_USB_Status>
 800de04:	4603      	mov	r3, r0
 800de06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de08:	7bbb      	ldrb	r3, [r7, #14]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b084      	sub	sp, #16
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	4608      	mov	r0, r1
 800de1c:	4611      	mov	r1, r2
 800de1e:	461a      	mov	r2, r3
 800de20:	4603      	mov	r3, r0
 800de22:	70fb      	strb	r3, [r7, #3]
 800de24:	460b      	mov	r3, r1
 800de26:	70bb      	strb	r3, [r7, #2]
 800de28:	4613      	mov	r3, r2
 800de2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de3a:	78bb      	ldrb	r3, [r7, #2]
 800de3c:	883a      	ldrh	r2, [r7, #0]
 800de3e:	78f9      	ldrb	r1, [r7, #3]
 800de40:	f7f8 f97e 	bl	8006140 <HAL_PCD_EP_Open>
 800de44:	4603      	mov	r3, r0
 800de46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 f958 	bl	800e100 <USBD_Get_USB_Status>
 800de50:	4603      	mov	r3, r0
 800de52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de54:	7bbb      	ldrb	r3, [r7, #14]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b084      	sub	sp, #16
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	460b      	mov	r3, r1
 800de68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de78:	78fa      	ldrb	r2, [r7, #3]
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7f8 f9c7 	bl	8006210 <HAL_PCD_EP_Close>
 800de82:	4603      	mov	r3, r0
 800de84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de86:	7bfb      	ldrb	r3, [r7, #15]
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 f939 	bl	800e100 <USBD_Get_USB_Status>
 800de8e:	4603      	mov	r3, r0
 800de90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de92:	7bbb      	ldrb	r3, [r7, #14]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800deb6:	78fa      	ldrb	r2, [r7, #3]
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7f8 fa9f 	bl	80063fe <HAL_PCD_EP_SetStall>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 f91a 	bl	800e100 <USBD_Get_USB_Status>
 800decc:	4603      	mov	r3, r0
 800dece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800def4:	78fa      	ldrb	r2, [r7, #3]
 800def6:	4611      	mov	r1, r2
 800def8:	4618      	mov	r0, r3
 800defa:	f7f8 fae4 	bl	80064c6 <HAL_PCD_EP_ClrStall>
 800defe:	4603      	mov	r3, r0
 800df00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df02:	7bfb      	ldrb	r3, [r7, #15]
 800df04:	4618      	mov	r0, r3
 800df06:	f000 f8fb 	bl	800e100 <USBD_Get_USB_Status>
 800df0a:	4603      	mov	r3, r0
 800df0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800df2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df30:	2b00      	cmp	r3, #0
 800df32:	da0b      	bge.n	800df4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800df34:	78fb      	ldrb	r3, [r7, #3]
 800df36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df3a:	68f9      	ldr	r1, [r7, #12]
 800df3c:	4613      	mov	r3, r2
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	4413      	add	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	440b      	add	r3, r1
 800df46:	333e      	adds	r3, #62	; 0x3e
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	e00b      	b.n	800df64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df52:	68f9      	ldr	r1, [r7, #12]
 800df54:	4613      	mov	r3, r2
 800df56:	00db      	lsls	r3, r3, #3
 800df58:	4413      	add	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	440b      	add	r3, r1
 800df5e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800df62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df64:	4618      	mov	r0, r3
 800df66:	3714      	adds	r7, #20
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	460b      	mov	r3, r1
 800df7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df8a:	78fa      	ldrb	r2, [r7, #3]
 800df8c:	4611      	mov	r1, r2
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f8 f8b1 	bl	80060f6 <HAL_PCD_SetAddress>
 800df94:	4603      	mov	r3, r0
 800df96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f000 f8b0 	bl	800e100 <USBD_Get_USB_Status>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b086      	sub	sp, #24
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]
 800dfba:	460b      	mov	r3, r1
 800dfbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfcc:	7af9      	ldrb	r1, [r7, #11]
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	f7f8 f9ca 	bl	800636a <HAL_PCD_EP_Transmit>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfda:	7dfb      	ldrb	r3, [r7, #23]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 f88f 	bl	800e100 <USBD_Get_USB_Status>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfe6:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	607a      	str	r2, [r7, #4]
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	460b      	mov	r3, r1
 800dffe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e00e:	7af9      	ldrb	r1, [r7, #11]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	f7f8 f946 	bl	80062a4 <HAL_PCD_EP_Receive>
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 f86e 	bl	800e100 <USBD_Get_USB_Status>
 800e024:	4603      	mov	r3, r0
 800e026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e028:	7dbb      	ldrb	r3, [r7, #22]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3718      	adds	r7, #24
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	460b      	mov	r3, r1
 800e03c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e044:	78fa      	ldrb	r2, [r7, #3]
 800e046:	4611      	mov	r1, r2
 800e048:	4618      	mov	r0, r3
 800e04a:	f7f8 f976 	bl	800633a <HAL_PCD_EP_GetRxCount>
 800e04e:	4603      	mov	r3, r0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <HAL_PCDEx_LPM_Callback+0x18>
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d01f      	beq.n	800e0ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e06e:	e03b      	b.n	800e0e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a1b      	ldr	r3, [r3, #32]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e078:	f000 f83c 	bl	800e0f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e07c:	4b1c      	ldr	r3, [pc, #112]	; (800e0f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	4a1b      	ldr	r2, [pc, #108]	; (800e0f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e082:	f023 0306 	bic.w	r3, r3, #6
 800e086:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	6812      	ldr	r2, [r2, #0]
 800e096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e09a:	f023 0301 	bic.w	r3, r3, #1
 800e09e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe fa11 	bl	800c4ce <USBD_LL_Resume>
    break;
 800e0ac:	e01c      	b.n	800e0e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	6812      	ldr	r2, [r2, #0]
 800e0bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e0c0:	f043 0301 	orr.w	r3, r3, #1
 800e0c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe f9e8 	bl	800c4a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d005      	beq.n	800e0e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0da:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	4a04      	ldr	r2, [pc, #16]	; (800e0f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e0e0:	f043 0306 	orr.w	r3, r3, #6
 800e0e4:	6113      	str	r3, [r2, #16]
    break;
 800e0e6:	bf00      	nop
}
 800e0e8:	bf00      	nop
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	e000ed00 	.word	0xe000ed00

0800e0f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e0f8:	f7f2 fece 	bl	8000e98 <SystemClock_Config>
}
 800e0fc:	bf00      	nop
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	2b03      	cmp	r3, #3
 800e112:	d817      	bhi.n	800e144 <USBD_Get_USB_Status+0x44>
 800e114:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <USBD_Get_USB_Status+0x1c>)
 800e116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11a:	bf00      	nop
 800e11c:	0800e12d 	.word	0x0800e12d
 800e120:	0800e133 	.word	0x0800e133
 800e124:	0800e139 	.word	0x0800e139
 800e128:	0800e13f 	.word	0x0800e13f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	73fb      	strb	r3, [r7, #15]
    break;
 800e130:	e00b      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e132:	2303      	movs	r3, #3
 800e134:	73fb      	strb	r3, [r7, #15]
    break;
 800e136:	e008      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e138:	2301      	movs	r3, #1
 800e13a:	73fb      	strb	r3, [r7, #15]
    break;
 800e13c:	e005      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e13e:	2303      	movs	r3, #3
 800e140:	73fb      	strb	r3, [r7, #15]
    break;
 800e142:	e002      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e144:	2303      	movs	r3, #3
 800e146:	73fb      	strb	r3, [r7, #15]
    break;
 800e148:	bf00      	nop
  }
  return usb_status;
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <malloc>:
 800e158:	4b02      	ldr	r3, [pc, #8]	; (800e164 <malloc+0xc>)
 800e15a:	4601      	mov	r1, r0
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f000 b82b 	b.w	800e1b8 <_malloc_r>
 800e162:	bf00      	nop
 800e164:	20000170 	.word	0x20000170

0800e168 <free>:
 800e168:	4b02      	ldr	r3, [pc, #8]	; (800e174 <free+0xc>)
 800e16a:	4601      	mov	r1, r0
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f000 b8f3 	b.w	800e358 <_free_r>
 800e172:	bf00      	nop
 800e174:	20000170 	.word	0x20000170

0800e178 <sbrk_aligned>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4e0e      	ldr	r6, [pc, #56]	; (800e1b4 <sbrk_aligned+0x3c>)
 800e17c:	460c      	mov	r4, r1
 800e17e:	6831      	ldr	r1, [r6, #0]
 800e180:	4605      	mov	r5, r0
 800e182:	b911      	cbnz	r1, 800e18a <sbrk_aligned+0x12>
 800e184:	f000 f8ac 	bl	800e2e0 <_sbrk_r>
 800e188:	6030      	str	r0, [r6, #0]
 800e18a:	4621      	mov	r1, r4
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 f8a7 	bl	800e2e0 <_sbrk_r>
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	d00a      	beq.n	800e1ac <sbrk_aligned+0x34>
 800e196:	1cc4      	adds	r4, r0, #3
 800e198:	f024 0403 	bic.w	r4, r4, #3
 800e19c:	42a0      	cmp	r0, r4
 800e19e:	d007      	beq.n	800e1b0 <sbrk_aligned+0x38>
 800e1a0:	1a21      	subs	r1, r4, r0
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f000 f89c 	bl	800e2e0 <_sbrk_r>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d101      	bne.n	800e1b0 <sbrk_aligned+0x38>
 800e1ac:	f04f 34ff 	mov.w	r4, #4294967295
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	20001ef4 	.word	0x20001ef4

0800e1b8 <_malloc_r>:
 800e1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1bc:	1ccd      	adds	r5, r1, #3
 800e1be:	f025 0503 	bic.w	r5, r5, #3
 800e1c2:	3508      	adds	r5, #8
 800e1c4:	2d0c      	cmp	r5, #12
 800e1c6:	bf38      	it	cc
 800e1c8:	250c      	movcc	r5, #12
 800e1ca:	2d00      	cmp	r5, #0
 800e1cc:	4607      	mov	r7, r0
 800e1ce:	db01      	blt.n	800e1d4 <_malloc_r+0x1c>
 800e1d0:	42a9      	cmp	r1, r5
 800e1d2:	d905      	bls.n	800e1e0 <_malloc_r+0x28>
 800e1d4:	230c      	movs	r3, #12
 800e1d6:	603b      	str	r3, [r7, #0]
 800e1d8:	2600      	movs	r6, #0
 800e1da:	4630      	mov	r0, r6
 800e1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e2b4 <_malloc_r+0xfc>
 800e1e4:	f000 f868 	bl	800e2b8 <__malloc_lock>
 800e1e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ec:	461c      	mov	r4, r3
 800e1ee:	bb5c      	cbnz	r4, 800e248 <_malloc_r+0x90>
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	f7ff ffc0 	bl	800e178 <sbrk_aligned>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	d155      	bne.n	800e2aa <_malloc_r+0xf2>
 800e1fe:	f8d8 4000 	ldr.w	r4, [r8]
 800e202:	4626      	mov	r6, r4
 800e204:	2e00      	cmp	r6, #0
 800e206:	d145      	bne.n	800e294 <_malloc_r+0xdc>
 800e208:	2c00      	cmp	r4, #0
 800e20a:	d048      	beq.n	800e29e <_malloc_r+0xe6>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	4631      	mov	r1, r6
 800e210:	4638      	mov	r0, r7
 800e212:	eb04 0903 	add.w	r9, r4, r3
 800e216:	f000 f863 	bl	800e2e0 <_sbrk_r>
 800e21a:	4581      	cmp	r9, r0
 800e21c:	d13f      	bne.n	800e29e <_malloc_r+0xe6>
 800e21e:	6821      	ldr	r1, [r4, #0]
 800e220:	1a6d      	subs	r5, r5, r1
 800e222:	4629      	mov	r1, r5
 800e224:	4638      	mov	r0, r7
 800e226:	f7ff ffa7 	bl	800e178 <sbrk_aligned>
 800e22a:	3001      	adds	r0, #1
 800e22c:	d037      	beq.n	800e29e <_malloc_r+0xe6>
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	442b      	add	r3, r5
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	f8d8 3000 	ldr.w	r3, [r8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d038      	beq.n	800e2ae <_malloc_r+0xf6>
 800e23c:	685a      	ldr	r2, [r3, #4]
 800e23e:	42a2      	cmp	r2, r4
 800e240:	d12b      	bne.n	800e29a <_malloc_r+0xe2>
 800e242:	2200      	movs	r2, #0
 800e244:	605a      	str	r2, [r3, #4]
 800e246:	e00f      	b.n	800e268 <_malloc_r+0xb0>
 800e248:	6822      	ldr	r2, [r4, #0]
 800e24a:	1b52      	subs	r2, r2, r5
 800e24c:	d41f      	bmi.n	800e28e <_malloc_r+0xd6>
 800e24e:	2a0b      	cmp	r2, #11
 800e250:	d917      	bls.n	800e282 <_malloc_r+0xca>
 800e252:	1961      	adds	r1, r4, r5
 800e254:	42a3      	cmp	r3, r4
 800e256:	6025      	str	r5, [r4, #0]
 800e258:	bf18      	it	ne
 800e25a:	6059      	strne	r1, [r3, #4]
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	bf08      	it	eq
 800e260:	f8c8 1000 	streq.w	r1, [r8]
 800e264:	5162      	str	r2, [r4, r5]
 800e266:	604b      	str	r3, [r1, #4]
 800e268:	4638      	mov	r0, r7
 800e26a:	f104 060b 	add.w	r6, r4, #11
 800e26e:	f000 f829 	bl	800e2c4 <__malloc_unlock>
 800e272:	f026 0607 	bic.w	r6, r6, #7
 800e276:	1d23      	adds	r3, r4, #4
 800e278:	1af2      	subs	r2, r6, r3
 800e27a:	d0ae      	beq.n	800e1da <_malloc_r+0x22>
 800e27c:	1b9b      	subs	r3, r3, r6
 800e27e:	50a3      	str	r3, [r4, r2]
 800e280:	e7ab      	b.n	800e1da <_malloc_r+0x22>
 800e282:	42a3      	cmp	r3, r4
 800e284:	6862      	ldr	r2, [r4, #4]
 800e286:	d1dd      	bne.n	800e244 <_malloc_r+0x8c>
 800e288:	f8c8 2000 	str.w	r2, [r8]
 800e28c:	e7ec      	b.n	800e268 <_malloc_r+0xb0>
 800e28e:	4623      	mov	r3, r4
 800e290:	6864      	ldr	r4, [r4, #4]
 800e292:	e7ac      	b.n	800e1ee <_malloc_r+0x36>
 800e294:	4634      	mov	r4, r6
 800e296:	6876      	ldr	r6, [r6, #4]
 800e298:	e7b4      	b.n	800e204 <_malloc_r+0x4c>
 800e29a:	4613      	mov	r3, r2
 800e29c:	e7cc      	b.n	800e238 <_malloc_r+0x80>
 800e29e:	230c      	movs	r3, #12
 800e2a0:	603b      	str	r3, [r7, #0]
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	f000 f80e 	bl	800e2c4 <__malloc_unlock>
 800e2a8:	e797      	b.n	800e1da <_malloc_r+0x22>
 800e2aa:	6025      	str	r5, [r4, #0]
 800e2ac:	e7dc      	b.n	800e268 <_malloc_r+0xb0>
 800e2ae:	605b      	str	r3, [r3, #4]
 800e2b0:	deff      	udf	#255	; 0xff
 800e2b2:	bf00      	nop
 800e2b4:	20001ef0 	.word	0x20001ef0

0800e2b8 <__malloc_lock>:
 800e2b8:	4801      	ldr	r0, [pc, #4]	; (800e2c0 <__malloc_lock+0x8>)
 800e2ba:	f000 b84b 	b.w	800e354 <__retarget_lock_acquire_recursive>
 800e2be:	bf00      	nop
 800e2c0:	20002034 	.word	0x20002034

0800e2c4 <__malloc_unlock>:
 800e2c4:	4801      	ldr	r0, [pc, #4]	; (800e2cc <__malloc_unlock+0x8>)
 800e2c6:	f000 b846 	b.w	800e356 <__retarget_lock_release_recursive>
 800e2ca:	bf00      	nop
 800e2cc:	20002034 	.word	0x20002034

0800e2d0 <memset>:
 800e2d0:	4402      	add	r2, r0
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d100      	bne.n	800e2da <memset+0xa>
 800e2d8:	4770      	bx	lr
 800e2da:	f803 1b01 	strb.w	r1, [r3], #1
 800e2de:	e7f9      	b.n	800e2d4 <memset+0x4>

0800e2e0 <_sbrk_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4d06      	ldr	r5, [pc, #24]	; (800e2fc <_sbrk_r+0x1c>)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4608      	mov	r0, r1
 800e2ea:	602b      	str	r3, [r5, #0]
 800e2ec:	f7f4 f806 	bl	80022fc <_sbrk>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	d102      	bne.n	800e2fa <_sbrk_r+0x1a>
 800e2f4:	682b      	ldr	r3, [r5, #0]
 800e2f6:	b103      	cbz	r3, 800e2fa <_sbrk_r+0x1a>
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	20002030 	.word	0x20002030

0800e300 <__errno>:
 800e300:	4b01      	ldr	r3, [pc, #4]	; (800e308 <__errno+0x8>)
 800e302:	6818      	ldr	r0, [r3, #0]
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	20000170 	.word	0x20000170

0800e30c <__libc_init_array>:
 800e30c:	b570      	push	{r4, r5, r6, lr}
 800e30e:	4d0d      	ldr	r5, [pc, #52]	; (800e344 <__libc_init_array+0x38>)
 800e310:	4c0d      	ldr	r4, [pc, #52]	; (800e348 <__libc_init_array+0x3c>)
 800e312:	1b64      	subs	r4, r4, r5
 800e314:	10a4      	asrs	r4, r4, #2
 800e316:	2600      	movs	r6, #0
 800e318:	42a6      	cmp	r6, r4
 800e31a:	d109      	bne.n	800e330 <__libc_init_array+0x24>
 800e31c:	4d0b      	ldr	r5, [pc, #44]	; (800e34c <__libc_init_array+0x40>)
 800e31e:	4c0c      	ldr	r4, [pc, #48]	; (800e350 <__libc_init_array+0x44>)
 800e320:	f000 f866 	bl	800e3f0 <_init>
 800e324:	1b64      	subs	r4, r4, r5
 800e326:	10a4      	asrs	r4, r4, #2
 800e328:	2600      	movs	r6, #0
 800e32a:	42a6      	cmp	r6, r4
 800e32c:	d105      	bne.n	800e33a <__libc_init_array+0x2e>
 800e32e:	bd70      	pop	{r4, r5, r6, pc}
 800e330:	f855 3b04 	ldr.w	r3, [r5], #4
 800e334:	4798      	blx	r3
 800e336:	3601      	adds	r6, #1
 800e338:	e7ee      	b.n	800e318 <__libc_init_array+0xc>
 800e33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e33e:	4798      	blx	r3
 800e340:	3601      	adds	r6, #1
 800e342:	e7f2      	b.n	800e32a <__libc_init_array+0x1e>
 800e344:	0800e470 	.word	0x0800e470
 800e348:	0800e470 	.word	0x0800e470
 800e34c:	0800e470 	.word	0x0800e470
 800e350:	0800e474 	.word	0x0800e474

0800e354 <__retarget_lock_acquire_recursive>:
 800e354:	4770      	bx	lr

0800e356 <__retarget_lock_release_recursive>:
 800e356:	4770      	bx	lr

0800e358 <_free_r>:
 800e358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e35a:	2900      	cmp	r1, #0
 800e35c:	d044      	beq.n	800e3e8 <_free_r+0x90>
 800e35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e362:	9001      	str	r0, [sp, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	f1a1 0404 	sub.w	r4, r1, #4
 800e36a:	bfb8      	it	lt
 800e36c:	18e4      	addlt	r4, r4, r3
 800e36e:	f7ff ffa3 	bl	800e2b8 <__malloc_lock>
 800e372:	4a1e      	ldr	r2, [pc, #120]	; (800e3ec <_free_r+0x94>)
 800e374:	9801      	ldr	r0, [sp, #4]
 800e376:	6813      	ldr	r3, [r2, #0]
 800e378:	b933      	cbnz	r3, 800e388 <_free_r+0x30>
 800e37a:	6063      	str	r3, [r4, #4]
 800e37c:	6014      	str	r4, [r2, #0]
 800e37e:	b003      	add	sp, #12
 800e380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e384:	f7ff bf9e 	b.w	800e2c4 <__malloc_unlock>
 800e388:	42a3      	cmp	r3, r4
 800e38a:	d908      	bls.n	800e39e <_free_r+0x46>
 800e38c:	6825      	ldr	r5, [r4, #0]
 800e38e:	1961      	adds	r1, r4, r5
 800e390:	428b      	cmp	r3, r1
 800e392:	bf01      	itttt	eq
 800e394:	6819      	ldreq	r1, [r3, #0]
 800e396:	685b      	ldreq	r3, [r3, #4]
 800e398:	1949      	addeq	r1, r1, r5
 800e39a:	6021      	streq	r1, [r4, #0]
 800e39c:	e7ed      	b.n	800e37a <_free_r+0x22>
 800e39e:	461a      	mov	r2, r3
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	b10b      	cbz	r3, 800e3a8 <_free_r+0x50>
 800e3a4:	42a3      	cmp	r3, r4
 800e3a6:	d9fa      	bls.n	800e39e <_free_r+0x46>
 800e3a8:	6811      	ldr	r1, [r2, #0]
 800e3aa:	1855      	adds	r5, r2, r1
 800e3ac:	42a5      	cmp	r5, r4
 800e3ae:	d10b      	bne.n	800e3c8 <_free_r+0x70>
 800e3b0:	6824      	ldr	r4, [r4, #0]
 800e3b2:	4421      	add	r1, r4
 800e3b4:	1854      	adds	r4, r2, r1
 800e3b6:	42a3      	cmp	r3, r4
 800e3b8:	6011      	str	r1, [r2, #0]
 800e3ba:	d1e0      	bne.n	800e37e <_free_r+0x26>
 800e3bc:	681c      	ldr	r4, [r3, #0]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	6053      	str	r3, [r2, #4]
 800e3c2:	440c      	add	r4, r1
 800e3c4:	6014      	str	r4, [r2, #0]
 800e3c6:	e7da      	b.n	800e37e <_free_r+0x26>
 800e3c8:	d902      	bls.n	800e3d0 <_free_r+0x78>
 800e3ca:	230c      	movs	r3, #12
 800e3cc:	6003      	str	r3, [r0, #0]
 800e3ce:	e7d6      	b.n	800e37e <_free_r+0x26>
 800e3d0:	6825      	ldr	r5, [r4, #0]
 800e3d2:	1961      	adds	r1, r4, r5
 800e3d4:	428b      	cmp	r3, r1
 800e3d6:	bf04      	itt	eq
 800e3d8:	6819      	ldreq	r1, [r3, #0]
 800e3da:	685b      	ldreq	r3, [r3, #4]
 800e3dc:	6063      	str	r3, [r4, #4]
 800e3de:	bf04      	itt	eq
 800e3e0:	1949      	addeq	r1, r1, r5
 800e3e2:	6021      	streq	r1, [r4, #0]
 800e3e4:	6054      	str	r4, [r2, #4]
 800e3e6:	e7ca      	b.n	800e37e <_free_r+0x26>
 800e3e8:	b003      	add	sp, #12
 800e3ea:	bd30      	pop	{r4, r5, pc}
 800e3ec:	20001ef0 	.word	0x20001ef0

0800e3f0 <_init>:
 800e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f2:	bf00      	nop
 800e3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3f6:	bc08      	pop	{r3}
 800e3f8:	469e      	mov	lr, r3
 800e3fa:	4770      	bx	lr

0800e3fc <_fini>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	bf00      	nop
 800e400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e402:	bc08      	pop	{r3}
 800e404:	469e      	mov	lr, r3
 800e406:	4770      	bx	lr
